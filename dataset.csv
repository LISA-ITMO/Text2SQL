№п.п,Текст запроса,Ответ,Контекст,Тема,Сложность,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
1,Вывести всю информацию об игровых боссах.,"SELECT * FROM boss;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
2,Вывести всю информацию об игрокам.,"SELECT * FROM player;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
3,Вывести всю информацию об игровых предметах..,"SELECT * FROM game_item;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
4,Вывести идентификатор и тип персонажа для всех неигровых персонажей.,"SELECT
id_npc
, type
FROM npc;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
5,"Для каждого босса вывести имя, скорость и урон.","SELECT
name
, speed
, damage
FROM boss;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
6,"Вывести информацию о сражениях игроков с боссами. Вывести идентификатор босса, дату сражений как 'Дата' и результат как 'Результат сражения'.","SELECT
id_boss
, action_date 'Дата'
, battle_result 'Результат сражения'
FROM action;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",1,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
7,Из таблицы user_item вывести информацию по идентификатору предмета и дате выдачи.,"SELECT
id_user_item
, date_item
FROM user_item;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
8,"Вывести из таблицы action информацию в следующем порядке: id_action, id_us_world как 'Мир', action_date как 'Дата', battle_result.","SELECT
id_action
, id_us_world 'Мир'
, action_date 'Дата'
, battle_result
FROM action;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",1,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
9,Какой урон может наносить оружие?,"SELECT DISTINCT damage FROM weapon;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
10,Вывести уникальную информацию из таблицы world о размерах миров.,"SELECT DISTINCT size FROM world;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
11,Какие существуют бонусы у игровых предметов?.,"SELECT DISTINCT bonus FROM game_item;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
12,В какие даты регистрировались пользователи?,"SELECT DISTINCT date FROM player;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
13,Боссы каких уровней представлены в игре?,"SELECT DISTINCT level FROM boss;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
14,Перечислите доступные типы игровых предметов.,"SELECT DISTINCT type FROM game_item;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
15,Построить список всех возможных парных сочетаний названия игрового мира и имени босса.,"SELECT DISTINCT
world.name
, boss.name
FROM world, boss;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
16,"Построить список всех возможных парных сочетаний, состоящих из статуса игроков и режима игры.","SELECT DISTINCT
status
, mode
FROM player, mode;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
17,"Построить список всех возможных парных сочетаний, состоящих из наименований игровых предметов и урона от оружия.","SELECT DISTINCT
name
, damage
FROM game_item, weapon;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
18,Вывести из таблицы npc всю информацию о неигровом персонаже с идентификатором 2.,"SELECT * FROM npc WHERE id_npc = 2;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
19,"Вывести имена боссов, у которых скорость больше 4.","SELECT name FROM boss WHERE speed > 4;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
20,"Вывести всю информацию из таблицы game_item, если бонус предмета не равен 'null';","SELECT * FROM game_item WHERE bonus <> 'null';
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
21,"Вывести всю информацию по игрокам, которые были зарегистрированы ранее 20 сентября 2018 года","SELECT * FROM player WHERE date < '2018-09-20';
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
22,"Вывести всю информацию об оружии, у которого урон кратен 25.","SELECT * FROM weapon WHERE MOD(damage, 25) = 0;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
23,"Вывести из таблицы action всю информацию о событиях, случившихся ранее 3 апреля 2018 года.","SELECT * FROM action WHERE action_date < '2018-04-03';
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
24,"Вывести идентификаторы режимов для миров, в которых играет пользователь с идентификатором 3.","SELECT id_mode FROM user_world WHERE id_user = 3;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
25,"Из таблицы action вывести идентификаторы сражений, произошедших после 2018-04-03.","SELECT id_action FROM action WHERE action_date > '2018-04-03';
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
26,"Из таблицы user_item вывести идентификатор предмета, дату выдачи этого предмета и идентификатор мира, в котором была выдана эта вещь. Дата выдачи должна быть ранее 2018-04-03.","SELECT
id_user_item
, date_item
, id_us_world
FROM user_item WHERE date_item < '2018-04-03';
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
27,"Вывести идентификатор сражения, идентификатор босса и идентификатор предмета для сражений, случившихся ранее 3 апреля 2018 года.","SELECT
id_action
, id_boss
, id_item
FROM action WHERE action_date < '2018-04-03';
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
28,"Вывести информацию о выданных на сервере идентификатор два предметах в следующем порядке: идентификатор предмета, дата выдачи предмета.","SELECT DISTINCT
id_item
, date_item
FROM user_item WHERE id_us_world = 2;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
29,"Вывести идентификатор мира, название и тип из таблицы world, если размер не равен 'M'.","SELECT
id_world
, name
, type_world
FROM world WHERE size <> 'M';
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
30,"Вывести уникальные даты событий, которые завершились победой игрока (battle_result=1). Отсортировать по дате.","SELECT DISTINCT action_date FROM action WHERE battle_result = 1 ORDER BY action_date;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",2,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
31,"Вывести все уникальные даты выдачи предметов, которые были выданы на серверах, чей идентификатор меньше 3. Отсортировать по дате.","SELECT DISTINCT date_item FROM user_item WHERE id_us_world < 3 ORDER BY date_item;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",2,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
32,"Вывести отсортированные уникальные даты создания из таблицы world, где тип мира 'jungle'.","SELECT DISTINCT date_create FROM world WHERE type_world = 'jungle' ORDER BY date_create;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",2,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
33,Для каждого взаимодействия игроков с неигровыми персонажами вывести идентификатор взаимодействия и имя npc.,"SELECT
id_cooperation
, name
FROM cooperation, npc WHERE cooperation.id_npc = npc.id_npc;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
34,Для всех пользовательских миров вывести идентификатор мира и название режима игры в нём.,"SELECT
id_us_world
, mode
FROM user_world, mode WHERE user_world.id_mode = mode.id_mode;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
35,Для каждого оружия вывести его урон и иконку (sprite).,"SELECT
damage
, sprite
FROM game_item, weapon WHERE game_item.id_weapon = weapon.id_weapon;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
36,"Для всех боёв вывести дату боя, имя босса и результат боя.","SELECT
action_date
, name
, battle_result
FROM action, boss WHERE action.id_boss = boss.id_boss;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
37,"Для каждого сражения вывести идентификатор босса, дату сражения и название предмета, который был получен игроком.","SELECT
id_boss
, action_date
, name
FROM action, game_item WHERE action.id_item = game_item.id_item;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
38,"Вывести информацию (id_user, login, date, status, about, id_world, id_mode) по активным игрокам на любом из серверов.","SELECT
player.id_user
, login
, date
, status
, about
, id_world
, id_mode
FROM player, user_world WHERE player.id_user = user_world.id_user;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
39,"Из таблиц user_item и game_item вывести информацию об игровых предметах (id_user_item, date_item, name, about).","SELECT
user_item.id_user_item
, date_item
, name
, about
FROM user_item, game_item WHERE user_item.id_item = game_item.id_item;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
40,"Для каждого пользователя вывести его логин, а также идентификаторы карты и режима игры для всех миров этого пользователя.","SELECT DISTINCT
login
, id_world
, id_mode
FROM player, user_world WHERE player.id_user = user_world.id_user;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",3,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
41,"Для всех пользовательских миров вывести идентификаторы карт, а также их название и размер. Отсортировать по убыванию идентификаторов.","SELECT
world.id_world
, name
, size
FROM user_world, world WHERE world.id_world = user_world.id_world ORDER BY world.id_world DESC;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",3,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
42,"Вывести идентификатор карты, идентификатор предмета и дату выдачи каждого предмета. Отсортировать по дате.","SELECT
id_world
, id_item
, date_item
FROM user_world, user_item WHERE user_world.id_us_world = user_item.id_us_world ORDER BY date_item;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",3,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
43,"Вывести идентификатор предмета, дату выдачи этого предмета и идентификатор мира, в котором была выдана эта вещь. Дата выдачи должна позже 2018-04-03, но раньше 2018-04-05.","SELECT
id_user_item
, date_item
, id_us_world
FROM user_item WHERE date_item > '2018-04-03' AND date_item < '2018-04-05';
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",4,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
44,"Вывести информацию (id_item, about, bonus, name, sprite, type, damage) по оружию, чей урон равен 45.","SELECT
id_item
, about
, bonus
, name
, sprite
, type
, damage
FROM game_item, weapon WHERE damage = 45 AND game_item.id_weapon = weapon.id_weapon;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
45,"Вывести всю информацию об оружии, у которого урон больше 50, но меньше 150 и не равен 75.","SELECT * FROM weapon WHERE damage > 50 AND damage < 150 AND damage != 75;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",4,2,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
46,"Вывести названия миров, у которых дата создания позже 2017-05-03 и размер равен M.","SELECT world.name FROM world WHERE world.date_create > '2017-05-03' AND size = 'M';
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",4,2,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
47,"Вывести названия миров, которые были созданы позднее 2017-01-01 и имеют размер мира равный S.","SELECT world.name FROM world WHERE world.date_create > '2017-01-01' AND world.size = 'S';
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",4,2,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
48,Вывести названия карт для всех пользовательских миров режима 'Normal'.,"SELECT name FROM world, user_world, mode WHERE
world.id_world = user_world.id_world
AND
user_world.id_mode = mode.id_mode
AND
mode = 'Normal';
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
49,Вывести названия карт для всех пользовательских миров режима 'Hardmode'.,"SELECT name FROM world, user_world, mode WHERE
world.id_world = user_world.id_world
AND
user_world.id_mode = mode.id_mode
AND
mode = 'Hardmode';
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
50,"Какие есть размеры миров, кроме L?","SELECT DISTINCT size FROM world WHERE NOT size = 'L';
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",4,2,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
51,"Вывести уникальные типы миров, размер которых либо L, либо S.","SELECT DISTINCT type_world FROM world WHERE size = 'S' OR size = 'L';
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",4,2,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
52,В мирах какого размера и типа играл пользователь с идентификатором 3?,"SELECT DISTINCT
size
, type_world
FROM world, player, user_world WHERE player.id_user = 3 AND player.id_user = user_world.id_user AND world.id_world = user_world.id_world;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
53,"Вывести всю информацию о мирах, у которых дата создания позднее 2018-04-01, его размер равен L и тип мира jungle или tundra.","SELECT * FROM world WHERE (world.date_create > '2018-04-01' AND world.size = 'L') AND (type_world = 'jungle' OR 'tundra');
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",4,2,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
54,"Вывести всю информацию о боссе, у которого уровень больше 1 и меньше 4 и нет магического трюка (magic_trick = 'none') или скорость босса меньше 3 и урон босса меньше 5.","SELECT * FROM boss WHERE ((boss.level > 1 AND (boss.level < 4)) AND boss.magic_trick = 'none') OR (boss.speed < 3 AND boss.damage < 5);
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",4,2,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
55,"Для каждого неигрового персонажа вывести информацию об игровых предметах, которые были получены при взаимодействии с ним. Вывести имя персонажа как 'NPC' и наименование предмета как 'Item'.","SELECT
npc.NAME 'NPC'
, game_item.NAME 'Item'
FROM npc, cooperation, game_item WHERE npc.id_npc = cooperation.id_npc AND cooperation.id_item = game_item.id_item;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
56,"Вывести название мира, название предмета и дату получения предмета. Предметы должны быть получены позднее 2015-01-01 и иметь тип Money или Weapon.","SELECT
world.name
, game_item.name
, user_item.date_item
FROM world, user_world, user_item, game_item WHERE
world.id_world = user_world.id_world
AND user_world.id_us_world = user_item.id_us_world
AND user_item.date_item > '2015-01-01' AND user_item.id_item = game_item.id_item
AND (game_item.type = 'Money' OR game_item.type = 'Weapon');
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
57,"Вывести всю информацию по тем модам, название которых состоит строго из 6 символов.","SELECT * FROM mode WHERE mode LIKE ""______"";
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",5,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0
58,"Вывести имена и описания неигровых персонажей, чей тип записывается пятью символами.","SELECT
name
, about
FROM npc WHERE type LIKE ""_____"";
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",5,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0
59,"Вывести имя, скорость и урон боссов, в чьих описаниях магии есть буква ""i"";","SELECT
name
, speed
, damage
FROM boss WHERE magic_trick LIKE ""%i%"";
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",5,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0
60,"Вывести названия, бонусы и описания предметов из таблицы game_item, если описание содержит слово ""Аксессуар"".","SELECT
name
, bonus
, about
FROM game_item WHERE about LIKE ""%Аксессуар%"";
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",5,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0
61,"Вывести имена и типы неигровых персонажей, чьи имена начинаются на G.","SELECT
name
, type
FROM npc WHERE name LIKE 'G%';
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",5,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0
62,"Вывести всю информацию об оружии, чей урон находится в диапазоне от 5 до 50. Использовать предикат BETWEEN.","SELECT * FROM weapon WHERE damage BETWEEN 5 AND 50;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0
63,"Вывести имена всех боссов, чей урон меньше 25 и больше 10. Использовать предикат BETWEEN.","SELECT name FROM boss WHERE damage BETWEEN 10 AND 25;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0
64,"Вывести скорость и имя босса для босса, чей уровень больше 10 и меньше 100. Использовать конструкцию BETWEEN.","SELECT
speed
, name
FROM boss WHERE damage BETWEEN 10 AND 100;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0
65,"Вывести логин и пароль игроков, которые зарегестрировались с 1 сентября по 1 октября 2018 года. Использовать предикат BETWEEN.","SELECT
login
, password
FROM player WHERE date BETWEEN ""2018-09-01"" AND ""2018-10-01"";
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0
66,"Вывести даты регистрации и пароли пользователей, чьи пароли заканчиваются либо на ""!"", либо на ""n"".","SELECT
date
, password
FROM player WHERE password LIKE ""%!"" OR password LIKE ""%n"";
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",5,2,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0
67,"Вывести без повторений имена боссов, с которыми сражались пользователи с буква a (лат.) в логине.","SELECT DISTINCT boss.name FROM boss, action, user_world, player WHERE
boss.id_boss = action.id_boss
AND action.id_us_world = user_world.id_us_world
AND user_world.id_user = player.id_user
AND player.login LIKE '%a%';
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",5,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
68,"Вывести идентификатор предмета и дату его выдачи из таблицы user_item, где идентификатор предмета либо в диапазоне 2-4, либо 6-8. Использовать конструкцию BETWEEN.","SELECT
id_item
, date_item
FROM user_item WHERE id_item BETWEEN 2 AND 4 OR id_item BETWEEN 6 AND 8;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",5,2,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0
69,Вывести количество всех записей в таблице user_item.,"SELECT COUNT(*) FROM user_item;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",6,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
70,Вывести средний урон от оружия.,"SELECT AVG(damage) FROM weapon;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",6,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
71,Вывести максимальный уровень босса со скоростью меньше 9.,"SELECT MAX(level) FROM boss WHERE speed < 9;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",6,2,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0
72,"Вывести максимальный уровень босса, который был побежден (battle_result=1).","SELECT MAX(level) FROM boss, action WHERE boss.id_boss = action.id_boss AND battle_result = 1;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",6,2,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0
73,"Вывести средний урон оружия, не имеющего бонуса (значение 'null').","SELECT AVG(damage) FROM weapon, game_item WHERE weapon.id_weapon = game_item.id_weapon AND bonus = 'null';
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",6,2,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0
74,Найти минимальный уровень босса.,"SELECT MIN(level) FROM boss;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",6,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
75,Когда на первом сервере был выдан первый предмет?,"SELECT MIN(date_item) FROM user_item WHERE id_us_world = 1;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",6,2,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0
76,"Вывести количество миров, которые были созданы 2 апреля 2018 года, и саму дату, подсчитывая только те миры, в названии которых есть 1.","SELECT
COUNT(*)
, date_create
FROM world WHERE name LIKE '%1%' AND date_create = '2018-04-02';
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",6,2,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0
77,Сколько карт различных размеров есть в игре?,"SELECT
size
, COUNT(*)
FROM world GROUP BY size;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",7,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0
78,Сколько предметов было получено игроками в каждый из дней?,"SELECT
date_item
, COUNT(*)
FROM user_item GROUP BY date_item;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",7,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0
79,Сколько предметов каждого типа было получено игроками?,"SELECT
type
, COUNT(type)
FROM game_item GROUP BY type;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",7,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0
80,Боссы каких уровней имеют урон больше 4? Вывести уровни и количество боссов.,"SELECT
level
, COUNT(*)
FROM boss WHERE damage > 4 GROUP BY level;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",7,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0
81,"Сколько в каждой категории предметов, не имеющих бонуса (значение бонуса 'null')?","SELECT
type
, COUNT(id_item)
FROM game_item WHERE bonus = 'null' GROUP BY type;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",7,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0
82,Сколько раз каждый неигровой персонаж взаимодействовал с игроками? Вывести имя и количество.,"SELECT
name
, COUNT(*)
FROM npc, cooperation WHERE cooperation.id_npc = npc.id_npc GROUP BY npc.id_npc;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",7,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0
83,Для каждого пользователя вывести логин и количество его миров.,"SELECT
login
, COUNT(id_us_world)
FROM player, user_world WHERE player.id_user = user_world.id_user GROUP BY user_world.id_user;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",7,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0
84,Вывести именя боссов и количество их сражений.,"SELECT
name
, COUNT(*)
FROM action, boss WHERE boss.id_boss = action.id_boss GROUP BY action.id_boss;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",7,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0
85,"Сколько предметов типа ""accessories"" было получено игроками в каждый из дней?","SELECT
date_item
, COUNT(*)
FROM user_item, game_item WHERE user_item.id_item = game_item.id_item AND type = 'accessories' GROUP BY date_item;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",7,2,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
86,"Вывести идентификаторы серверов и количество дат, в которые совершались события на этом сервере, переназвав этот столбец ""dates"".","SELECT
id_us_world
, COUNT(DISTINCT action_date) AS dates
FROM action GROUP BY id_us_world;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",7,2,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0
87,"Сколько раз боссы различных уровней, кроме первого, побеждали в битвах (battle_result = 0)? Вывести уровень и количество.","SELECT
level
, COUNT(*)
FROM boss, action WHERE battle_result = 0 AND boss.id_boss = action.id_boss AND level <> 1 GROUP BY level;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",7,2,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
88,"Для всего оружия, имеющего урон более 14, вывести количество игроков, обладающих им. Вывести название оружия, урон и количество.","SELECT
name
, COUNT(*)
FROM user_item, game_item, weapon WHERE weapon.id_weapon = game_item.id_weapon AND game_item.id_item = user_item.id_item AND damage > 14 GROUP BY (user_item.id_item);
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",7,2,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
89,"Вывести количество предметов каждого типа, использованных в успешной битве с боссами, не обладающими магическими способностями","SELECT
type
, COUNT(*)
FROM game_item, boss, action WHERE game_item.id_item = action.id_item AND battle_result = 1 AND magic_trick = 'none' AND boss.id_boss = action.id_boss GROUP BY type;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",7,2,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
90,"Посчитать количество игроков, играюших в режиме ""hardcore"" для мира каждого типа. Вывести тип и количество, упорядочить по убыванию количества игроков.","SELECT
type_world
, COUNT(*)
FROM player, user_world, world WHERE status = 'hardcore' AND player.id_user = user_world.id_user AND user_world.id_world = world.id_world GROUP BY type_world ORDER BY COUNT(*) DESC;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",7,4,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
91,"Вывести общее количество миров каждого типа, при условии, что количество должно быть больше единицы.","SELECT
type_world
, COUNT(*)
FROM world GROUP BY type_world HAVING COUNT(*) > 1;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",8,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0
92,"Для каждого уровня босса вывести уровень и среднее значение скорости по уровню, при условии, что средняя скорость больше 3.","SELECT
level
, AVG(speed)
FROM boss GROUP BY level HAVING AVG(speed) > 3;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",8,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0
93,"Вывести логины игроков и количество их миров, если количество миров больше одного.","SELECT
login
, COUNT(*)
FROM player, user_world, world WHERE player.id_user = user_world.id_user AND world.id_world = user_world.id_world GROUP BY player.id_user HAVING COUNT(*) > 1;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",8,2,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0
94,"Вывести магию, количество боссов, использующих эту магию, и среднюю скорость, учитывая, что средняя скорость должна быть больше 3 и меньше 8. Использовать предикат BETWEEN.","SELECT
magic_trick
, COUNT(*)
, AVG(speed)
FROM boss GROUP BY magic_trick HAVING AVG(speed) BETWEEN 3 AND 8;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",8,2,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0
95,"Посчитать количество боссов с различными скоростями, лежащими в диапазоне от 1 до 6. Отсортировать по значению скорости. Использовать предикат BETWEEN.","SELECT
speed
, COUNT(*)
FROM boss GROUP BY speed HAVING speed BETWEEN 1 AND 6 ORDER BY speed;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",8,2,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0
96,"Вывести количество предметов каждого типа и их средний урон, учитывая, что средний урон не должен быть равен 0. Использовать предикат NOT.","SELECT
type
, COUNT(*)
, AVG(damage)
FROM game_item, weapon WHERE game_item.id_weapon = weapon.id_weapon GROUP BY type HAVING NOT AVG(damage) = 0;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",8,2,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0
97,"Вывести идентификатор, урон, уровень и скорость самых быстрых боссов.","SELECT
id_boss
, damage
, level
, name
, speed
FROM boss WHERE speed = (SELECT MAX(speed) FROM boss);
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",9,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0
98,Вывести всю информацию про самый старый мир маленького ('S') размера,"SELECT *
FROM world
WHERE date_create = (SELECT MIN(date_create) FROM world WHERE size = 'S');
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",9,2,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0
99,"Вывести название, тип и урон всех предметов типа money или weapon.","SELECT
name
, type
, damage
FROM weapon, game_item WHERE game_item.id_weapon = weapon.id_weapon AND type IN ('money', 'weapon');
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",10,3,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0
100,"Вывести уникальные наименования предметов и дату их выдачи при условии, что они были выданы в мире с идентификатором 1, 3 или 5.","SELECT DISTINCT
name
, date_item
FROM game_item, user_item, user_world WHERE game_item.id_item = user_item.id_item AND user_world.id_us_world = user_item.id_us_world AND id_world IN (1, 3, 5);
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",10,2,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0
101,"Вывести всю информацию про сражения с боссами, чьи имена содержат 'r'. Не использовать соединение таблиц, использовать предикат ANY.","SELECT * FROM action WHERE id_boss = ANY(SELECT id_boss FROM boss WHERE name LIKE '%r%');
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",10,2,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0
102,"Вывести дату события и результат боя, где был выдан предмет, тип которого имеет в себе отрывок 'access'. Использовать предикат SOME, не использовать соединение таблиц.","SELECT
action_date
, battle_result
FROM action WHERE id_item = SOME(SELECT id_item FROM game_item WHERE type LIKE '%access%');
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",10,2,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0
103,"Вывести логины всех игроков, которые хоть однажды выиграли бой. Использовать предикат IN.","select login from player p where id_user IN (select id_user from user_world, action where user_world.id_us_world=action. id_us_world and p.id_user=user_world.id_user and battle_result=1);","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",10,3,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0
104,"Вывести информацию(action_date, battle_result, name, level) из таблиц action и boss, отсортировав результат по уровню босса.","SELECT
action_date
, battle_result
, name
, level
FROM action INNER JOIN boss ON action.id_boss = boss.id_boss ORDER BY level;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",11,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0
105,"Вывести информацию(id_user_item, date_item, user_item.id_us_world) из таблиц user_item и user_world, где дата выдачи предмета начинается с 3 апреля и заканчивается 5 апреля 2018 года. Использовать предикат BETWEEN.","SELECT
id_user_item
, date_item
, user_item.id_us_world
FROM user_item INNER JOIN user_world ON user_item.id_us_world = user_world.id_us_world WHERE date_item BETWEEN '2018-04-03' AND '2018-04-05';
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",11,2,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0
106,"Для всех боссов, чья скорость меньше 3, вывести имена и даты сражений игроков с ними. Учесть боссов, с которыми игроки не сражались.","SELECT
name
, action_date
FROM boss LEFT JOIN action ON boss.id_boss = action.id_boss WHERE speed < 3;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",12,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0
107,"Вывести все даты(action_date, date, date_item, date_create), находящиеся в БД.","SELECT action_date FROM action
UNION DISTINCT
SELECT date_create FROM world
UNION DISTINCT
SELECT date_item FROM user_item
UNION DISTINCT
SELECT date FROM player;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",13,2,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
108,"Вывести полную информацию о предметах, которые никогда не были были получены в результате какого-либо боя. В запросе использовать предикат EXISTS.","SELECT * FROM game_item WHERE NOT EXISTS (SELECT * FROM action WHERE game_item.id_item = action.id_item)
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",14,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0
109,"Вывести имя босса и столбец 'Damage level', который сформируется по следующему правилу: если damage>5, то вывести 'Strong', если нет, то 'Weak'.","SELECT
name
, IF(boss.damage > 5, 'Strong', 'Weak') AS 'Damage level'
FROM boss;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",15,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1
110,"Вывести имена боссов и значение 'Speed', которое будет отображать скорость босса: 'Fast', если скорость босса больше 5, и 'Not enough' в остальных случаях.","SELECT
boss.name
, IF(boss.speed > 5, 'Fast', 'Not enough') AS speed
FROM boss;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",15,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1
111,"Вывести из табилцы 'Boss' имена боссов и столбец 'Difficulty', который будет показывать сложность босса.
'Easy', если босс меньше 2 уровня ,'Hard', если босс больше второго уровня, но меньше 10, и '???' в остальных случаях. Отсортировать по именам.","SELECT
boss.name
, CASE
WHEN boss.level < 2 THEN 'Easy'
WHEN boss.level > 2 AND boss.level < 10 THEN 'Hard'
ELSE '???'
END AS difficulty
FROM boss ORDER BY boss.name;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",15,3,1,1,0,1,0,0,0,0,0,0,0,0,0,0,1
112,"Вывести название мода из таблицы mode и информацию о нем в столбце 'Information'.
Если мод 'Normal', то вывести 'Standart player', если мод 'Hardmode', то вывести 'Experienced player'', если мод 'Creative', то вывести 'Weak player'.","SELECT
mode.mode
, CASE
WHEN mode.mode = 'Normal' THEN 'Standart player'
WHEN mode.mode = 'Hardmode' THEN 'Experienced player'
WHEN mode.mode = 'Creative' THEN 'Weak player'
END AS information
FROM mode;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",15,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1
113,"Вывести имя босса и информацию о возможном с ним сражении в столбце 'Information'. Если уровень босса больше 5, то необохдимо проверить его скорость. Если скорсть меньше 2, то вывести 'Fight'. Если скорость от 2 до 6, то вывести 'Think about it'. В остальных случаях 'Run'. Если же уровень босса меньше 5, то необходимо узнать его трюк. Если у него есть какой-то магический трюк (значение не равно 'none'), то необходимо вывести 'Run'. Если же у него его нет, то вывести 'Fight'.","SELECT
boss.name
, IF(boss.level > 5
, CASE
WHEN boss.speed < 2 THEN 'Fight'
WHEN boss.speed BETWEEN 2 AND 6 THEN 'Think about it'
ELSE 'run'
END
,
CASE
WHEN boss.magic_trick != 'none' THEN 'Run'
ELSE 'Fight'
END
) AS information FROM boss;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",15,3,1,1,0,1,1,0,0,0,0,0,0,0,0,0,1
114,"В столбце 'Information' вывести 'Poor', если пароль пользователя не содержит букву 'N' и длина пароля меньше 5.
Вывести 'Cool', если содержит букву 'N' и длина пароля больше или равна 5. Также вывести столбец 'Experience', в котором вывести 'Old',
если дата регистрации меньше 2018-01-01; вывести 'Normal', если дата между 2018-01-01 и 2018-05-01; вывести 'New player',
если дата между 2018-05-02 и 2019-01-01; вывести 'Rookie во всех остальных случаях.","SELECT
    IF(player.password LIKE '%N%' AND CHAR_LENGTH(player.password) > 5, 'Cool', 'Poor') AS information
    , CASE
        WHEN player.date < '2018-01-01' THEN 'Old'
        WHEN player.date BETWEEN '2018-01-01' AND '2018-05-01' THEN 'Normal'
        WHEN player.date BETWEEN '2018-05-02' AND '2019-01-01' THEN 'New player'
        ELSE 'Rookie'
    END AS experience
FROM player;
","
CREATE TABLE terraria.boss (
  id_boss INT(255) NOT NULL PRIMARY KEY,
  damage INT(255) NOT NULL,
  level INT(255) NOT NULL,
  magic_trick VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  speed INT(255) NOT NULL,
);

CREATE TABLE terraria.player (
  id_user INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  login CHAR(255) NOT NULL,
  date DATE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status CHAR(255) NOT NULL,
  about CHAR(255) NULL DEFAULT NULL,
  date_ban CHAR(255) NULL DEFAULT NULL,
);

CREATE TABLE terraria.mode (
  id_mode INT(255) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  mode CHAR(255) NOT NULL,
);

CREATE TABLE terraria.world (
  id_world INT(255) NOT NULL PRIMARY KEY,
  name CHAR(255) NOT NULL,
  date_create DATE NOT NULL,
  size CHAR(1) NOT NULL,
  type_world CHAR(255) NOT NULL,
);

CREATE TABLE terraria.user_world (
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  id_user INT(255) NOT NULL,
  id_world INT(255) NOT NULL,
  id_mode INT(255) NOT NULL,
  CONSTRAINT fk_user_world_player FOREIGN KEY (id_user) REFERENCES terraria.player (id_user),
  CONSTRAINT fk_user_world_mode1 FOREIGN KEY (id_mode) REFERENCES terraria.mode (id_mode),
  CONSTRAINT fk_user_world_world1 FOREIGN KEY (id_world) REFERENCES terraria.world (id_world)
);

CREATE TABLE terraria.weapon (
  id_weapon VARCHAR(255) NOT NULL PRIMARY KEY,
  damage VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.game_item (
  id_item INT(255) NOT NULL PRIMARY KEY,
  about CHAR(255) NOT NULL,
  bonus CHAR(255) NOT NULL,
  name CHAR(255) NOT NULL,
  sprite CHAR(255) NULL DEFAULT NULL,
  type VARCHAR(255) NOT NULL,
  id_weapon VARCHAR(255) NOT NULL,
  CONSTRAINT fk_game_item_weapon1 FOREIGN KEY (id_weapon) REFERENCES terraria.weapon (id_weapon)
);

CREATE TABLE terraria.action (
  id_action VARCHAR(255) NOT NULL PRIMARY KEY,
  action_date DATE NOT NULL,
  battle_result BINARY(1) NOT NULL,
  id_us_world INT(255) NOT NULL,
  id_boss INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_action_boss1 FOREIGN KEY (id_boss) REFERENCES terraria.boss (id_boss),
  CONSTRAINT fk_action_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_action_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.npc (
  id_npc INT(255) NOT NULL PRIMARY KEY,
  about VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
);

CREATE TABLE terraria.cooperation (
  id_cooperation INT(255) NOT NULL PRIMARY KEY,
  id_us_world INT(255) NOT NULL,
  id_npc INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  CONSTRAINT fk_cooperation_npc1 FOREIGN KEY (id_npc) REFERENCES terraria.npc (id_npc),
  CONSTRAINT fk_cooperation_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_cooperation_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);

CREATE TABLE terraria.user_item (
  id_user_item INT(255) NOT NULL,
  id_item INT(255) NOT NULL,
  date_item DATE NOT NULL,
  id_us_world INT(255) NOT NULL PRIMARY KEY,
  CONSTRAINT fk_user_item_user_world1 FOREIGN KEY (id_us_world) REFERENCES terraria.user_world (id_us_world),
  CONSTRAINT fk_user_item_game_item1 FOREIGN KEY (id_item) REFERENCES terraria.game_item (id_item)
);
",15,4,1,1,0,1,1,0,0,0,0,0,0,0,0,0,1
115,Вывести все записи о расписаниях выставок.,"SELECT * FROM schedule;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
116,"Вывести клички собак и их породы. Формат вывода: name_dog, breed.","SELECT
name_dog
, breed
 FROM dog;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
117,Вывести уникальные клички собак. Формат вывода: name_dog.,"SELECT DISTINCT name_dog
 FROM dog;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
118,"Вывести уникальные идентификаторы клубов, за которыми закреплены эксперты. Формат вывода: id_club.","SELECT DISTINCT id_club
 FROM expert;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
119,"Вывести определённую информацию о выставках: наименование выставки, адрес проведения, даты начала и конца. Формат вывода: name_exh, address_exh, date_beg, date_end.","SELECT
name_exh
, address_exh
, date_beg
, date_end
 FROM exhibition;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
120,Вывести наименования клубов. Формат вывода: name_club.,"SELECT name_club FROM club;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
121,Вывести все записи о клубах.,"SELECT * FROM club;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
122,"Вывести уникальные комбинации пород собак и номеров рингов. Формат вывода: breed, num_ring.","SELECT DISTINCT
breed
, num_ring
 FROM schedule;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
123,"Вывести без повторений породы собак, для которых существуют записи в расписаниях на выставках. Формат вывода: breed.","SELECT DISTINCT breed FROM schedule;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
124,"Вывести породы и номера рингов всех расписаний выставок. Формат вывода: breed, num_ring.","SELECT
breed
, num_ring
FROM schedule;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
125,"Вывести без повторений различные номера судей и статусы их участия в выставках. Формат вывода: num_ref, status_ref.","SELECT DISTINCT
num_ref
, status_ref
FROM expert_reg;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
126,Вывести все записи об экспертах.,"SELECT * FROM expert;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
127,"Вывести уникальные комбинации оценок, полученных участниками на выставках. Формат вывода: grade_1, grade_2, grade_3.","SELECT DISTINCT
grade_1
, grade_2
, grade_3
 FROM evaluation;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
128,Вывести имена экспертов. Формат вывода: name_exp.,"SELECT name_exp
 FROM expert;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
129,"Вывести имена хозяев и их номера телефонов. Формат вывода: name_own, phone_own.","SELECT
name_own
, phone_own
 FROM owner;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
130,"Вывести идентификаторы и возраст собак породы ""Zwergpinscher"". Формат вывода: id_dog, age.","SELECT
id_dog
, age
 FROM dog
 WHERE breed = 'Zwergpinscher';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
131,"Вывести номера контрактов о спонсировании выставок, идентификаторы которых меньше 7. Формат вывода: num_cont.","SELECT num_cont
 FROM sponsorship
 WHERE id_spns < 7;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
132,"Вывести всю информацию об эксперте с номером телефона ""8-964-315-81-89"".","SELECT * FROM expert WHERE phone_exp = '8-964-315-81-89';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
133,"Для расписаний выставок, которые проводятся в первой половине дня, вывести идентификаторы выставок и номера рингов. Для выделения часа из даты в запросе можно воспользоваться функцией HOUR(<дата>). Формат вывода: id_exh, num_ring.","SELECT
id_exh
, num_ring
 FROM schedule
 WHERE HOUR(time_perf) < 12;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",2,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
134,"Вывести всю информацию об эксперте по имени ""Alfred"".","SELECT * FROM expert
 WHERE name_exp = 'Alfred';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
135,"Вывести оценки, полученные участниками на выставках за второе и третье упражнения, где оценка за первое упражнение больше 3. Формат вывода: grade_2, grade_3.","SELECT
grade_2
, grade_3
 FROM evaluation
 WHERE grade_1 > 3;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
136,"Вывести без повторений клички собак, возраст которых не равен 8 годам. Результаты упорядочить по кличке собаки в алфавитном порядке. Формат вывода: name_dog.","SELECT DISTINCT name_dog FROM dog WHERE age <> 8 ORDER BY name_dog;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",2,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
137,"Вывести без повторений имена владельцев, чей идентификатор не равен 17. Результаты упорядочить по имени владельца в обратном алфавитном порядке. Формат вывода: name_own.","SELECT DISTINCT name_own
 FROM owner
 WHERE id_own <> 17
 ORDER BY name_own DESC;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",2,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
138,"Вывести имена и адреса электронных почт экспертов, чьи серии паспортных номеров превосходят значение ""45 00"". Результаты упорядочить по имени эксперта в алфавитном порядке. Формат вывода: name_exp, email_exp.","SELECT
name_exp
, email_exp
 FROM expert
 WHERE passport_exp > '45 00%'
 ORDER BY name_exp ASC;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",2,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
139,"Вывести без поторений клички собак, чья дата последней вакцинации не превосходит ""2019-01-14"". Результаты упорядочить по кличке собаки в обратном алфавитном порядке. Формат вывода: name_dog.","SELECT DISTINCT name_dog FROM dog WHERE date_last_vac <= '2019-01-14' ORDER BY name_dog DESC;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",2,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
140,"Вывести информацию (ТОП-10) о самых лучших результатах оценивания на выставках по итогам суммирования трёх баллов за прохождение упражнений. Учесть, что не все оценки могут быть выставлены и воспользоваться функцией IFNULL(<проверяемое_значение>, <получаемое_значение>) для приведения таких оценок к 0. В запросе использовать LIMIT. Формат вывода: id_evl, <сумма>.","SELECT
id_evl
, COALESCE(grade_1, 0) + COALESCE(grade_2, 0) + COALESCE(grade_3, 0)
 AS summ
 FROM evaluation
 ORDER BY summ DESC
 LIMIT 10;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",2,5,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
141,"Для собак, зарегистрированных, но не участвующих или удалённых (статус участия отличен от ""Take part"") на выставках, вывести статусы их участия в этих выставках. Результаты упорядочить по статусу участия в алфавитном порядке. Формат вывода: id_dog, status_part.","SELECT DISTINCT
id_dog
, status_part
 FROM dog_reg
 WHERE status_part <> ""Take part""
 ORDER BY status_part ASC;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",2,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
142,"Вывести для собак клички их родителей, при условии, что кличка отца собаки в алфавитном порядке предшествует кличке матери. Результаты упорядочить по идентификаторам этих собак в порядке возрастания. Формат вывода: name_father_dog, name_mother_dog.","SELECT
name_father_dog
, name_mother_dog
 FROM dog
 WHERE name_father_dog < name_mother_dog
 ORDER BY id_dog ASC;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",2,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
143,"Вывести клички собак и имена их владельцев. Формат вывода: name_dog, name_own.","SELECT
name_dog
, name_own
 FROM dog, owner
 WHERE dog.id_own = owner.id_own;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
144,"Вывести наименования выставок и породы, для которых существуют расписания на этих выставках. 
 Учесть, что для монопородных выставок порода в расписании присутствует не один раз. Формат вывода: name_exh, breed.","SELECT DISTINCT
name_exh
, breed
 FROM exhibition, schedule
 WHERE exhibition.id_exh = schedule.id_exh;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",3,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
145,"Вывести имена владельцев и клички их собак, при условии, что возраст этих собак превышает 12 лет. Формат вывода: name_own, name_dog.","SELECT
name_own
, name_dog
 FROM owner, dog
 WHERE dog.id_own = owner.id_own
 AND age > 12;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
146,"Вывести наименования спонсоров и спонируемых ими выставок. Формат вывода: name_spnr, name_exh.","SELECT
name_spnr
, name_exh
 FROM sponsor, sponsorship, exhibition
 WHERE sponsor.id_spnr = sponsorship.id_spnr
 AND sponsorship.id_exh = exhibition.id_exh;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
147,"Вывести номера договоров о спонсировании выставок, подсписанных организацией ""Purina"". Формат вывода: num_cont.","SELECT num_cont
 FROM sponsor, sponsorship
 WHERE sponsor.id_spnr = sponsorship.id_spnr
 AND name_spnr = 'Purina';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
148,"Вывести записи обо всех клубах, кроме клуба с наименованием ""DEVIL"". В запросе использовать NOT.","SELECT * FROM club
 WHERE NOT name_club = 'DEVIL';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
149,"Вывести номера договоров о спонсировании выставок, подписанных до ""2020-01-01"" спонсором с идентификатором 4. Формат вывода: num_cont.","SELECT num_cont
 FROM sponsorship
 WHERE date_concl < '2020-01-01'
 AND id_spnr = 4;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
150,"Вывести наименования выставок, проводимых по адресу ""Moscow, Sokolniki park"" после ""2017-08-12"" включительно. Формат вывода: name_exh.","SELECT name_exh
 FROM exhibition
 WHERE address_exh = 'Moscow, Sokolniki park'
 AND date_beg >= '2017-08-12';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
151,"Вывести все записи о выставках, проводимых в период с ""2017-08-12"" по ""2018-08-10"".","SELECT * FROM exhibition
 WHERE date_beg > '2017-08-12'
 AND date_end < '2018-08-10';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
152,"Вывести имена хозяев и клички их собак, при условии, что последние вакцинации этих собак проводились не раньше 2019 года. Для выделения года из даты можно воспользоваться функцией YEAR(<date>). Формат вывода: name_own, name_dog.","SELECT
name_own
, name_dog
 FROM dog, owner
 WHERE owner.id_own = dog.id_own
 AND YEAR(date_last_vac) >= 2019;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
153,"Вывести наименования спонсоров, подписывавших договора о спонсировании выставок с ""2017-07-06"" по ""2017-07-16"". Формат вывода: name_spnr.","SELECT name_spnr
 FROM sponsor, sponsorship
 WHERE sponsor.id_spnr = sponsorship.id_spnr
 AND date_concl >= '2017-07-06'
 AND date_concl <= '2017-07-16';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
154,"Вывести адреса проведения выставок, в котрых участвовали эксперты с серией паспорта ""45 00"" и более. Формат вывода: address_exh.","SELECT DISTINCT address_exh
 FROM exhibition, expert_reg, expert
 WHERE exhibition.id_exh = expert_reg.id_exh
 AND expert_reg.id_exp = expert.id_exp
 AND passport_exp >= '45 00%';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
155,"Вывести все результаты оценивания на выставках, где первая оценка меньше пяти, вторая - не меньше пяти, либо записи, где третья оценка не выставлена. Формат вывода: grade_1, grade_2, grade_3.","SELECT
grade_1
, grade_2
, grade_3
FROM evaluation
 WHERE (grade_1 < 5 AND grade_2 >= 5) OR grade_3 IS null;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,2,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
156,"Вывести номера судей на выставках и даты их регистрации при условии, что регистрация произошла раньше ""2018-07-29"", а сам эксперт не участвовал в выставке (статус участия отличен от ""Take part""), получив при этом номер судьи, отличный от 3. Формат вывода: num_ref, date_reg_exp.","SELECT
num_ref
, date_reg_exp
 FROM expert_reg
 WHERE date_reg_exp < '2018-07-29'
 AND NOT (
 status_ref = 'Take part'
 OR num_ref = 3
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,2,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
157,"Вывести клички и даты регистрации на выставках собак породы ""Zwergpinscher"", при условии, что регистрация происходила с ""2020-01-01"" по ""2020-02-01"". Формат вывода: name_dog, date_reg_dog.","SELECT
name_dog
, date_reg_dog
 FROM dog, dog_reg
 WHERE dog.id_dog = dog_reg.id_dog
 AND breed = 'Zwergpinscher'
 AND date_reg_dog >= '2020-01-01'
 AND date_reg_dog <= '2020-02-01';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
158,"Вывести без повторений имена экспертов, которые регистрировались на участие в выставках, но не приняли в них участие (статус судейства отличен от ""Take part""), или номер телефона которых не равен ""8-618-212-13-55"". Формат вывода: name_exp.","SELECT DISTINCT name_exp
 FROM expert, expert_reg
 WHERE expert.id_exp = expert_reg.id_exp
 AND NOT (status_ref = 'Take part'
 AND phone_exp = ""8-618-212-13-55"");
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
159,"Вывести без повторений имена владельцев, хотя бы один раз не плативших счёт для участия в выставках (стату оплаты равен ""Not paid"") или не проходивших медосмотр (статус медосмотра равен ""Not passed"") со своими собаками, которые были зарегистрированы на выставках. Формат вывода: name_own.","SELECT DISTINCT name_own
 FROM owner, dog, dog_reg
 WHERE owner.id_own = dog.id_own
 AND dog.id_dog = dog_reg.id_dog
 AND (status_pay = 'Not paid'
 OR status_med = 'Not passed');
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
160,"Вывести клички и номера участников собак породы ""Zwergpinscher"", регистрировавшихся на выставках до ""2014-06-27"". Результаты упорядочить по кличке собаки в обратном алфавитном порядке. Формат вывода: name_dog, num_part.","SELECT
name_dog
, num_part
 FROM dog, dog_reg
 WHERE dog.id_dog = dog_reg.id_dog
 AND breed = 'Zwergpinscher'
 AND date_reg_dog < '2014-06-27'
 ORDER BY name_dog DESC;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
161,"Вывести без повторений идентификаторы и имена владельцев собак, которые были зарегистрированы на выставках до ""2013-01-01"" или после ""2019-01-01"", при условии, что собака относится к классности ""Pet"". Полученные данные упорядочить в алфавитном порядке. Формат вывода: id_own, name_own.","SELECT DISTINCT
owner.id_own
, name_own
 FROM owner, dog, dog_reg
 WHERE owner.id_own = dog.id_own
 AND dog.id_dog = dog_reg.id_dog
 AND class_dog = 'Pet'
 AND (date_reg_dog < '2013-01-01'
 OR date_reg_dog > '2019-01-01')
 ORDER BY name_own ASC;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
162,"Вывести клички, номера участников выставок и идентификаторы расписаний, по которым на выставках производилось оценивание, для собак, которые набирали на этих выставках за первое упражнение не 6 баллов или не 1 балл за второе упражнение, и при этом отметка за третье упражнение была выставлена. Формат вывода: name_dog, num_part, id_sch.","SELECT
name_dog
, num_part
, id_sch
 FROM dog, dog_reg, evaluation
 WHERE dog.id_dog = dog_reg.id_dog
 AND dog_reg.id_dog_reg = evaluation.id_dog_reg
 AND NOT (grade_1 = 6 AND grade_2 = 1 OR grade_3 IS null)
 ORDER BY name_dog;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
163,"Вывести наименования и даты начала выставок, в которых участвовали эксперты с идентификаторами, большими 9 или равными 1. Результаты упорядочить по дате начала выставок в порядке возрастания. Формат вывода: name_exh, date_beg.","SELECT DISTINCT
name_exh
, date_beg
 FROM exhibition, expert_reg
 WHERE exhibition.id_exh = expert_reg.id_exh
 AND (id_exp > 9
 OR id_exp = 1)
 ORDER BY date_beg ASC;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
164,"Для каждого эксперта, не закреплённого за клубом с наименованием 'DEVIL', или же не участвующего в выставке с идентификатором 3, вывести его имя, адрес электронной почты, идентификатр выставки, в которой он участвует, и номер судьи на такой выставке. Результаты упорядочить по возрастанию идентификатора выставки. Формат вывода: name_exp, email_exp, id_exh, num_ref.","SELECT
name_exp
, email_exp
, id_exh
, num_ref
 FROM club, expert, expert_reg
 WHERE expert.id_club = club.id_club
 AND expert.id_exp = expert_reg.id_exp
 AND NOT (name_club = 'DEVIL'
 AND id_exh = 3)
 ORDER BY id_exh ASC;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
165,"Вывести имена владельцев, клички их собак и наименования клубов, за которыми эти собаки закреплены, при условии, что дата последней вакцинации и дата последнего медосмотра собак приходятся не ранее, чем на 2018 год. Для выделения года из даты можно воспользоваться функцией YEAR(<date>). Формат вывода: name_own, name_club, name_dog.","SELECT DISTINCT
name_own
, name_club
, name_dog
 FROM owner, dog, club, dog_reg
 WHERE owner.id_own = dog.id_own
 AND club.id_club = dog.id_club
 AND dog_reg.id_dog = dog.id_dog
 AND YEAR(date_last_vac) >= 2018
 AND YEAR(date_med) >= 2018;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
166,"Вывести клички собак и сумму набранных ими при оценивании баллов, только для породы ""Russian wolfhound"". Учесть, что не все оценки могут быть выставлены, и воспользоваться функцией IFNULL(<проверяемое_значение>, <получаемое_значение>) для приведения таких оценок к 0. Формат вывода: name_dog, <сумма>.","SELECT
name_dog
, COALESCE(grade_1, 0) + COALESCE(grade_2, 0) + COALESCE(grade_3, 0)
 FROM dog, dog_reg, evaluation
 WHERE dog.id_dog = dog_reg.id_dog
 AND evaluation.id_dog_reg = dog_reg.id_dog_reg
 AND breed = 'Russian wolfhound';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,4,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
167,"Вывести без повторений идентификаторы и имена владельцев, чьи собаки участвуют (статус участия равен ""Take part"" или ""Suspended"") в выставках, спонсируемых организацией ""Pedigree"". Формат вывода: id_own, name_own.","SELECT DISTINCT
dog.id_own
, name_own
 FROM owner, dog, dog_reg, sponsorship, sponsor
 WHERE owner.id_own = dog.id_own
 AND dog.id_dog = dog_reg.id_dog
 AND dog_reg.id_exh = sponsorship.id_exh
 AND sponsorship.id_spnr = sponsor.id_spnr
 AND (status_part = 'Take part'
 OR status_part = 'Suspended') AND name_spnr = 'Pedigree';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
168,"Вывести все идентификаторы, клички и номера участников собак, которые когда либо оценивались на выставках на ринге под номером 3, при этом не были отстранены (статус не равен ""Suspended"") или же оценивались экспертом по имени ""Vasily"". Формат вывода: id_dog, name_dog.","SELECT
dog.id_dog
, name_dog
 FROM dog, dog_reg, evaluation, schedule
 , expert_reg, expert
 WHERE dog.id_dog = dog_reg.id_dog
 AND dog_reg.id_dog_reg = evaluation.id_dog_reg
 AND evaluation.id_sch = schedule.id_sch
 AND evaluation.id_exp_reg = expert_reg.id_exp_reg
 AND expert_reg.id_exp = expert.id_exp
 AND num_ring = 3
 AND (NOT status_part = 'Suspended'
 OR name_exp = 'Vasily');
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
169,"Вывести имена и номера телефонов владельцев собак, при условии, что номера телефонов оканчивается на 13. Формат вывода: name_own, phone_own.","SELECT
name_own
, phone_own
 FROM owner
 WHERE phone_own LIKE '%13';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",5,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0
170,"Вывести наименования всех выставок, проводимых в городе ""Moscow"". Формат вывода: name_exh.","SELECT name_exh
 FROM exhibition
 WHERE address_exh LIKE '%Moscow%';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",5,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0
171,"Вывести имена и номера телефонов владелцев собак с серией паспорта ""40 12"". Формат вывода: name_club, phone_club.","SELECT
name_own
, phone_own
 FROM owner
 WHERE passport_own LIKE '40 12%';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",5,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0
172,"Вывести уникальные имена владельцев собак, начинающиеся на букву ""A"". Формат вывода: name_own.","SELECT DISTINCT name_own
 FROM owner
 WHERE name_own LIKE 'A%';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",5,2,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0
173,"Вывести все записи об экспертах, чьи имена начинаются с буквы ""A"".","SELECT * FROM expert
 WHERE name_exp LIKE 'A%';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",5,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0
174,"Вывести уникальные адреса электронных почт экспертов, с условием, что первый символ адреса - буква от ""A"" до ""G"". Формат вывода: email_exp .","SELECT DISTINCT email_exp
 FROM expert
 WHERE email_exp BETWEEN 'A%' AND 'G%';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0
175,"Вывести без повторений клички собак, начинающиеся на букву от ""P"" до ""W"". Формат вывода: name_dog.","SELECT DISTINCT name_dog
 FROM dog
 WHERE name_dog BETWEEN 'P%' AND 'W%';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0
176,"Вывести даты регистрации собак, участвующих в выставках без происшествий (статус участия равен ""Take part""), приходящиеся на промежуток от ""2017-08-01"" до ""2020-02-07"" или меньшие, чем ""2012-06-01"". Формат вывода: date_reg_dog.","SELECT date_reg_dog FROM dog_reg
 WHERE (date_reg_dog BETWEEN '2017-08-01' AND '2020-02-07'
 OR date_reg_dog < '2012-06-01')
 AND status_part = 'Take part';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",5,2,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0
177,"Вывести без повторений все породы собак, кроме ""Zwergpinscher"" и ""Pharaon hound"", которым последний раз были сделаны прививки с ""2017-01-01"" по ""2018-01-01"". В запросе использовать BETWEEN. Формат вывода: breed.","SELECT DISTINCT breed
 FROM dog
 WHERE NOT (
 breed = 'Zwergpinscher'
 OR breed = 'Pharaon hound'
 )
 AND date_last_vac BETWEEN '2017-01-01' AND '2018-01-01';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",5,3,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0
178,"Вывести наименования спонсоров и номера контрактов о спонсировании выставок, подписанных ими, где в номере контракта имеется подстрока ""WF"", но не имеется подстроки ""35"". Формат вывода: name_spnr, num_cont.","SELECT
name_spnr
, num_cont
 FROM sponsor, sponsorship
 WHERE sponsor.id_spnr = sponsorship.id_spnr
 AND num_cont LIKE '%WF%'
 AND NOT num_cont LIKE '%35%';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",5,3,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
179,"Вывести имена, номера телефонов, и паспортов владельцев, при условии, что номер телефона начинается с ""8-7"" - ""8-9"", или серия паспорта не меньше ""18 20"". Формат вывода: name_own, phone_own, passport_own.","SELECT
name_own
, phone_own
, passport_own
 FROM owner
 WHERE phone_own LIKE '8-7%' OR phone_own LIKE '8-8%' OR phone_own LIKE '8-9%'
 OR passport_own >= '18 20%'
 ORDER BY phone_own;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",5,3,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0
180,"Вывести имена хозяев, начинающиеся на букву ""D"", клички, породы и номера документов о рождении их собак, при условии, что номер документа содержит подстроку ""97"" или начинается с буквы ""S"". Формат вывода: name_own, name_dog, breed, num_birth_doc.","SELECT
name_own
, name_dog
, breed
, num_birth_doc
 FROM owner, dog
 WHERE owner.id_own = dog.id_own
 AND name_own LIKE 'D%'
 AND (num_birth_doc LIKE 'S%'
 OR num_birth_doc LIKE '%97%');
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",5,3,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
181,"Вывести наименования клубов с адресами электронных почт ""pgv50@mail.ru"" или ""ssii27@mail.ru"" и имена закреплённых за ними экспертов, начинающиеся на букву от ""J"" до ""S"" или заканчивающиеся на ""d"". Формат вывода: name_exp, name_club.","SELECT
name_exp
, name_club
 FROM club, expert
 WHERE expert.id_club = club.id_club
 AND email_club = 'pgv50@mail.ru' OR email_club = 'ssii27@mail.ru'
 AND (name_exp BETWEEN 'J%' AND 'S%'
 OR name_exp LIKE '%d');
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",5,3,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
182,"Вывести уникальные клички собак, начинающиеся на букву от ""S"" до ""Z"". Результаты упорядочить в алфавитном порядке. Формат вывода: name_dog.","SELECT DISTINCT name_dog
 FROM dog
 WHERE name_dog BETWEEN 'S%' AND 'Z%'
 ORDER BY name_dog ASC;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",5,2,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0
183,"Вывести клички собак и имена экспертов, наименования клубов, за которыми они одновременно закреплены, при условии, что наименование клуба начинается на букву от ""B"" до ""K"", или имя эксперта начинается на ""R"". Формат вывода: name_dog, name_club, name_exp.","SELECT
name_dog
, name_club
, name_exp
 FROM dog, club, expert
 WHERE dog.id_club = club.id_club
 AND club.id_club = expert.id_club
 AND (name_club BETWEEN 'B%' AND 'K%'
 OR name_exp LIKE 'R%');
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",5,3,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
184,"Вывести имена владельцев, клички их собак и наименования клубов, за котрыми эти собаки закреплены, а также средние баллы, полученные этими собаками на выставках, при условии, что регистрация на участие в выставках происходила не ранее, чем в 2018 году, а оценивание собаки проводилось экспертом, имя которого начинается с буквы ""J"". Для выделения года из даты можно воспользоваться функцией YEAR(<date>). Формат вывода: name_own, name_club, name_dog, avg_grade.","SELECT DISTINCT
name_own
, name_club
, name_dog
, (COALESCE(grade_1, 0) + COALESCE(grade_2, 0) + COALESCE(grade_3, 0)) / 3
 AS avg_grade
 FROM owner, dog, club, dog_reg, evaluation, expert_reg, expert
 WHERE owner.id_own = dog.id_own
 AND club.id_club = dog.id_club
 AND dog_reg.id_dog = dog.id_dog
 AND evaluation.id_dog_reg = dog_reg.id_dog_reg
 AND evaluation.id_exp_reg = expert_reg.id_exp_reg
 AND expert_reg.id_exp = expert.id_exp
 AND YEAR(date_reg_dog) >= 2018
 AND name_exp LIKE ""J%"";
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",5,5,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
185,"Вывести имена владельцев, клички их собак и наименования клубов, за котрыми эти собаки закреплены, а также баллы, полученные этими собаками на выставках, при условии, что регистрация на участие в выставках происходила не ренее, чем в 2018 году, а оценивание собаки проводилось экспертом, имя которого начинается с буквы ""J"". Для выделения года из даты можно воспользоваться функцией YEAR(<date>). Формат вывода: name_own, name_club, name_dog, grade_1, grade_2, grade_3.","SELECT DISTINCT
name_own
, name_club
, name_dog
, COALESCE(grade_1, 0) AS grade_1
, COALESCE(grade_2, 0) AS grade_2
, COALESCE(grade_3, 0) AS grade_3
FROM owner, dog, club, dog_reg, evaluation, expert_reg, expert
 WHERE owner.id_own = dog.id_own
 AND club.id_club = dog.id_club
 AND dog_reg.id_dog = dog.id_dog
 AND evaluation.id_dog_reg = dog_reg.id_dog_reg
 AND evaluation.id_exp_reg = expert_reg.id_exp_reg
 AND expert_reg.id_exp = expert.id_exp
 AND YEAR(date_reg_dog) >= 2018
 AND name_exp LIKE ""J%"";
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",5,5,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
186,"Вывести имена владельцев собак, а также клички и породы эти собак, их результаты оценивания на выставках, имена экспертов, оценивающих этих собак на выстаках, при условии, что имя эксперта начинается на ""J"", а наименование породы собаки начинается на букву с ""B"" по ""S"". Формат вывода: name_own, name_dog, breed, name_exp, grade_1, grade_2, grade_3.","SELECT
name_own
, name_dog
, dog.breed
, name_exp
 , grade_1
, grade_2
, grade_3
 FROM expert, expert_reg, evaluation, schedule, dog_reg, dog, owner
 WHERE expert.id_exp = expert_reg.id_exp
 AND expert_reg.id_exp_reg = evaluation.id_exp_reg
 AND evaluation.id_sch = schedule.id_sch
 AND evaluation.id_dog_reg = dog_reg.id_dog_reg
 AND dog_reg.id_dog = dog.id_dog
 AND dog.id_own = owner.id_own
 AND name_exp LIKE 'J%'
 AND schedule.breed BETWEEN 'B%' AND 'S%';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",5,5,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
187,Посчитать количество всех собак. Формат вывода: <количество>.,"SELECT COUNT(*) FROM dog;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",6,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
188,"Вывести средний возраст всех собак в приблизительном пересчёте на человеческий (коэффициент равен 5.25). Среднее необходимо округлить до целого, воспользовавшись функцией ROUND(<значение>). Формат вывода: avg_age.","SELECT ROUND(AVG(age) * 5.25) AS avg_age
 FROM dog;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",6,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
189,"Вывести суммарный возраст собак породы ""Pharaon hound"". Формат вывода: <сумма>.","SELECT SUM(age)
 FROM dog
 WHERE breed = 'Pharaon hound';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",6,2,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0
190,"Посчитать минимальный, максимальный и средний возраст всех собак по породе ""Zwergpinscher"". Формат вывода: <минимальный>, <максимальный>, <средний>.","SELECT
MIN(age)
, MAX(age)
, AVG(age)
 FROM dog
 WHERE breed = 'Zwergpinscher';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",6,2,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0
191,"Посчитать суммарный балл по каждой из трёх оценок, полученных всеми участниками на всех выставках за прохождение упражнений. Формат вывода: <сумма_1>, <сумма_2>, <сумма_3>.","SELECT
SUM(grade_1)
, SUM(grade_2)
, SUM(grade_3)
 FROM evaluation;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",6,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
192,"Посчитать среднее количество оценённых собак, приходящееся на одного эксперта на всех выставках. Среднее необходимо округлить до десятых, воспользовавшись функцией ROUND(<значение>, <точночть>). Формат вывода: <среднее>.","SELECT ROUND(COUNT(*) / COUNT(DISTINCT id_exp), 1)
 AS cnt
 FROM evaluation, expert_reg
 WHERE evaluation.id_exp_reg = expert_reg.id_exp_reg;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",6,2,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0
193,"Посчитать среднее количество расписаний, приходящееся на одну проводимую выставку (cnt). Среднее необходимо округлить до целого, воспользовавшись функцией ROUND(<значение>). Формат вывода: cnt.","SELECT ROUND(COUNT(*) / COUNT(DISTINCT schedule.id_exh))
 AS cnt
 FROM schedule, exhibition
 WHERE schedule.id_exh = exhibition.id_exh;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",6,2,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0
194,"Вывести количество участвующих экспертов (статус судейства равен ""Take part"") на выставках, спонсируемых организацией с наименоваием ""Lemurrr"". Формат вывода: <количество>.","SELECT COUNT(*)
 FROM expert, expert_reg, exhibition, sponsorship, sponsor
 WHERE expert_reg.id_exp = expert.id_exp
 AND expert_reg.id_exh = exhibition.id_exh
 AND exhibition.id_exh = sponsorship.id_exh
 AND sponsor.id_spnr = sponsorship.id_spnr
 AND sponsor.name_spnr = 'Lemurrr'
 AND status_ref = 'Take part';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",6,3,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0
195,"Вывести средний возраст собак классности ""Show"" и пород, наименования которых начинается с ""Ca"". Средний возраст необходимо округлить до десятых, воспользовавшись функцией ROUND(<значение>, <точность>). Формат вывода: <среднее>.","SELECT ROUND(AVG(age), 1)
 FROM dog
 WHERE class_dog = 'Show'
 AND breed LIKE 'Ca%';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",6,2,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0
196,"Посчитать средние баллы по каждой из трёх оценок, полученных всеми участниками на всех выставках за прохождение упражнений. Средние баллы необходимо округлить до сотых, воспользовавшись функцией ROUND(<значение>, <точночть>). Формат вывода: <среднее_1>, <среднее_2>, <среднее_3>.","SELECT
ROUND(AVG(grade_1), 2)
, ROUND(AVG(grade_2), 2)
, ROUND(AVG(grade_3), 2)
 FROM evaluation;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",6,2,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
197,"Посчитать среднее количество собак, приходящееся на одного владельца (cnt_by_own). Среднее необходимо округлить до целого, воспользовавшись функцией ROUND(<значение>) Формат вывода: cnt_by_own.","SELECT ROUND(COUNT(*) / COUNT(DISTINCT owner.id_own))
 AS cnt_by_own
 FROM owner, dog
 WHERE owner.id_own = dog.id_own;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",6,2,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0
198,"Посчитать одно усреднённое значение по средним трём баллам, полученным каждым участником за прохождение трёх упражнений на выставке ""Evrazia 2020"". Среднее значение необходимо округлить до тысячных, воспользовавшись функцией ROUND(<значение>, <точночть>). Формат вывода: avg_grade.","SELECT ROUND((AVG(grade_1) + AVG(grade_2) + AVG(grade_3)) / 3, 3)
 AS avg_grade
 FROM evaluation, dog_reg, exhibition
 WHERE evaluation.id_dog_reg = dog_reg.id_dog_reg
 AND dog_reg.id_exh = exhibition.id_exh
 AND name_exh = 'Evrazia 2020';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",6,4,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0
199,"Вывести количество участников, отстранённых от участия на всех выставках (статус - ""Suspended""), сроки проведения которых как-либо попадают в период с ""2017-08-12 00:00:00"" по ""2019-10-01 23:59:59"". Формат вывода: <количество>.","SELECT COUNT(DISTINCT dog_reg.id_dog)
 FROM dog_reg, exhibition
 WHERE dog_reg.id_exh = exhibition.id_exh
 AND status_part = 'Suspended'
 AND ((date_beg BETWEEN '2017-08-12 00:00:00'
 AND '2019-10-01 23:59:59')
 OR (date_end BETWEEN '2017-08-12 00:00:00'
 AND '2019-10-01 23:59:59')
 OR (date_beg <= '2017-08-12 00:00:00'
 AND date_end >= '2019-10-01 23:59:59'));
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",6,4,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0
200,"Вывести наименьший суммарный балл, полученный собакой по кличке ""Big Boss"" при участии в выставках за прохождение трёх упражнений. Учесть, что не все оценки могут быть выставлены и воспользоваться функцией IFNULL(<проверяемое_значение>, <получаемое_значение>) для приведения таких оценок к 0. Формат вывода: min_result.","SELECT MIN(COALESCE(grade_1, 0) + COALESCE(grade_2, 0) + COALESCE(grade_3, 0))
 AS min_result
 FROM dog, dog_reg, exhibition, evaluation
 WHERE dog.id_dog = dog_reg.id_dog
 AND dog_reg.id_exh = exhibition.id_exh
 AND dog_reg.id_dog_reg = evaluation.id_dog_reg
 AND name_dog = 'Big Boss';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",6,4,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0
201,"Посчитать общий средний балл по всем экспертам, полученным каждым участником за прохождение трёх упражнений на выставке ""Evrazia 2020"" (avg_grade). Среднее значение необходимо округлить до тысячных, воспользовавшись функцией ROUND(<значение>, <точночть>). Формат вывода: avg_grade.","SELECT ROUND((SUM(grade_1) + SUM(grade_2) + SUM(grade_3)) / (3 * COUNT(*)), 3)
 AS avg_grade
 FROM evaluation, dog_reg, exhibition
 WHERE evaluation.id_dog_reg = dog_reg.id_dog_reg
 AND dog_reg.id_exh = exhibition.id_exh
 AND name_exh = 'Evrazia 2020';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",6,4,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0
202,"Вывести в два столбца общее количество участников, допущенных (статус участия отличен от ""Not allowed"") и, наоборот, недопущенных (статус участия равен ""Not allowed"") к выставке. В запросе использовать подзапрос. Формат вывода: <количество_допущеных>, <количество_недопущенных>.","SELECT
COUNT(DISTINCT allowed.id)
, COUNT(DISTINCT not_allowed.id)
 FROM
 (SELECT dog_reg.id_dog_reg AS id
 FROM dog_reg
 WHERE status_part <> 'Not allowed') AS allowed
 , (SELECT dog_reg.id_dog_reg AS id
 FROM dog_reg
 WHERE status_part = 'Not allowed') AS not_allowed;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",6,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0
203,"Для собак породы ""Zwergpinscher"" и экспертов, закреплённых с этими собаками за одними клубами и участвующих в совместных оцениваниях на выставках, вывести время наиболее позднего выступления по расписанию, на котором производилось подобное оценивание. Формат вывода: <наибольшее>.","SELECT MAX(time_perf)
 FROM schedule, evaluation, dog_reg, expert_reg, dog, expert
 WHERE schedule.id_sch = evaluation.id_sch
 AND evaluation.id_dog_reg = dog_reg.id_dog_reg
 AND evaluation.id_exp_reg = expert_reg.id_exp_reg
 AND dog_reg.id_dog = dog.id_dog
 AND expert_reg.id_exp = expert.id_exp
 AND dog.id_club = expert.id_club
 AND dog.breed = 'Zwergpinscher';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",6,3,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0
204,"Вывести идентификаторы выставок и количество расписаний для каждой из них. Формат вывода: id_exh, <количество>.","SELECT
id_exh
, COUNT(*)
 FROM schedule
 GROUP BY id_exh;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",7,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0
205,"Вывести количество собак по каждой породе. Формат вывода: breed, <количество>.","SELECT
breed
, COUNT(*)
 FROM dog
 GROUP BY breed;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",7,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0
206,"Вывести количество собак по каждой кличке. Формат вывода: name_dog, <количество>.","SELECT
name_dog
, COUNT(*)
 FROM dog
 GROUP BY name_dog;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",7,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0
207,"Вывести количество оцениваний, проведённое каждой конкретной парой участника выставки и судьи. Формат вывода: <количество>.","SELECT COUNT(*)
 FROM evaluation
 GROUP BY id_dog_reg, id_exp_reg;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",7,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0
208,"Вывести количество регистраций собак на выставках по датам. Для выделения только даты из значения, содержащего дату со временем, воспользоваться функцией DATE(<дата_и_время>). Формат вывода: date_reg, <количество>.","SELECT
DATE(date_reg_dog) AS date_reg
 , COUNT(*)
 FROM dog_reg
 GROUP BY date_reg;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",7,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0
209,"Для каждой собаки вывести её кличку, породу и колчество оплаченных (статус оплаты равен ""Paid"") счетов для участия в выставках. Формат вывода: name_dog, breed, <количество>.","SELECT
name_dog
, breed
, COUNT(*)
 FROM dog, dog_reg
 WHERE dog.id_dog = dog_reg.id_dog
 AND status_pay = 'Paid'
 GROUP BY dog.id_dog;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",7,2,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
210,"Для каждого судьи на выставке, имеющего идентификатор 1, вывести идентификаторы расписаний, по которым проводилось оценивание, и количество оцениваний по каждому такому расписанию. Формат вывода: num_ref, id_sch, <количество>.","SELECT
num_ref
, id_sch
, COUNT(*)
 FROM expert_reg, evaluation
 WHERE expert_reg.id_exp_reg = evaluation.id_exp_reg
 AND id_exh = 1
 GROUP BY expert_reg.id_exp_reg, id_sch;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",7,2,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
211,"Для каждого клуба вывести количество участников (статус участия равен ""Take part"" или ""Suspended"") на выставках. Формат вывода: name_club, <количество>.","SELECT
name_club
, COUNT(*)
 FROM club, dog, dog_reg
 WHERE club.id_club = dog.id_club
 AND dog.id_dog = dog_reg.id_dog
 AND (status_part = 'Take part'
 OR status_part = 'Suspended')
 GROUP BY club.id_club;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",7,3,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
212,"Вывести по каждому клубу количество зарегистрированных на выставках участников, не прошедших медосмотр (статус прхождения равен ""Not passed"") и не заплативших счёт (статус оплаты равен ""Not paid"") одновременно. Для группировки использовать id клуба. Формат вывода: name_club, <количество>.","SELECT
name_club
, COUNT(*)
 FROM dog, dog_reg, club
 WHERE dog_reg.id_dog = dog.id_dog AND club.id_club = dog.id_club
 AND status_med = 'Not passed' AND status_pay = 'Not paid'
 GROUP BY club.id_club;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",7,4,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
213,"Вывести общее количество регистраций (cnt_reg) и среднее количество дней до начала выставок, за которое происходила регистрация, для каждой собаки (avg_days). Для определения количества дней между двумя датами воспользоваться функцией DATEDIFF(<дата_с>, <дата_по>). Формат вывода: id_dog, <количество>, <среднее>.","SELECT
id_dog
, COUNT(*) AS cnt_reg
 , AVG(DATEDIFF(date_beg, date_reg_dog)) AS avg_days
 FROM dog_reg, exhibition
 WHERE dog_reg.id_exh = exhibition.id_exh
 GROUP BY id_dog;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",7,4,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0
214,"Вывести наименования выставок, породы и средний возраст среди собак классности ""Pet"", участвующих в этих выставках без происшествий (статус участия равен ""Take part""). Средний возраст необходимо округлить до десятых, воспользовавшись функцией ROUND(<значение>, <точночть>). Формат вывода: name_exh, breed, <среднее>.","SELECT
name_exh
, breed
, ROUND(AVG(age), 1)
 FROM exhibition, dog_reg, dog
 WHERE exhibition.id_exh = dog_reg.id_exh
 AND dog_reg.id_dog = dog.id_dog
 AND class_dog = 'Pet'
 AND status_part = 'Take part'
 GROUP BY name_exh, breed;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",7,4,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
215,"Для каждой выставки вывести количество выставленной на ней оценок. Формат вывода: name_exh, <количество>.","SELECT
name_exh
, COUNT(grade_1) + COUNT(grade_2) + COUNT(grade_3)
 AS cnt
 FROM exhibition, schedule, evaluation
 WHERE exhibition.id_exh = schedule.id_exh
 AND schedule.id_sch = evaluation.id_sch
 GROUP BY exhibition.id_exh;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",7,3,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
216,"Для каждого клуба вывести количество экспертов, участвующих (статус судейства равен ""Take part"") от этих клубов в выстаках, спонсируемых организациями, наименования которых начинаются с буквы ""P"" (cnt_exps). Формат вывода: name_club, <количество>.","SELECT
name_club
, COUNT(expert.id_exp) AS cnt_exps
 FROM club, expert, expert_reg, sponsorship, sponsor
 WHERE club.id_club = expert.id_club
 AND expert.id_exp = expert_reg.id_exp
 AND expert_reg.id_exh = sponsorship.id_exh
 AND sponsorship.id_spnr = sponsor.id_spnr
 AND sponsor.name_spnr LIKE 'P%'
 AND status_ref = 'Take part'
 GROUP BY club.id_club;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",7,3,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
217,"Вывести количество участников (статус участия равен ""Take part"" или ""Suspended"") по каждой породе на всех выставках, сроки проведения которых как-либо попадают в период с ""2012-05-14"" по ""2019-10-01"" включительно. Формат вывода: name_exh, <количество>.","SELECT
breed
, COUNT(*)
 FROM dog, dog_reg, exhibition
 WHERE dog.id_dog = dog_reg.id_dog
 AND dog_reg.id_exh = exhibition.id_exh
 AND (status_part = 'Take part'
 OR status_part = 'Suspended')
 AND ((date_beg BETWEEN '2012-05-14'
 AND '2019-10-01')
 OR (date_end BETWEEN '2012-05-14'
 AND '2019-10-01')
 OR (date_beg <= '2012-05-14'
 AND date_end >= '2019-10-01'))
 GROUP BY breed;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",7,3,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
218,"Вывести имена экспертов и владельцев собак, а также количество оцениваний на выставках между ними. Результаты упорядочить по имени эксперта в адфавитном порядке. Формат вывода: name_exp, name_own, <количество>.","SELECT
name_exp
, name_own
, COUNT(*)
 FROM owner, dog, dog_reg, evaluation, expert_reg, expert
 WHERE owner.id_own = dog.id_own
 AND dog.id_dog = dog_reg.id_dog
 AND dog_reg.id_dog_reg = evaluation.id_dog_reg
 AND evaluation.id_exp_reg = expert_reg.id_exp_reg
 AND expert_reg.id_exp = expert.id_exp
 GROUP BY owner.id_own, expert.id_exp
 ORDER BY name_exp ASC;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",7,3,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
219,"Для каждого клуба вывести раздельно количество участвующих (статус участия равен ""Take part"" или ""Suspended"", статус судейства равен ""Take part"") от них на всех выставках собак и экспертов. Формат вывода: name_club, <количество_собак>, <количество_экспертов>.","SELECT
name_club
, cnt_dogs
, cnt_exps
 FROM club
 , (SELECT
id_club
, COUNT(*) AS cnt_dogs
 FROM dog, dog_reg
 WHERE dog.id_dog = dog_reg.id_dog
 AND (status_part = 'Take part'
 OR status_part = 'Suspended')
 GROUP BY id_club
 ) AS cnt_dog_by_club
 , (SELECT
id_club
, COUNT(*) AS cnt_exps
 FROM expert, expert_reg
 WHERE expert.id_exp = expert_reg.id_exp
 AND status_ref = 'Take part'
 GROUP BY id_club
 ) AS cnt_exp_by_club
 WHERE club.id_club = cnt_dog_by_club.id_club
 AND club.id_club = cnt_exp_by_club.id_club;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",7,5,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
220,"Вывести клички, встречаемые среди собак несколько раз. Формат вывода: name_dog.","SELECT name_dog
 FROM dog
 GROUP BY name_dog
 HAVING COUNT(name_dog) > 1;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",8,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0
221,"Для каждого спонсора вывести его идентификатор и количество спонсирований выставок (cnt_by_spnr), при условии, что их несколько. Формат вывода: id_spnr, cnt_by_spnr.","SELECT
id_spnr
, COUNT(*) AS cnt_by_spnr
 FROM sponsorship
 GROUP BY id_spnr
 HAVING cnt_by_spnr > 1;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",8,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0
222,"Вывести наименования клубов, за которыми закреплено менее 10 участников. Формат вывода: name_club, <количество>.","SELECT
name_club
, COUNT(*)
 FROM club, dog
 WHERE club.id_club = dog.id_club
 GROUP BY name_club
 HAVING COUNT(*) < 10;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",8,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0
223,"Для каждой собаки вывести её номер документа о рождении и количество оплаченных владельцем счетов для участия в выставках, при условии, что оплат было несколько. Формат вывода: num_birth_doc, <количество>.","SELECT
num_birth_doc
, COUNT(*) AS cnt_pays
 FROM dog, dog_reg
 WHERE dog.id_dog = dog_reg.id_dog
 AND status_pay = 'Paid'
 GROUP BY dog.id_dog
 HAVING cnt_pays > 1;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",8,3,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0
224,"Вывести идентификаторы и имена экспертов, количество участий для каждого из них, при условии, что эксперт участвовал (статус судейства равен ""Take part"") в выставках более 2 раз. Формат вывода: id_exp, name_exp, <количество>.","SELECT
expert.id_exp
, name_exp
, COUNT(*)
 AS cnt_ref
 FROM expert, expert_reg
 WHERE expert.id_exp = expert_reg.id_exp
 AND status_ref = 'Take part'
 GROUP BY expert.id_exp
 HAVING cnt_ref > 2;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",8,3,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0
225,"Вывести идентификаторы собак и экспертов, задействованных на выставках несколько раз в совместных оцениваниях. Формат вывода: id_dog, id_exp, <количество>.","SELECT
id_dog
, id_exp
, COUNT(*) AS cnt
 FROM dog_reg, evaluation, expert_reg
 WHERE dog_reg.id_dog_reg = evaluation.id_dog_reg
 AND evaluation.id_exp_reg = expert_reg.id_exp_reg
 GROUP BY id_dog, id_exp
 HAVING cnt > 1;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",8,2,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0
226,"Вывести количество записей об оценивании по номерам рингов, при условии, что это количество чётное. Для определения чётности в запросе воспользоваться функцией MOD(<проверяемое_значение>, 2). Формат вывода: name_exh, num_ring, <количество>.","SELECT
name_exh
, num_ring
, COUNT(*)
 AS cnt
 FROM exhibition, schedule, evaluation
 WHERE exhibition.id_exh = schedule.id_exh
 AND schedule.id_sch = evaluation.id_sch
 GROUP BY exhibition.id_exh, num_ring
 HAVING MOD(cnt, 2) = 0;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",8,3,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0
227,"Вывести средний возраст и количество зарегистрированных в выставках собак по породам (cnt), к которым принадлежат более 3 собак. Формат вывода: breed, <среднее>, <количество>.","SELECT
breed
, AVG(age)
, COUNT(DISTINCT dog.id_dog) AS cnt
 FROM dog, dog_reg
 WHERE dog_reg.id_dog = dog.id_dog
 GROUP BY breed
 HAVING cnt > 3;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",8,2,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0
228,"Для каждой выставки вывести её идентификатор и количество расписаний (cnt_sch) для участников по породе ""Zwergpinscher"", при условии, что таких расписаний на выставке от 2 до 5. Формат вывода: id_exh, <количество>.","SELECT
id_exh
, COUNT(*) AS cnt_sch
 FROM schedule
 WHERE breed = 'Zwergpinscher'
 GROUP BY id_exh
 HAVING cnt_sch BETWEEN 2 AND 5;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",8,3,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0
229,"Вывести породы собак, представленные единственным участником (статус участия равен ""Take part"" или ""Suspended"") на выставке с наименованием ""Evrazia 2020"". Формат вывода: breed.","SELECT breed
 FROM dog, dog_reg, exhibition
 WHERE dog.id_dog = dog_reg.id_dog
 AND dog_reg.id_exh = exhibition.id_exh
 AND (status_part = 'Take part'
 OR status_part = 'Suspended')
 AND name_exh = 'Evrazia 2020'
 GROUP BY breed
 HAVING COUNT(breed) = 1;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",8,4,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0
230,"Вывести наименования клубов, идентификаторы и клички закреплённых за ними собак, которые не проходили медосмотр более 1 раза или не оплачивали счёт для участия в выставках более 1 раза. Формат вывода: name_club, id_dog, name_dog, <количество>.","SELECT
name_club
, dog.id_dog
, name_dog
, COUNT(*)
 FROM dog, dog_reg, club
 WHERE dog_reg.id_dog = dog.id_dog
 AND club.id_club = dog.id_club
 AND (status_med = 'Not passed' OR status_pay = 'Not paid')
 GROUP BY dog.id_club, dog.id_dog
 HAVING COUNT(*) > 1;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",8,4,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0
231,"Вывести средний возраст и сумму набранных на выставках баллов за прохождение трёх упражнений по каждой породе собак, при условии, что этот балл превышает значение 30. Учесть, что не все оценки могут быть выставлены и воспользоваться функцией IFNULL(<проверяемое_значение>, <получаемое_значение>) для приведения таких оценок к 0. Формат вывода: breed, <среднее>, <сумма>.","SELECT
breed
, AVG(age)
 , SUM(COALESCE(grade_1, 0) + COALESCE(grade_2, 0) + COALESCE(grade_3, 0))
 AS total_grade
 FROM dog, dog_reg, evaluation
 WHERE dog.id_dog = dog_reg.id_dog
 AND dog_reg.id_dog_reg = evaluation.id_dog_reg
 GROUP BY breed
 HAVING total_grade > 30;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",8,5,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0
232,"Вывести наименования спонсоров и спонсируемых ими выставок, на которых присутствует по 4 судьи. Формат вывода: name_spnr, name_exh, <количество>.","SELECT
name_spnr
, name_exh
, COUNT(DISTINCT id_exp_reg)
 AS cnt
 FROM sponsor, sponsorship, exhibition, expert_reg
 WHERE sponsor.id_spnr = sponsorship.id_spnr
 AND sponsorship.id_exh = exhibition.id_exh
 AND exhibition.id_exh = expert_reg.id_exh
 AND status_ref = 'Take part'
 GROUP BY sponsor.id_spnr, exhibition.id_exh
 HAVING cnt = 4;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",8,4,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0
233,"По каждой выставке вывести количество выставленных на ней оценок за прохождение упражнений, при условии, что на каждое расписание выставки должно приходиться не менее 10 выставленных оценок, а общее количество подобных оценок на выставке не должно быть менее 20 единиц. Формат вывода: name_exh, <количество>.","SELECT
name_exh
, SUM(cnt) AS sum_cnt
 FROM exhibition, schedule
 , (SELECT
id_sch
, (COUNT(grade_1) + COUNT(grade_2) + COUNT(grade_3))
 AS cnt
 FROM evaluation
 GROUP BY id_sch
 HAVING cnt >= 10
 ) AS cnt_by_sch
 WHERE exhibition.id_exh = schedule.id_exh
 AND schedule.id_sch = cnt_by_sch.id_sch
 GROUP BY exhibition.id_exh
 HAVING sum_cnt >= 20;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",8,5,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0
234,"Вывести наименование единственной выставки, для которой присутствует расписание со временем выступления участников в 17 часов. Для выделения часа из даты в запросе можно воспользоваться функцией HOUR(<дата>). Формат вывода: name_exh.","SELECT name_exh
 FROM exhibition
 WHERE id_exh = (
 SELECT id_exh
 FROM schedule
 WHERE HOUR(time_perf) = 17
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",9,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0
235,"Вывести без повторений всевозможные статусы участия в выставках единственной собаки, кличка которой - ""Kyzya"". Формат вывода: status_part.","SELECT DISTINCT status_part
 FROM dog_reg
 WHERE id_dog = (
 SELECT id_dog
 FROM dog
 WHERE name_dog = 'Kyzya'
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",9,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0
236,"Вывести имена владельцев и клички их собак, при условии, что дата последней вакцинации этих собак является самой поздней среди всех остальных. Формат вывода: name_own, name_dog, dog.id_dog, date_last_vac.","SELECT
name_own
, name_dog
, dog.id_dog
, date_last_vac
 FROM dog, owner
 WHERE owner.id_own = dog.id_own
 AND date_last_vac
 = (SELECT MAX(date_last_vac)
 FROM dog);
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",9,1,1,1,1,1,0,1,0,0,1,0,0,0,0,0,0
237,"Вывести имя эксперта, закреплённого за тем же клубом, что и единственная собака породы ""Siberian husky"". Формат вывода: name_exp.","SELECT name_exp
 FROM expert
 WHERE id_club = (
 SELECT id_club
 FROM club
 WHERE id_club = (
 SELECT id_club
 FROM dog
 WHERE breed = 'Siberian husky'
 )
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",9,2,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0
238,"Вывести наименования спонсоров, заключивших договоры о спонсировании выставок самыми последними, и наименования этих выставок. Формат вывода: name_spnr, name_exh.","SELECT
name_spnr
, name_exh
 FROM sponsor, sponsorship, exhibition
 WHERE sponsor.id_spnr = sponsorship.id_spnr
 AND exhibition.id_exh = sponsorship.id_exh
 AND date_concl
 = (SELECT MAX(date_concl)
 FROM sponsorship);
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",9,2,1,1,1,1,0,1,0,0,1,0,0,0,0,0,0
239,"Вывести клички наиболее старых собак породы ""English setter"", чей возраст, однако, не превышает 11 лет. Формат вывода: name_dog, age.","SELECT
name_dog
, age
 FROM dog
 WHERE breed = 'English setter'
 AND age = (
 SELECT age
 FROM dog
 WHERE breed = ""English setter"" AND age < 11
 ORDER BY age DESC
 LIMIT 1
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",9,2,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0
240,"Вывести номера зарегистрированных участников выставки с наименованием ""Legenda kosmosa 2018"" и разницу оценки за первое упражнение для каждого участника этой выставки со средним баллом за это же упражнение на всех проведённых выставках. Учесть, что не все оценки могут быть выставлены и воспользоваться функцией IFNULL(<проверяемое_значение>, <получаемое_значение>) для приведения таких оценок к 0. Разницу необходимо округлить до десятых, воспользовавшись функцией ROUND(<значение>, <точночть>). Формат вывода: id_dog_reg, <разница>.","SELECT
dog_reg.id_dog_reg
 , ROUND(COALESCE((grade_1 - (SELECT AVG(grade_1) FROM evaluation)), 0), 1)
 AS avg_to_ind_grade_diff
 FROM evaluation, dog_reg
 WHERE evaluation.id_dog_reg = dog_reg.id_dog_reg
 AND id_exh = (
 SELECT id_exh
 FROM exhibition
 WHERE name_exh = 'Legenda kosmosa 2018'
 )
 ORDER BY dog_reg.id_dog_reg;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",9,4,1,1,1,1,0,1,0,0,1,0,0,0,0,0,0
241,"Вывести клички, породы и номера участников выставок собак, которые набрали максимальное среди остальных участников количество баллов по первому упражению на выставке с наименованием ""Pinscher defile"". Формат вывода: num_part, name_dog, breed, grade_1.","SELECT
num_part
, name_dog
, breed
, grade_1
 FROM dog, dog_reg, evaluation
 WHERE dog.id_dog = dog_reg.id_dog
 AND dog_reg.id_dog_reg = evaluation.id_dog_reg
 AND grade_1 = (
 SELECT grade_1
 FROM dog, dog_reg, evaluation
 WHERE dog.id_dog = dog_reg.id_dog
 AND dog_reg.id_dog_reg = evaluation.id_dog_reg
 ORDER BY grade_1 DESC LIMIT 1
 )
 AND id_exh = (
 SELECT id_exh
 FROM exhibition
 WHERE name_exh = 'Pinscher defile'
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",9,5,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0
242,"Вывести все даты регистрации собак на выставку, проводимую по адресу: ""Moscow, Krasnaya Presnya park"". Полученные результаты упорядочить в порядке возрастания даты. Формат вывода: date_reg_dog.","SELECT DISTINCT date_reg_dog
 FROM dog_reg
 WHERE id_exh = (
 SELECT id_exh
 FROM exhibition
 WHERE address_exh = 'Moscow, Krasnaya Presnya park'
 )
 ORDER BY date_reg_dog ASC;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",9,2,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0
243,"Вывести средний балл (найти среднее средних каждой оценки), полученный всеми участниками за прохождение упражнения по расписанию со временем выступления ""2020-02-15 17:00:00"". Среднее необходимо округлить до десятых, воспользовавшись функцией ROUND(<значение>, <точночть>). Формат вывода: <среднее>.","SELECT ROUND((AVG(grade_1) + AVG(grade_2) + AVG(grade_3)) / 3, 1)
 AS avg_grade
 FROM evaluation
 WHERE id_sch = (
 SELECT id_sch
 FROM schedule
 WHERE time_perf = '2020-02-15 17:00:00'
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",9,3,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0
244,"Вывести клички и породы собак, набиравших по итогам выставок максимальный среди остальных участников суммарный балл за три упражнения. Учесть, что не все оценки могут быть выставлены и воспользоваться функцией IFNULL(<проверяемое_значение>, <получаемое_значение>) для приведения таких оценок к 0.Формат вывода: name_dog, breed.","SELECT
name_dog
, breed
 FROM dog, dog_reg, evaluation
 WHERE dog.id_dog = dog_reg.id_dog
 AND dog_reg.id_dog_reg = evaluation.id_dog_reg
 AND COALESCE(grade_1, 0) + COALESCE(grade_2, 0) + COALESCE(grade_3, 0) = (
 SELECT grade_1 + grade_2 + grade_3 AS summ
 FROM dog, dog_reg, evaluation
 WHERE dog.id_dog = dog_reg.id_dog
 AND dog_reg.id_dog_reg = evaluation.id_dog_reg
 ORDER BY summ DESC LIMIT 1
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",9,4,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0
245,"Вывести имена экспертов, которые оценивали участников на выставках наибольшее количество раз. Выполнить с использованием HAVING и подзапроса. Формат вывода: name_exp, <количество>.","SELECT
name_exp
, COUNT(*) AS cnt
 FROM expert, expert_reg, evaluation
 WHERE expert_reg.id_exp = expert.id_exp
 AND expert_reg.id_exp_reg = evaluation.id_exp_reg
 GROUP BY expert.id_exp
 HAVING cnt = (
 SELECT COUNT(*) AS cnt_sub
 FROM expert_reg, evaluation
 WHERE expert_reg.id_exp_reg = evaluation.id_exp_reg
 GROUP BY id_exp
 ORDER BY cnt_sub DESC
 LIMIT 1
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",9,4,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0
246,"Вывести имена владельцев и клички их собак, при условии, что эти собаки не были допущены до участия в выставках (статус участия равен ""Not allowed"") наибольшее количество раз. Формат вывода: name_own, name_dog, <количество>.","SELECT
name_own
, name_dog
, COUNT(*)
 FROM dog, dog_reg, owner
 WHERE dog.id_dog = dog_reg.id_dog
 AND dog.id_own = owner.id_own
 AND status_part = 'Not allowed'
 GROUP BY dog.id_dog
 HAVING COUNT(*) = (
 SELECT COUNT(*)
 FROM dog, dog_reg
 WHERE dog.id_dog = dog_reg.id_dog
 AND status_part = 'Not allowed'
 GROUP BY dog.id_dog
 ORDER BY COUNT(*) DESC LIMIT 1
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",9,4,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0
247,"Вывести имена и номера телефонов владельцев всех зарегистрированных собак, отсутствующих на выставках по каким-либо причинам (статус участия отличен от ""Take part"" и ""Suspended"") наибольшее количество раз. Выполнить с использованием HAVING и подзапроса. Формат вывода: id_dog, name_own, phone_own.","SELECT
dog.id_dog
, name_own
, phone_own
 FROM owner, dog, dog_reg
 WHERE dog.id_dog = dog_reg.id_dog
 AND dog.id_own = owner.id_own
 AND status_part <> 'Take part' AND status_part <> 'Suspended'
 GROUP BY dog.id_dog
 HAVING COUNT(*) = (
 SELECT COUNT(*)
 FROM dog, dog_reg
 WHERE dog.id_dog = dog_reg.id_dog
 AND status_part <> 'Take part'
 AND status_part <> 'Suspended'
 GROUP BY dog.id_dog
 ORDER BY COUNT(*) DESC LIMIT 1
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",9,4,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0
248,"Вывести наименования выставок, в которых участвовало (статус судейства равен ""Take part"") наименьшее количество экспертов. Выполнить с использованием HAVING и подзапроса. Формат вывода: name_exh, <количество>.","SELECT
name_exh
, COUNT(*)
 FROM exhibition, expert, expert_reg
 WHERE exhibition.id_exh = expert_reg.id_exh
 AND expert_reg.id_exp = expert.id_exp
 AND status_ref = 'Take part'
 GROUP BY exhibition.id_exh
 HAVING COUNT(*) = (
 SELECT COUNT(*)
 FROM exhibition, expert, expert_reg
 WHERE exhibition.id_exh = expert_reg.id_exh
 AND expert_reg.id_exp = expert.id_exp
 AND status_ref = 'Take part'
 GROUP BY exhibition.id_exh
 ORDER BY COUNT(*) ASC
 LIMIT 1
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",9,4,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0
249,"Вывести идентификаторы и клички собак, получивших по итогам выставки с наименованием ""Petshop Days"" суммарный балл за прохождение трёх упражнений, уступающий максимальному такому баллу, полученному на этой же выставке, не более, чем на 3 единицы. Учесть, что не все оценки могут быть выставлены и воспользоваться функцией IFNULL(<проверяемое_значение>, <получаемое_значение>) для приведения таких оценок к 0. Формат вывода: id_dog, name_dog, <разница_с_максимальным>.","SELECT
dog.id_dog
, name_dog
 , ((SELECT MAX((COALESCE(grade_1, 0) + COALESCE(grade_2, 0) + COALESCE(grade_3, 0)) / 3)
 FROM evaluation, dog_reg
 WHERE evaluation.id_dog_reg = dog_reg.id_dog_reg
 AND id_exh = (
 SELECT id_exh
 FROM exhibition
 WHERE name_exh = 'Petshop Days'
 )
 ) - (COALESCE(grade_1, 0) + COALESCE(grade_2, 0) + COALESCE(grade_3, 0)) / 3) AS grade_diff
 FROM dog, dog_reg, evaluation, exhibition
 WHERE dog.id_dog = dog_reg.id_dog
 AND dog_reg.id_dog_reg = evaluation.id_dog_reg
 AND dog_reg.id_exh = exhibition.id_exh
 AND name_exh = 'Petshop Days'
 HAVING grade_diff > 0
 AND grade_diff <= 3;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",9,5,1,1,1,1,0,1,0,1,1,0,0,0,0,0,0
250,"Вывести без повторений все породы собак, кроме: ""Zwergpinscher"", ""Pharaon hound"", ""Welsh terrier"". Формат вывода: breed.","SELECT DISTINCT breed
 FROM dog
 WHERE breed NOT IN ('Zwergpinscher', 'Pharaon hound', 'Welsh terrier');
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",10,1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0
251,"Вывести адреса электронных почт экспертов, чьи телефонные номера не заданы или равны ""8-234-432-34-64"" или ""8-964-315-81-89"". Формат вывода: email_exp.","SELECT email_exp
 FROM expert
 WHERE phone_exp IN ('8-234-432-34-64', '8-964-315-81-89', null);
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",10,1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0
252,"Вывести клички собак, регистрировавшихся хотя бы на одной выставке. Формат вывода: name_dog.","SELECT name_dog FROM dog WHERE id_dog = ANY(
 SELECT id_dog FROM dog_reg);
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",10,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0
253,"Вывести имена экспертов с самой ранней датой регистрации на выставках. В запросе использовать предикат ALL. Формат вывода: name_exp, date_reg_exp.","SELECT
name_exp
, date_reg_exp
 FROM expert, expert_reg
 WHERE expert.id_exp = expert_reg.id_exp
 AND
 date_reg_exp <= ALL(
 SELECT date_reg_exp
 FROM expert_reg
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",10,3,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0
254,"Вывести имена хозяев, которым принадлежит хотя бы одна собака семейства пород ""terrier"". Формат вывода: name_own.","SELECT name_own
 FROM owner
 WHERE id_own = ANY(
 SELECT id_own
 FROM dog
 WHERE breed LIKE '%terrier%'
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",10,2,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0
255,"Вывести идентификаторы и породы собак, которые когда-либо не были допущены до выставок из-за непройденного медосмотра (статус прохождения равен ""Not passed""). Формат вывода: id_dog, breed.","SELECT
id_dog
, breed
 FROM dog
 WHERE id_dog = SOME(
 SELECT id_dog
 FROM dog_reg
 WHERE status_med = 'Not passed'
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",10,2,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0
256,"Вывести имена владельцев, идентификаторы собак которых заданы множеством: 3, 24, 8, 12, 77. Формат вывода: name_own.","SELECT name_own
 FROM owner
 WHERE id_own = ANY(
 SELECT id_own FROM dog
 WHERE id_dog IN (3, 24, 8, 12, 77)
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",10,2,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0
257,"Вывести клички и возраст собак, зарегистрированных на участие в выставках, при условии, что порода собаки входит в список: ""Schnauzer"", ""Russian wolfhound"", ""Border terrier"", а дата регистрации не приходится на период с ""2011-04-21"" по ""2013-01-21"". Формат вывода: name_dog, age.","SELECT
name_dog
, age
 FROM dog, dog_reg
 WHERE dog.id_dog = dog_reg.id_dog
 AND breed IN ('Schnauzer', 'Russian wolfhound', 'Border terrier')
 AND NOT date_reg_dog BETWEEN '2011-04-21' AND '2013-01-21';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",10,3,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0
258,"Вывести имена экспертов, участвующих (статус судейства равен ""Take part"") в выставках ""Chetyre lapy 2017"" или ""Pinscher defile"". Формат вывода: name_exp.","SELECT name_exp
 FROM expert
 WHERE id_exp = ANY(
 SELECT id_exp
 FROM expert_reg
 WHERE id_exh = ANY(
 SELECT id_exh
 FROM exhibition
 WHERE name_exh = 'Chetyre lapy 2017'
 OR name_exh = 'Pinscher defile'
 )
 AND status_ref = 'Take part'
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",10,4,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0
259,"Вывести баллы участников выставок, чьи клички уникальны среди других собак. Формат вывода: grade_1, grade_2, grade_3.","SELECT
grade_1
, grade_2
, grade_3
 FROM evaluation
 WHERE id_dog_reg = ANY(
 SELECT id_dog_reg
 FROM dog_reg
 WHERE id_dog = ANY(
 SELECT id_dog
 FROM dog
 WHERE name_dog = ANY(
 SELECT name_dog
 FROM (
 SELECT
name_dog
, COUNT(*) AS cnt
 FROM dog
 GROUP BY name_dog
 HAVING cnt = 1
 ) AS cnt_by_name
 )
 )
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",10,4,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0
260,"Вывести имена хозяев и клички их собак, при условии, что эти собаки регистрировались в выставках, договора о спонсировании которых были подписаны в период с ""2019-01-01"" по ""2020-01-07"", и что эти собаки старше самой старой собаки семейства пород ""setter"". Формат вывода: name_own, name_dog, age.","SELECT DISTINCT
name_own
, name_dog
, age
 FROM owner, dog, dog_reg, exhibition, sponsorship
 WHERE dog.id_dog = dog_reg.id_dog
 AND dog_reg.id_exh = exhibition.id_exh
 AND sponsorship.id_exh = exhibition.id_exh
 AND owner.id_own = dog.id_own
 AND date_concl BETWEEN '2019-01-01' AND '2020-01-07'
 AND age >= ALL(
 SELECT age
 FROM dog
 WHERE breed LIKE '%setter%'
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",10,5,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0
261,"Вывести имена экспертов с наибольшим количеством участий (статус судейства равен ""Take part"") в выставках. В запросе использовать предикат ALL. Формат вывода: name_exp.","SELECT name_exp
 FROM expert
 WHERE id_exp = ANY(
 SELECT id_exp FROM (
 SELECT
id_exp
, COUNT(*) AS cnt_1
 FROM expert_reg
 WHERE status_ref = 'Take part'
 GROUP BY id_exp
 ) AS cnt_by_exh_1
 WHERE cnt_by_exh_1.cnt_1 >= ALL(
 SELECT cnt_2 FROM (
 SELECT
id_exp
, COUNT(*) AS cnt_2
 FROM expert_reg
 WHERE status_ref = 'Take part'
 GROUP BY id_exp
 ) AS cnt_by_exh_2
 )
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",10,5,1,1,0,0,0,1,1,0,1,1,0,0,0,0,0
262,"Определить, сколькими клубами представлена каждая порода на выставке с наименованием ""Petshop Days"". Формат вывода: breed, <количество>.","SELECT
breed
, COUNT(DISTINCT id_club)
 FROM dog
 WHERE id_dog = ANY(
 SELECT DISTINCT id_dog
 FROM dog_reg
 WHERE status_part = 'Take part'
 AND id_exh = ANY(
 SELECT id_exh FROM exhibition
 WHERE name_exh = 'Petshop Days'
 )
 )
 GROUP BY breed;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",10,5,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0
263,"Вывести среднее по всем рингам количество оцениваний, проведённых на выстаке с наименованием 'Chetyre lapy 2017'. Формат вывода: <среднее>.","SELECT (COUNT(grade_1) + COUNT(grade_2) + COUNT(grade_3))
 / (SELECT COUNT(DISTINCT num_ring)
 FROM schedule
 WHERE id_exh = ANY(
 SELECT id_exh
 FROM exhibition
 WHERE name_exh = 'Chetyre lapy 2017'
 )) AS avg_eval_traffic
 FROM evaluation
 WHERE id_sch = ANY(
 SELECT id_sch
 FROM schedule
 WHERE id_exh = ANY(
 SELECT id_exh
 FROM exhibition
 WHERE name_exh = 'Chetyre lapy 2017'
 )
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",10,5,1,1,0,0,0,1,0,0,1,1,0,0,0,0,0
264,"Вывести имена и номера паспортов владельцев, чьи собаки участовали в выставках без происшествий (статус участия равен ""Take part""), договора о спонсировании которых подписаны после ""2018-01-01"", наименования спонсоров которых заканчивается буквой ""a"", при этом номера документов о рождении собак не должны содержать подстроку ""NY"". Формат вывода: name_own, passport_own.","SELECT
name_own
, passport_own
 FROM owner
 WHERE id_own = ANY(
 SELECT id_own
 FROM dog
 WHERE NOT num_birth_doc LIKE '%NY%'
 AND id_dog = ANY(
 SELECT id_dog
 FROM dog_reg
 WHERE status_part = 'Take part'
 AND id_exh = ANY(
 SELECT id_exh
 FROM sponsorship
 WHERE date_concl > '2018-01-01'
 AND id_spnr = ANY(
 SELECT id_spnr
 FROM sponsor
 WHERE name_spnr LIKE '%a'
 )
 )
 )
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",10,5,1,1,0,1,1,0,0,0,1,1,0,0,0,0,0
265,"Вывести имена владельцев и клички их собак. Формат вывода: name_own, name_dog.","SELECT
name_own
, name_dog
 FROM owner
 JOIN dog
 ON owner.id_own = dog.id_own;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",11,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0
266,"Вывести без повторений наименования выставок и породы, для которых существуют расписания на этих выставках. Учесть, что для монопородных выставок порода в расписании присутствует не один раз. Формат вывода: name_exh, breed.","SELECT DISTINCT
name_exh
, breed
 FROM exhibition
 JOIN schedule
 ON exhibition.id_exh = schedule.id_exh;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",11,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0
267,"Вывести клички, породы и номера, полученные собаками для участия в выставках, при условии, что эти собаки до участия в выставках допущены не были (статус участия равен ""Not allowed""). Формат вывода: name_dog, breed, num_part.","SELECT
name_dog
, breed
, num_part
 FROM dog
 JOIN dog_reg
 ON dog.id_dog = dog_reg.id_dog
 WHERE status_part = 'Not allowed';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",11,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0
268,"Вывести номера рингов на выставках и оценки, выставленные на этих рингах. Формат вывода: num_ring, grade_1, grade_2, grade_3.","SELECT
num_ring
, grade_1
, grade_2
, grade_3
 FROM schedule
 JOIN evaluation
 ON schedule.id_sch = evaluation.id_sch;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",11,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0
269,"Вывести наименования спонсоров и спонсируемых ими выставок. Формат вывода: name_spnr, name_exh.","SELECT
name_spnr
, name_exh
 FROM sponsor
 JOIN sponsorship
 ON sponsor.id_spnr = sponsorship.id_spnr
 JOIN exhibition
 ON sponsorship.id_exh = exhibition.id_exh;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",11,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0
270,"Вывести имена владельцев и количество принадлежащих им собак. Формат вывода: name_own, <количество>.","SELECT
name_own
, COUNT(*)
 FROM owner
 JOIN dog
 ON owner.id_own = dog.id_own
 GROUP BY owner.id_own;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",11,2,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0
271,"Вывести идентификаторы и клички собак, участвовавших в выставках, а также количество оплаченных счетов для участия в выставках (статус оплаты равен ""Paid"") для каждой такой собаки. Формат вывода: id_dog, name_dog, <количество>.","SELECT
dog.id_dog
, name_dog
, COUNT(*)
 FROM dog
 JOIN dog_reg
 ON dog.id_dog = dog_reg.id_dog
 WHERE status_pay = 'Paid'
 GROUP BY dog.id_dog;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",11,2,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0
272,"Для всех экспертов, участвующих в выставках, вывести их даты регистрации и номера судей на этих выставках, а также идентификаторы участников, оцениваемых этими экспертами и содержащих в себе цифру 7. Для определения вхождения цифры в идентификатор можно воспользоваться функцией CONVERT(<целочисленное>, char), переводящей целочисленное значение в строку. Формат вывода: num_ref, date_reg_exp, id_dog_reg.","SELECT
num_ref
, date_reg_exp
, id_dog_reg
 FROM expert_reg
 JOIN evaluation
 ON expert_reg.id_exp_reg = evaluation.id_exp_reg
 WHERE CONVERT(id_dog_reg, char) LIKE '%7%';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",11,2,1,1,1,0,1,0,0,0,0,0,1,0,0,0,0
273,"Вывести номера участников и судей, участвующих на выставках в одних оцениваниях. Результаты упорядочить по номеру участника в порядке возрастания. Формат вывода: num_part, num_ref.","SELECT
num_part
, num_ref
 FROM dog_reg
 JOIN evaluation
 ON dog_reg.id_dog_reg = evaluation.id_dog_reg
 JOIN expert_reg
 ON evaluation.id_exp_reg = expert_reg.id_exp_reg
 ORDER BY num_part ASC;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",11,2,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0
274,"Вывести номера телефонов экспертов и владельцев, чьи собаки закреплены за теми же клубами, что и эксперты. Формат вывода: name_club, phone_exp, phone_own.","SELECT
name_club
, phone_exp
, phone_own
 FROM owner
 JOIN dog
 ON owner.id_own = dog.id_own
 JOIN club
 ON dog.id_club = club.id_club
 JOIN expert
 ON club.id_club = expert.id_club
 AND dog.id_club = expert.id_club;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",11,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0
275,"Для всех выставок вывести номера судей на них и баллы за упражнения, выставленные судьями, при условии, что в каждой записи об оценивании выставлены все три оценки. Формат вывода: id_exh, num_ref, grade_1, grade_2, grade_3 .","SELECT
id_exh
, num_ref
, grade_1
, grade_2
, grade_3
 FROM expert_reg
 JOIN evaluation
 ON expert_reg.id_exp_reg = evaluation.id_exp_reg
 WHERE NOT (
 grade_1 IS null
 OR grade_2 IS null
 OR grade_3 IS null
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",11,2,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0
276,"Для каждого эксперта вывести наименование клуба, в котором он состоит, и наименования выставок, в которых он участвует (статус судейства равен ""Take part""). Формат вывода: name_exp, name_club, name_exh.","SELECT
name_exp
, name_club
, name_exh
 FROM club
 JOIN expert
 ON club.id_club = expert.id_club
 JOIN expert_reg
 ON expert.id_exp = expert_reg.id_exp
 JOIN exhibition
 ON expert_reg.id_exh = exhibition.id_exh
 WHERE status_ref = 'Take part';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",11,2,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0
277,"Для всех выставок вывести номера зарегистрированных на участие в них собак и экспертов, закреплённых за одними клубами. Формат вывода: name_exh, num_part, num_ref, name_club.","SELECT
name_exh
, num_part
, num_ref
, name_club
 FROM exhibition
 JOIN dog_reg
 ON exhibition.id_exh = dog_reg.id_exh
 JOIN expert_reg
 ON exhibition.id_exh = expert_reg.id_exh
 JOIN dog
 ON dog_reg.id_dog = dog.id_dog
 JOIN expert
 ON expert_reg.id_exp = expert.id_exp
 JOIN club
 ON (dog.id_club = club.id_club
 AND expert.id_club = club.id_club);
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",11,4,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0
278,"Для владельцев собак вывести наименования клубов, за которыми их собаки закреплены, и номера участников этих собак на выставках, при условии, что при участии в выставках эти собаки набрали суммарный балл за все три упражнения меньше 10. Учесть, что не все оценки могут быть выставлены и воспользоваться функцией IFNULL(<проверяемое_значение>, <получаемое_значение>) для приведения таких оценок к 0.","SELECT
name_own
, name_club
, num_part
 FROM owner
 JOIN dog
 ON owner.id_own = dog.id_own
 JOIN club
 ON dog.id_club = club.id_club
 JOIN dog_reg
 ON dog.id_dog = dog_reg.id_dog
 WHERE id_dog_reg = ANY(
 SELECT id_dog_reg
 FROM evaluation
 WHERE (COALESCE(grade_1, 0) + COALESCE(grade_2, 0) + COALESCE(grade_3, 0)) < 10
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",11,5,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0
279,"Вывести для каждого участника выставки с наименованием ""Chetyre lapy 2017"" его номер участника выставки и суммарный балл за три упражнения. Результаты упорядочить по суммарному баллу в порядке убывания (ТОП-5). Учесть, что не все оценки могут быть выставлены и воспользоваться функцией IFNULL(<проверяемое_значение>, <получаемое_значение>) для приведения таких оценок к 0. В запросе использовать LIMIT. Формат вывода: num_part, <сумма>.","SELECT
num_part
, COALESCE(grade_1, 0) + COALESCE(grade_2, 0) + COALESCE(grade_3, 0)
 AS total_value
 FROM dog_reg
 JOIN evaluation
 ON dog_reg.id_dog_reg = evaluation.id_dog_reg
 WHERE id_exh = ANY(
 SELECT id_exh
 FROM exhibition
 WHERE name_exh = 'Chetyre lapy 2017'
 )
 ORDER BY total_value DESC
 LIMIT 5;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",11,5,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0
280,"Для всех клубов вывести имена экспертов, закреплённых за этими клубами, при условии, что имена экспертов начинаются с буквы ""J"". Учесть также клубы, для которых эксперты по условию найдены не будут. Формат вывода: name_club, name_exp.","SELECT
name_club
, name_exp
 FROM club
 LEFT JOIN expert
 ON (
 club.id_club = expert.id_club
 AND name_exp LIKE 'J%'
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",12,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0
281,"Для всех выставок вывести номера документов о спонсировании, подписанные не ранее ""2019-08-11"". Учесть также выставки, для которых спонсирования по условию найдены не будут. Формат вывода: name_exh, num_cont.","SELECT
name_exh
, num_cont
 FROM exhibition
 LEFT JOIN sponsorship
 ON (exhibition.id_exh = sponsorship.id_exh
 AND date_concl >= '2019-08-11');
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",12,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0
282,"Для каждой собаки вывести её идентификатор и кличку, а также все номера участников выставок, на участие в которых собака зарегистрирована. Учесть также собак, не регистрировавшихся на участие в выставках. Полученные результаты упорядочить по идентификатору собаки в порядке возрастания. Формат вывода: id_dog, name_dog, num_part.","SELECT
dog.id_dog
, name_dog
, num_part
 FROM dog
 LEFT JOIN dog_reg
 ON dog.id_dog = dog_reg.id_dog
 ORDER BY dog.id_dog;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",12,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0
283,"Для всех клубов вывести количество участников (статус участия равен ""Take part"" или ""Suspended"") на выставках. Учесть и посчитать также собак, не закрепленных за клубами. Формат вывода: name_club, <количество>.","SELECT
name_club
, COUNT(*)
 FROM club
 RIGHT JOIN dog
 ON club.id_club = dog.id_club
 JOIN dog_reg
 ON dog.id_dog = dog_reg.id_dog
 WHERE (status_part = 'Take part'
 OR status_part = 'Suspended')
 GROUP BY club.id_club;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",12,3,1,1,1,1,0,1,1,0,0,0,0,1,0,0,0
284,"Для всех собак вывести суммарное количество баллов, полученное ими на всех выставках. Учесть также собак, которые не участвуют в выставках. Формат вывода: name_dog, <сумма>.","SELECT
name_dog
, SUM(grade_1) + SUM(grade_2) + SUM(grade_3)
 AS summ
 FROM dog
 LEFT JOIN dog_reg
 ON dog.id_dog = dog_reg.id_dog
 LEFT JOIN evaluation
 ON dog_reg.id_dog_reg = evaluation.id_dog_reg
 GROUP BY dog.id_dog;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",12,3,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0
285,"Вывести для каждой собаки её кличку, наименование клуба, за которым она закреплена, наименование выставок, на участие в которых она зарегистрирована, номера участников на этих выставках. Учесть также собак, которые не зарегистрированы на выставках и/или не закреплены за клубами. Результаты упорядочить по кличке собаки в алфавитном порядке. Формат вывода: name_dog, name_club, name_exh, num_part.","SELECT
name_dog
, name_club
, name_exh
, num_part
 FROM dog
 LEFT JOIN dog_reg
 ON dog.id_dog = dog_reg.id_dog
 LEFT JOIN club
 ON dog.id_club = club.id_club LEFT JOIN exhibition ON dog_reg.id_exh = exhibition.id_exh ORDER BY name_dog;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",12,3,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0
286,"Вывести породу, время и количество записей об оценивании по каждому расписанию всех выставок. Учесть также расписания, по которым оцениваний не произведено. Формат вывода: breed, time_perf, <количество>.","SELECT
breed
, time_perf
, cnt
 FROM schedule
 LEFT JOIN (
 SELECT
id_sch
, COUNT(*) AS cnt
 FROM evaluation
 GROUP BY id_sch
 ) AS cnt_by_sch
 ON schedule.id_sch = cnt_by_sch.id_sch;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",12,3,1,1,1,0,0,1,1,0,1,0,0,1,0,0,0
287,"Для всех спонсоров вывести номера документов о спонсировании выставок, не содержащих в себе букву ""W"". Учесть также спонсоров, для которых номера по условию найдены не будут. Формат вывода: name_spnr, num_cont.","SELECT
name_spnr
, num_cont
 FROM sponsor
 LEFT JOIN (
 SELECT
id_spnr
, num_cont
 FROM sponsorship
 WHERE NOT num_cont LIKE '%W%'
 ) AS spnr_cont
 ON sponsor.id_spnr = spnr_cont.id_spnr;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",12,3,1,1,1,1,1,0,0,0,1,0,0,1,0,0,0
288,"Вывести идентификаторы и адреса электронных почт владельцев, количество регистраций их собак на выставках. Учесть также владельцев, чьи собаки не были зарегистрированы на выставках, воспользовавшись функцией IFNULL(<проверяемое_значение>, <получаемое_значение>) для приведения количества регистраций к 0. Формат вывода: id_own, email_own, <количество>.","SELECT
owner.id_own
, email_own
, COALESCE(cnt, 0)
 AS cnt_reg
 FROM owner
 LEFT JOIN dog
 ON owner.id_own = dog.id_dog
 LEFT JOIN (
 SELECT
id_dog
, COUNT(*) AS cnt
 FROM dog_reg
 GROUP BY id_dog
 ) AS cnt_by_dog
 ON dog.id_dog = cnt_by_dog.id_dog;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",12,4,1,1,1,0,0,1,1,0,1,0,0,1,0,0,0
289,"Вывести идентификаторы и клички собак, количество участий (статус участия равен ""Take part"" или ""Suspended"") для каждой из них. Учесть также собак, которые не участвуют в выставках, воспользовавшись функцией IFNULL(<проверяемое_значение>, <получаемое_значение>) для приведения количества их участий к 0. Формат вывода: id_dog, name_dog, <количество>.","SELECT
dog.id_dog
, name_dog
, COALESCE(cnt, 0)
 AS cnt_part
 FROM dog
 LEFT JOIN (
 SELECT
id_dog
, COUNT(*) AS cnt
 FROM dog_reg
 WHERE (status_part = 'Take part'
 OR status_part = 'Suspended')
 GROUP BY id_dog
 ) AS part_by_dog
 ON dog.id_dog = part_by_dog.id_dog
 GROUP BY dog.id_dog;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",12,4,1,1,1,1,0,1,1,0,1,0,0,1,0,0,0
290,"Для каждой собаки вывести имена и идентификаторы экспертов, оценивавших её на выставках (в одной записи). Учесть также собак, не участввавших в оцениваниях. Для конкатенации строковых значений можно воспользоваться функцией CONCAT(<строка>, <строка>). Для объединения множества значений в одну запись в запросе использовать функцию GROUP_CONCAT(<множество_значений>). Формат вывода: id_dog, <имя идентификатор,имя идентификатор...>.","SELECT
dog.id_dog
, GROUP_CONCAT(CONCAT(name_exp, ' ', expert.id_exp))
 AS experts
 FROM dog
 LEFT JOIN dog_reg
 ON dog.id_dog = dog_reg.id_dog
 LEFT JOIN evaluation
 ON dog_reg.id_dog_reg = evaluation.id_dog_reg
 LEFT JOIN expert_reg
 ON evaluation.id_exp_reg = expert_reg.id_exp_reg
 LEFT JOIN expert
 ON expert_reg.id_exp = expert.id_exp
 GROUP BY dog.id_dog;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",12,4,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0
291,"Для всех экспертов вывести адреса проведения выставок, в которых эксперты участвуют (статус судейства равен ""Take part""), при условии, что выставки проводятся в городе ""Moscow"". Учесть также экспертов, которые в подобных выставках не участвуют, воспользовавшись функцией IFNULL(<проверяемое_значение>, <получаемое_значение>) для приведения адреса к значению ""not in Moscow"". Формат вывода: id_exp, address_exh.","SELECT
id_exp
, COALESCE(address_exh, 'not in Moscow')
 AS address
 FROM expert_reg
 LEFT JOIN (
 SELECT
id_exh
, address_exh
 FROM exhibition
 WHERE address_exh LIKE '%Moscow%'
 ) AS moscow_exh
 ON expert_reg.id_exh = moscow_exh.id_exh
 WHERE status_ref = 'Take part';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",12,4,1,1,1,0,1,0,0,0,1,0,0,1,0,0,0
292,"Вывести имена владельцев и все наименования клубов (в одной записи), за которыми закреплены их собаки. Для объединения множества значений в одну запись в запросе использовать функцию GROUP_CONCAT(<множество_значений>). Учесть также владельцев, чьи собаки не закреплены за клубами, и воспользоваться функцией IFNULL(<проверяемое_значение>, <получаемое_значение>) для приведения множества наименований клубов к значению ""No club"". Формат вывода: name_own, <наименования>.","SELECT
name_own
, COALESCE(clubs, 'No club')
 AS owner_clubs
 FROM owner
 LEFT JOIN (
 SELECT
id_own
, GROUP_CONCAT(name_club)
 AS clubs
 FROM dog
 JOIN club
 ON dog.id_club = club.id_club
 GROUP BY dog.id_own
 ) AS owner_and_clubs
 ON owner.id_own = owner_and_clubs.id_own;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",12,4,1,1,1,0,0,0,1,0,1,0,0,1,0,0,0
293,"Для всех собак вывести суммарное количество баллов, набранное ими на всех выставках. Учесть собак, не участвующих в выставках, воспользовавшись функцией IFNULL(<проверяемое_значение>, <получаемое_значение>) для приведения суммарного балла к 0. Формат вывода: id_dog, name_dog, <сумма>.","SELECT
dog.id_dog
, name_dog
, COALESCE(SUM(COALESCE(e.grade_1, 0) + COALESCE(e.grade_2, 0) + COALESCE(e.grade_3, 0)), 0)
 AS sum_all_exh
 FROM dog
 LEFT JOIN dog_reg
 ON dog.id_dog = dog_reg.id_dog
 LEFT JOIN evaluation AS e
 ON dog_reg.id_dog_reg = e.id_dog_reg
 GROUP BY dog.id_dog;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",12,4,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0
294,"Для всех клубов вывести количество собак, зарегистрированных на выставках от этих клубов и не прошедших медосмотр, не заплативших счёт для участия в выставке одновременно. Учесть клубы, на которые не приходится ни одного зарегистрированного участника по условию, воспользовавшись функцией IFNULL(<проверяемое_значение>, <получаемое_значение>) для приведения количества регистраций к 0. Учесть и посчитать также собак, не закреплённых за клубами. Формат вывода: name_club, <количество>.","SELECT
name_club
, COALESCE(SUM(cnt), 0)
 AS cnt_by_club
 FROM club
 LEFT JOIN dog
 ON club.id_club = dog.id_club
 LEFT JOIN (
 SELECT
id_dog
, COUNT(*) AS cnt
 FROM dog_reg
 WHERE status_med = 'Not passed'
 AND status_pay = 'Not paid'
 GROUP BY id_dog
 ) AS cnt_by_dog
 ON dog.id_dog = cnt_by_dog.id_dog
 GROUP BY club.id_club;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",12,4,1,1,1,1,0,1,1,0,1,0,0,1,0,0,0
295,Вывести в один столбец все имена владельцев и клички собак. Формат вывода: <имя>.,"SELECT name_own AS name
 FROM owner
 UNION DISTINCT
 SELECT name_dog
 FROM dog;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",13,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
296,Вывести в один столбец имена владельцев и имена экспертов. Формат вывода: <имя>.,"SELECT name_own AS name
 FROM owner
 UNION DISTINCT
 SELECT name_exp
 FROM expert;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",13,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
297,Вывести в один столбец все наименования выставок и спонсоров. Формат вывода: <наименование>.,"SELECT name_exh AS name FROM exhibition
 UNION DISTINCT
 SELECT name_spnr FROM sponsor;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",13,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
298,"Вывести в два столбца имена и почты владельцев собак и экспертов. Формат вывода: <имя>, <почта>.","SELECT
name_own AS name
, email_own AS email
 FROM owner
 UNION DISTINCT
 SELECT
name_exp
, email_exp
 FROM expert;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",13,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
299,"Вывести одним столбцом количество собак, которым больше 13 или же меньше 4 лет, дополнив в отдельном столбце соответствующие записи поясняющим текстом: ""> 13"" или ""< 4"". Формат вывода: <количество>, <пояснение>.","SELECT
COUNT(*)
, '> 13' AS age
 FROM dog
 WHERE age > 13
 UNION DISTINCT
 SELECT
COUNT(*)
, '< 4'
 FROM dog
 WHERE age < 4;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",13,2,1,1,0,0,0,1,0,0,0,0,0,0,1,0,0
300,"Вывести в один столбец адреса электронных почт клубов и спонсоров, содержащих в себе букву ""a"". Формат вывода: <почта>.","SELECT email
 FROM (
 SELECT email_club AS email
 FROM club
 UNION DISTINCT
 SELECT email_spnr
 FROM sponsor
 ) AS email_union
 WHERE email LIKE '%a%';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",13,2,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0
301,"Вывести в два столбца количество совместно собак и экспертов по клубам. Формат вывода: id_club, <количество>.","SELECT
id_club
, COUNT(*)
 FROM (
 SELECT
id_dog
, id_club
 FROM dog
 UNION DISTINCT
 SELECT
id_exp
, id_club
 FROM expert
 ) AS club_union
 GROUP BY id_club;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",13,2,1,0,0,0,0,1,1,0,0,0,0,0,1,0,0
302,"Вывести в один столбец все наименования спонсоров и выставок, начинающиеся с буквы ""P"". Формат вывода: <наименование>.","SELECT name_spnr FROM sponsor
 WHERE name_spnr LIKE 'P%'
 UNION DISTINCT
 SELECT name_exh FROM exhibition
 WHERE name_exh LIKE 'P%';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",13,2,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0
303,"Вывести в два столбца клички собак, их даты прохождения медосмотра или же даты последней вакцинации за 2012, 2017 за 2019 года, дополнив в отдельном столбце соответствующие записи поясняющим текстом: ""med"" или же ""vac"". Для выделения года из даты можно воспользоваться функцией YEAR(<date>). Формат вывода: name_dog, <дата>, <пояснение>.","SELECT
name_dog
, date_med
, 'med' AS medicine
 FROM dog_reg, dog
 WHERE dog_reg.id_dog = dog.id_dog
 AND YEAR(date_med) IN (2012, 2017, 2019)
 UNION DISTINCT
 SELECT
name_dog
, date_last_vac
, 'vac'
 FROM dog
 WHERE YEAR(date_last_vac) IN (2012, 2017, 2019);
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",13,2,1,1,1,1,0,0,0,0,0,1,0,0,1,0,0
304,"Вывести в два столбца клички собак и имена экспертов, и даты их регистрации на ваставках, при условии, что дата регистрации находится в интервале от ""2018-08-10"" до ""2020-02-16"". Формат вывода: <имя>, <дата>.","SELECT
name
, date_reg
 FROM (
 SELECT
name_dog AS name
, date_reg_dog AS date_reg
 FROM dog
 JOIN dog_reg
 ON dog.id_dog = dog_reg.id_dog
 UNION DISTINCT
 SELECT
name_exp
, date_reg_exp
 FROM expert
 JOIN expert_reg
 ON expert.id_exp = expert_reg.id_exp
 ) AS reg_union
 WHERE date_reg BETWEEN '2018-08-10' AND '2020-02-16';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",13,3,1,1,1,1,1,0,0,0,0,0,1,0,1,0,0
305,"Вывести одним столбцом количество собак, проходивших или же не проходивших регистрацию на выставках, дополнив в отдельном столбце соответствующие записи поясняющим текстом: ""Registered"" или ""Not registered"". Формат вывода: <количество>, <пояснение>.","SELECT
COUNT(DISTINCT dog.id_dog)
, 'Registered' AS registration
 FROM owner, dog, dog_reg
 WHERE dog.id_dog = dog_reg.id_dog
 AND dog.id_own = owner.id_own
 UNION DISTINCT
 SELECT
COUNT(DISTINCT dog.id_dog)
, 'Not registered'
 FROM owner, dog
 WHERE dog.id_own = owner.id_own
 AND dog.id_dog NOT IN
 (SELECT id_dog
 FROM dog_reg);
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",13,3,1,1,1,1,0,1,0,0,1,1,0,0,1,0,0
306,"Вывести в один столбец все номера телефонов спонсоров, владельцев, экспертов и клубов, начинающиеся на ""8-812-"", в отдельном столбце вывести наименования всех тех, кому эти телефоны принадлежат. Полученные данные упорядочить по наименованиям в алфавитном порядке. Формат вывода: <наименование>, <телефон>.","SELECT
name
, phone
 FROM (
 SELECT
name_spnr AS name
, phone_spnr AS phone
 FROM sponsor
 UNION DISTINCT
 SELECT
name_own
, phone_own
 FROM owner
 UNION DISTINCT
 SELECT
name_exp
, phone_exp
 FROM expert
 UNION DISTINCT
 SELECT
name_club
, phone_club
 FROM club
 ORDER BY name ASC
 ) AS phones
 WHERE phone LIKE '8-812-%';
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",13,4,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0
307,"Вывести по клубам количество собак, участвующих (статус участия равен ""Take part"") в выставках ""Evrazia 2020"" или ""Legenda kosmosa 2018"" или же ""'Chetyre lapy 2017"" или ""Pinscher defile"", дополнив в отдельном столбце соответствующие записи поясняющим текстом: ""Evrazia_Legenda"" или же ""Lapy_Defile"". Формат вывода: name_club, <количество>, <пояснение>.","SELECT
name_club
, COUNT(DISTINCT dog.id_dog)
, 'Evrazia_Legenda' AS exhibitions
 FROM dog, club, dog_reg, exhibition
 WHERE dog.id_dog = dog_reg.id_dog
 AND club.id_club = dog.id_club
 AND exhibition.id_exh = dog_reg.id_exh
 AND (name_exh = 'Evrazia 2020' OR name_exh = 'Legenda kosmosa 2018')
 AND status_part = 'Take part'
 GROUP BY club.id_club
 UNION DISTINCT
 SELECT
name_club
, COUNT(DISTINCT dog.id_dog)
, 'Lapy_Defile'
 FROM dog, club, dog_reg, exhibition
 WHERE dog.id_dog = dog_reg.id_dog
 AND club.id_club = dog.id_club
 AND exhibition.id_exh = dog_reg.id_exh
 AND (name_exh = 'Chetyre lapy 2017' OR name_exh = 'Pinscher defile')
 AND status_part = 'Take part'
 GROUP BY club.id_club;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",13,5,1,1,1,1,0,1,1,0,0,0,0,0,1,0,0
308,"Вывести клички и породы собак, получивших минимальный или же максимальный среди других участников суммарный балл за 3 упражнения на выставках, дополнив в отдельном столбце соответствующие записи поясняющим текстом: ""min"" или же ""max"". Учесть, что не все оценки могут быть выставлены и воспользоваться функцией IFNULL(<проверяемое_значение>, <получаемое_значение>) для приведения таких оценок к 0. Формат вывода: name_dog, breed, <количество>, <пояснение>.","SELECT
name_dog
, breed
, COALESCE(grade_1, 0) + COALESCE(grade_2, 0) + COALESCE(grade_3, 0) AS grade
 , 'min' AS result
 FROM dog, dog_reg, evaluation
 WHERE dog.id_dog = dog_reg.id_dog
 AND dog_reg.id_dog_reg = evaluation.id_dog_reg
 AND COALESCE(grade_1, 0) + COALESCE(grade_2, 0) + COALESCE(grade_3, 0) = (
 SELECT COALESCE(grade_1, 0) + COALESCE(grade_2, 0) + COALESCE(grade_3, 0) AS summ
 FROM dog, dog_reg, evaluation
 WHERE dog.id_dog = dog_reg.id_dog
 AND dog_reg.id_dog_reg = evaluation.id_dog_reg
 ORDER BY summ ASC
 LIMIT 1
 )
 UNION DISTINCT
 SELECT
name_dog
, breed
, COALESCE(grade_1, 0) + COALESCE(grade_2, 0) + COALESCE(grade_3, 0)
, 'max'
 FROM dog, dog_reg, evaluation
 WHERE dog.id_dog = dog_reg.id_dog
 AND dog_reg.id_dog_reg = evaluation.id_dog_reg
 AND COALESCE(grade_1, 0) + COALESCE(grade_2, 0) + COALESCE(grade_3, 0) = (
 SELECT COALESCE(grade_1, 0) + COALESCE(grade_2, 0) + COALESCE(grade_3, 0) AS summ
 FROM dog, dog_reg, evaluation
 WHERE dog.id_dog = dog_reg.id_dog
 AND dog_reg.id_dog_reg = evaluation.id_dog_reg
 ORDER BY summ DESC LIMIT 1
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",13,5,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0
309,"Вывести в два столбца имена и адреса электронных почт экспертов и владельцев собак, при условии, что собаки этих владельцев входят в ТОП-10, а эксперты - в ТОП-3 по количеству участий без происшествий (статусы участия или судейства равны ""Take part"") в выставках, третьим столбцом вывести количество соотвествующих участий. В запросе использовать LIMIT. Формат вывода: <имя>, <почта>, <количество>.","(SELECT
name_exp AS name
, email_exp AS email
, COUNT(*) AS cnt
 FROM expert
 JOIN expert_reg
 ON expert.id_exp = expert_reg.id_exp
 WHERE status_ref = 'Take part'
 GROUP BY expert.id_exp
 ORDER BY cnt DESC
 LIMIT 3)
 UNION DISTINCT
 (SELECT
name_own
, email_own
, COUNT(*) AS cnt_2
 FROM owner
 JOIN dog
 ON owner.id_own = dog.id_own
 JOIN dog_reg
 ON dog.id_dog = dog_reg.id_dog
 WHERE status_part = 'Take part'
 GROUP BY owner.id_own, dog.id_dog
 ORDER BY cnt_2 DESC
 LIMIT 10);
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",13,5,1,1,1,0,0,1,1,0,0,0,1,0,1,0,0
310,"Вывести идентификаторы и клички собак, которые хоть раз регистрировались на участие в выставках. Формат вывода: id_dog, name_dog.","SELECT
id_dog
, name_dog
 FROM dog
 WHERE EXISTS (
 SELECT '1'
 FROM dog_reg
 WHERE dog.id_dog = dog_reg.id_dog
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",14,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0
311,"Вывести наименования выставок и даты их начала, при условии, что на них не было расписаний для породы ""Chow-chow"". Формат вывода: name_exh, date_beg.","SELECT
name_exh
, date_beg
 FROM exhibition
 WHERE NOT EXISTS (
 SELECT '1'
 FROM schedule
 WHERE exhibition.id_exh = schedule.id_exh
 AND breed = 'Chow-chow'
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",14,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0
312,"Вывести имена хозяев и клички их собак, зарегистрировавшихся на участие в выставках после ""2017-08-03"" и отстранённых на этих выставках (статус участия равен ""Suspended""). Формат вывода: name_own, name_dog.","SELECT
name_own
, name_dog
 FROM owner, dog
 WHERE owner.id_own = dog.id_own
 AND EXISTS (
 SELECT '1'
 FROM dog_reg
 WHERE dog.id_dog = dog_reg.id_dog
 AND date_reg_dog > '2017-08-03'
 AND status_part = 'Suspended'
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",14,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0
313,"Вывести наименования спонсоров, подписывавших договора о спонсировании выставок после ""2020-01-06"". Результаты упорядочить по наименованию спонсора в алфавитном порядке. Формат вывода: name_spnr.","SELECT name_spnr
 FROM sponsor
 WHERE EXISTS (
 SELECT '1'
 FROM sponsorship
 WHERE sponsor.id_spnr = sponsorship.id_spnr
 AND date_concl > '2020-01-06'
 )
 ORDER BY name_spnr ASC;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",14,2,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0
314,"Посчитать по клубам количество собак, когда либо регистрировавшизхся на выставках. Формат вывода: name_club, <количество>.","SELECT
name_club
, COUNT(*)
 FROM club
 JOIN dog
 ON club.id_club = dog.id_club
 WHERE EXISTS (
 SELECT '1'
 FROM dog_reg
 WHERE dog.id_dog = dog_reg.id_dog
 )
 GROUP BY club.id_club;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",14,2,1,1,1,0,0,1,1,0,0,0,1,0,0,1,0
315,"Вывести для каждой выставки номера судей и выставленные ими оценки, при условии, что оценивание проводилось по расписаниям, где время выступления участников находится во второй половине дня. Для выделения часа из даты в запросе можно воспользоваться функцией HOUR(<дата>). Формат вывода: id_exh, num_ref, grade_1, grade_2, grade_3.","SELECT
id_exh
, num_ref
, grade_1
, grade_2
, grade_3
 FROM expert_reg
 JOIN evaluation
 ON expert_reg.id_exp_reg = evaluation.id_exp_reg
 WHERE EXISTS (
 SELECT '1'
 FROM schedule
 WHERE evaluation.id_sch = schedule.id_sch
 AND HOUR(time_perf) >= 12
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",14,2,1,1,1,1,0,0,0,0,0,0,1,0,0,1,0
316,"Вывести имена владельцев и клички их собак, при условии, что эти собаки не закреплены за клубами с наименованиями ""GLORIYA"" или ""KENTAVR"". Формат вывода: name_own, name_dog.","SELECT
name_own
, name_dog
 FROM owner
 JOIN dog
 ON owner.id_own = dog.id_own
 WHERE NOT EXISTS (
 SELECT '1'
 FROM club
 WHERE dog.id_club = club.id_club
 AND name_club IN ('GLORIYA', 'KENTAVR')
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",14,3,1,1,1,1,0,0,0,0,0,1,1,0,0,1,0
317,"Вывести для каждого участника сумму баллов, полученных им на выставках, при условии, что оценивание проводилось не на рингах с номером 3. Учесть, что не все оценки могут быть выставлены и воспользоваться функцией IFNULL(<проверяемое_значение>, <получаемое_значение>) для приведения таких оценок к 0. Формат вывода: id_dog_reg, <сумма>.","SELECT
id_dog_reg
, (COALESCE(grade_1, 0) + COALESCE(grade_2, 0) + COALESCE(grade_3, 0))
 AS sum_grade
 FROM evaluation
 WHERE NOT EXISTS (
 SELECT '1'
 FROM schedule
 WHERE evaluation.id_sch = schedule.id_sch
 AND num_ring = 3
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",14,3,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0
318,"Вывести наименования клубов, за которыми не закреплены собаки хозяев с именем ""Dmitry"". Формат вывода: name_club.","SELECT name_club
 FROM club
 WHERE NOT EXISTS (
 SELECT '1'
 FROM dog
 WHERE club.id_club = dog.id_club
 AND EXISTS (
 SELECT '1'
 FROM owner
 WHERE dog.id_own = owner.id_own
 AND name_own = 'Dmitry'
 )
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",14,3,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0
319,"Вывести имена и адреса электронных почт экспертов, оценивавших породу ""Pharaon hound"". Формат вывода: name_exp, email_exp.","SELECT
name_exp
, email_exp
 FROM expert
 WHERE id_exp = ANY(
 SELECT id_exp
 FROM expert_reg
 WHERE expert.id_exp = expert_reg.id_exp
 AND EXISTS (
 SELECT *
 FROM evaluation
 WHERE expert_reg.id_exp_reg = evaluation.id_exp_reg
 AND EXISTS (
 SELECT *
 FROM schedule
 WHERE evaluation.id_sch = schedule.id_sch
 AND breed = 'Pharaon hound'
 )
 )
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",14,4,1,1,1,1,0,0,0,0,1,1,0,0,0,1,0
320,"Для каждой собаки вывести её кличку и все её номера участников на выставках (в одной записи), при условии, что собаки по итогам прохождения трёх упражнений на выставках получали все три оценки. Для объединения множества значений в одну запись в запросе использовать функцию GROUP_CONCAT(<множество_значений>). Формат вывода: name_dog, <номера_участников>.","SELECT
name_dog
, GROUP_CONCAT(num_part)
 AS numbers
 FROM dog
 JOIN dog_reg
 ON dog.id_dog = dog_reg.id_dog
 WHERE EXISTS (
 SELECT *
 FROM evaluation
 WHERE dog_reg.id_dog_reg = evaluation.id_dog_reg
 AND NOT (
 grade_1 IS null
 OR grade_2 IS null
 OR grade_3 IS null
 )
 )
 GROUP BY dog.id_dog;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",14,4,1,1,1,1,0,0,1,0,0,0,1,0,0,1,0
321,"Вывести номера контрактов о спонсировании и наименования выставок, в которых хотя бы один участник получил суммарный балл за три упражения, равный 30. Формат вывода: name_exh, num_cont.","SELECT
name_exh
, num_cont
 FROM exhibition
 JOIN sponsorship
 ON exhibition.id_exh = sponsorship.id_exh
 WHERE EXISTS (
 SELECT *
 FROM schedule
 WHERE exhibition.id_exh = schedule.id_exh
 AND EXISTS (
 SELECT *
 FROM evaluation
 WHERE schedule.id_sch = evaluation.id_sch
 AND grade_1 + grade_2 + grade_3 = 30
 )
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",14,4,1,1,1,1,0,0,0,0,0,0,1,0,0,1,0
322,"Вывести наименования спонсоров и выставок, которые они спонсируют, при условии, что на этих выставках участвовала хоть одна собака с идентификатором: 1, 11, 111, и с условием, что собаки получили баллы за все три упражнения. Формат вывода: name_spnr, name_exh.","SELECT
name_spnr
, name_exh
 FROM sponsor
 JOIN sponsorship
 ON sponsor.id_spnr = sponsorship.id_spnr
 JOIN exhibition
 ON sponsorship.id_exh = exhibition.id_exh
 WHERE EXISTS (
 SELECT *
 FROM dog_reg
 WHERE exhibition.id_exh = dog_reg.id_exh
 AND id_dog IN (1, 11, 111)
 AND EXISTS (
 SELECT *
 FROM evaluation
 WHERE dog_reg.id_dog_reg = evaluation.id_dog_reg
 AND NOT (
 grade_1 IS null
 OR grade_2 IS null
 OR grade_3 IS null
 )
 )
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",14,5,1,1,1,1,0,0,0,0,0,1,1,0,0,1,0
323,"Вывести имена и номера телефонов экспертов, закреплённых за клубом с наименованием ""KENTAVR"" и оценивавших породу ""Zwergpinscher"".","SELECT
name_exp
, phone_exp
 FROM expert
 WHERE EXISTS (
 SELECT *
 FROM expert_reg
 WHERE expert.id_exp = expert_reg.id_exp
 AND EXISTS (
 SELECT *
 FROM evaluation
 WHERE expert_reg.id_exp_reg = evaluation.id_exp_reg
 AND EXISTS (
 SELECT *
 FROM schedule
 WHERE evaluation.id_sch = schedule.id_sch
 AND breed = 'Zwergpinscher'
 )
 )
 )
 AND EXISTS (
 SELECT id_club
 FROM club
 WHERE club.id_club = expert.id_club
 AND name_club = 'KENTAVR'
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",14,5,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0
324,"Вывести имена владельцев, собаки которых при участии в выставках не получили оценку за первое упражнение или же получили за второе упражнение балл больше 5, но при этом оценка за третье упражнение получена не была. Результаты упорядочить в обратном алфавитном порядке. Формат вывода: name_own.","SELECT name_own
 FROM owner
 WHERE EXISTS (
 SELECT *
 FROM dog
 WHERE owner.id_own = dog.id_own
 AND EXISTS (
 SELECT *
 FROM dog_reg
 WHERE dog.id_dog = dog_reg.id_dog
 AND EXISTS (
 SELECT *
 FROM evaluation
 WHERE dog_reg.id_dog_reg = evaluation.id_dog_reg
 AND (grade_1 IS null
 OR grade_2 > 5)
 AND grade_3 IS null
 )
 )
 );
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",14,4,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0
325,"Вывести идентификаторы зарегистрированных на выставках собак и дополнительно в отдельном столбце поясняющий текст: ""ok"" или же ""not ok"" соответственно для случаев, когда участник реально участвовал (статус участия равен ""Take part"") или же был удалён и др. (статус участия иной). Формат вывода: id_dog_reg, <пояснение>.","SELECT
id_dog_reg
 , IF(status_part = 'Take part', 'ok', 'not ok') AS is_good
 FROM dog_reg;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",15,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1
326,"Для каждого эксперта вывести его контактные данные: в приоритете адрес электронной почты, однако, если он не указан, вывести номер телефона. Формат вывода: name_exp, <контактные_данные>.","SELECT
name_exp
 , IF(email_exp IS null, phone_exp, email_exp) AS contact
 FROM expert;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",15,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1
327,"Вывести имена владельцев, клички их собак, а также в отдельном столбце поясняющий текст: ""old"" или же ""young"" соответственно, если возраст собаки больше 12 лет или же меньше. Формат вывода: name_own, name_dog, <пояснение>.","SELECT
name_own
, name_dog
 , IF(age > 12, 'old', 'young')
 FROM owner
 JOIN dog
 ON owner.id_own = dog.id_own;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",15,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,1
328,"Для собак с нечётным идентификатором вывести имя матери, для собак с чётным - имя отца. Для определения чётности значения воспользоваться функцией MOD(<проверяемое_значение>, 2). Формат вывода: id_dog, <имя>.","SELECT
id_dog
, IF(MOD(id_dog, 2) = 0, name_father_dog, name_mother_dog)
 AS parent
 FROM dog;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",15,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1
329,"Вывести даты медосмотров собак для участия в выставках и дополнительно в отдельном столбце поясняющий текст: ""recent"" или же ""longtime"" соответственно, если медосмотр проводился не ранее 2019 года или же наоборот, ранее 2019 года. Для выделения года из даты в запросе можно воспользоваться функцией YEAR(<дата>). Формат вывода: date_med, <пояснение>.","SELECT
date_med
, IF(YEAR(date_med) >= 2019, 'recent', 'longtime') AS how_long
 FROM dog_reg;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",15,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1
330,"Вывести ""транслированные"" наименования спонсоров: ""Lemurrr""->""Лемур"", ""Filya""->""Филя"", остальные вывести без изменений. Формат вывода: <наименование>.","SELECT
 CASE
 WHEN name_spnr = 'Lemurrr'
 THEN 'Лемур'
 WHEN name_spnr = 'Filya'
 THEN 'Филя'
 ELSE name_spnr
 END AS name_sponsor
 FROM sponsor;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",15,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1
331,"Для каждой собаки вывести её дату последней прививки, имя и телефон её владельца, дополнительно в отдельном столбце вывести поясняющий текст: ""last"" или же ""---"", если дата медосмотра является самой недавней или же таковой не является соответственно. Формат вывода: name_id_dog, name_own, phone_own, date_last_vac, <пояснение>.","SELECT
id_dog
, name_own
, phone_own
, date_last_vac
 , IF(date_last_vac = (
 SELECT MAX(date_last_vac) AS max
 FROM dog
 ), 'last', '---'
 ) AS list
 FROM owner
 JOIN dog
 ON owner.id_own = dog.id_own;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",15,3,1,1,1,0,0,1,0,0,1,0,1,0,0,0,1
332,"Вывести в один столбец все клички собак и имена экспертов, в отдельном столбце добавить наименования клубов, за котрыми они закреплены. В записях с клубом ""DEVIL"" заменить наименование клуба на значение NULL. Формат вывода: <имя>, <клуб>.","SELECT
dog_and_exp_name
 , IF(club_name = 'DEVIL', NULL, club_name)
 FROM (
 SELECT
name_dog AS dog_and_exp_name
, name_club AS club_name
 FROM dog
 JOIN club
 ON dog.id_club = club.id_club
 UNION DISTINCT
 SELECT
name_exp
, name_club
 FROM expert
 JOIN club
 ON expert.id_club = club.id_club
 ) AS club_union;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",15,4,1,1,1,0,0,0,0,0,0,0,1,0,1,0,1
333,"Вывести для каждого спонсора его наименование, количество спонсируемых им выставок и дополнительно в отдельном столбце поясняющий текст: ""reliable"", ""twice"" или ""once"" в зависимости от количества спонсирований: более двух, два, одно. Формат вывода: name_spnr, <количество>, <пояснение>.","SELECT
name_spnr
, COUNT(*) AS cnt
 , CASE
 WHEN COUNT(*) > 2
 THEN 'reliable'
 WHEN COUNT(*) = 2
 THEN 'twice'
 ELSE 'once'
 END AS sponsorship_characteristic
 FROM sponsor
 JOIN sponsorship
 ON sponsor.id_spnr = sponsorship.id_spnr
 GROUP BY sponsor.id_spnr;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",15,3,1,1,1,0,0,1,1,0,0,0,1,0,0,0,1
334,"Для каждой выставки вывести информацию об имеющихся расписаниях: порода, время выступления, номер ринга. Время выступления должно быть указано в формате AM/PM, пример записи: ""2020-02-16 04:00:00 PM"". Для выделения часа из даты в запросе можно воспользоваться функцией HOUR(<дата>). Для вычитания целого количества временных единиц из даты можно воспользоваться функцией DATE_SUB(<дата>, INTERVAL <значение> <единица_измерения>). Для конкатенации строковых значений можно воспользоваться функцией CONCAT(<строка>, <строка>). Формат вывода: name_exh, breed, <время>, num_ring.","SELECT
name_exh
, breed
 , IF(
 HOUR(time_perf) > 12
 , CONCAT(DATE_SUB(time_perf, INTERVAL 12 HOUR), ' PM')
 , CONCAT(time_perf, ' AM')
 ) AS time
 , num_ring
 FROM exhibition
 JOIN schedule
 ON exhibition.id_exh = schedule.id_exh;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",15,4,1,1,1,0,0,0,0,0,0,0,1,0,0,0,1
335,"Для каждой выставки вывести номера рингов, количество выставленных на них оценок и дополнительно в отдельном столбце поясняющий текст: ""popular"" или же ""not popular"" соответственно, если количество таких оцениваний не менее 15 или же наоборот, менее 15. Формат вывода: id_exh, num_ring, <пояснение>.","SELECT
id_exh
, num_ring
, COUNT(grade_1) + COUNT(grade_2) + COUNT(grade_3)
 AS cnt
, IF(COUNT(grade_1) + COUNT(grade_2) + COUNT(grade_3) >= 15
 , 'popular'
 , 'not popular'
 ) AS popularity
 FROM evaluation
 JOIN schedule
 ON evaluation.id_sch = schedule.id_sch
 GROUP BY id_exh, num_ring;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",15,4,1,1,1,0,0,1,1,0,0,0,1,0,0,0,1
336,"Вывести кличку каждой собаки, количество регистраций на выставках для неё, и дополнительно в отдельном столбце поясняющий текст: ""never"", ""one"" или ""many"" в зависимости от числа регистраций. Формат вывода: name_dog, <количество>, <пояснение>.","SELECT
name_dog
, count_part
 , CASE
 WHEN count_part IS null
 THEN 'never'
 WHEN count_part = 1
 THEN 'one'
 WHEN count_part > 1
 THEN 'many'
 END AS quantity
 FROM dog
 LEFT JOIN (
 SELECT
id_dog
, COUNT(*) AS count_part
 FROM dog_reg
 GROUP BY id_dog
 ) AS cnt_by_dog
 ON dog.id_dog = cnt_by_dog.id_dog;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",15,3,1,1,1,0,0,1,1,0,1,0,0,1,0,0,1
337,"Для каждого эксперта вывести его имя, количесто оценённых им на выставках участников и дополнительно в отдельном столбце поясняющий текст: ""high"", ""low"" или ""normal"" (активность) соответственно в зависимости от числа оцениваний: не меньше 10, меньше 5, другое (между). Формат вывода: name_own, <количество>, <пояснение>.","SELECT
name_exp
, COUNT(*) AS cnt
 , CASE
 WHEN COUNT(*) >= 10
 THEN 'high'
 WHEN COUNT(*) < 5
 THEN 'low'
 ELSE 'normal'
 END AS activity
 FROM expert
 JOIN expert_reg
 ON expert.id_exp = expert_reg.id_exp
 JOIN evaluation
 ON expert_reg.id_exp_reg = evaluation.id_exp_reg
 GROUP BY expert.id_exp;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",15,3,1,1,1,0,0,1,1,0,0,0,1,0,0,0,1
338,"Вывести для каждой собаки её идентификатор, кличку, имя владельца, номер участника выставки, и дополнительно в отдельном столбце поясняющий текст: ""best"", ""worst"" или ""normal"" (результативность) соответственно в зависимости от суммарного балла за три упражнения, пройденных на выставке: максимальный среди других участников, минимальный среди других участников, другое (между). Учесть, что не все оценки могут быть выставлены и воспользоваться функцией IFNULL(<проверяемое_значение>, <получаемое_значение>) для приведения таких оценок к 0. Формат вывода: name_own, id_dog, name_dog, num_part, <пояснение>.","SELECT
name_own
, dog.id_dog
, name_dog
, num_part
 , CASE
 WHEN (COALESCE(grade_1, 0) + COALESCE(grade_2, 0) + COALESCE(grade_3, 0)) = (
 SELECT COALESCE(grade_1, 0) + COALESCE(grade_2, 0) + COALESCE(grade_3, 0)
 AS summ
 FROM evaluation
 ORDER BY summ DESC LIMIT 1
 )
 THEN 'best'
 WHEN (COALESCE(grade_1, 0) + COALESCE(grade_2, 0) + COALESCE(grade_3, 0)) = (
 SELECT COALESCE(grade_1, 0) + COALESCE(grade_2, 0) + COALESCE(grade_3, 0)
 AS summ
 FROM evaluation
 ORDER BY summ ASC LIMIT 1
 )
 THEN 'worst'
 ELSE 'normal'
 END AS result
 FROM owner
 JOIN dog
 ON owner.id_own = dog.id_own
 JOIN dog_reg
 ON dog.id_dog = dog_reg.id_dog
 JOIN evaluation
 ON dog_reg.id_dog_reg = evaluation.id_dog_reg;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",15,5,1,1,1,0,0,0,0,0,1,0,1,0,0,0,1
339,"Для экспертов и владельцев собак, чьи собаки участвуют на выставках в одних оцениваниях с этими экспертами, вывести имена и дополнительно в отдельном столбце поясняющий текст: наименование клуба, ""different clubs"" или ""no club"" соответственно, если: собака и эксперт закреплены за одним клубом, закреплены за разными клубами, собака вообще не закреплена за клубом. Выведенная информация не должна содержать повторяющихся записей. Формат вывода: name_exp, name_own, <пояснение>.","SELECT DISTINCT
name_exp
, name_own
 , CASE
 WHEN dog_club.id_club = exp_club.id_club
 THEN dog_club.name_club
 WHEN dog.id_club IS null
 THEN 'no club'
 ELSE 'different clubs'
 END AS club_info
 FROM owner
 JOIN dog
 ON owner.id_own = dog.id_own
 LEFT JOIN club AS dog_club
 ON dog.id_club = dog_club.id_club
 JOIN dog_reg
 ON dog.id_dog = dog_reg.id_dog
 JOIN evaluation
 ON dog_reg.id_dog_reg = evaluation.id_dog_reg
 JOIN expert_reg
 ON evaluation.id_exp_reg = expert_reg.id_exp_reg
 JOIN expert
 ON expert_reg.id_exp = expert.id_exp
 JOIN club AS exp_club
 ON expert.id_club = exp_club.id_club
 ORDER BY name_exp;
","
CREATE TABLE sponsor (
    id_spnr INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_spnr VARCHAR(30) NOT NULL,
    phone_spnr VARCHAR(20) NOT NULL,
    email_spnr VARCHAR(30)
);

CREATE TABLE exhibition (
    id_exh INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exh VARCHAR(30) NOT NULL,
    date_beg TIMESTAMP NOT NULL,
    date_end TIMESTAMP NOT NULL,
    address_exh VARCHAR(40) NOT NULL,
    type_exh VARCHAR(20) NOT NULL
);

CREATE TABLE owner (
    id_own INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_own VARCHAR(20) NOT NULL UNIQUE,
    name_own VARCHAR(60) NOT NULL,
    email_own VARCHAR(30),
    phone_own VARCHAR(20) NOT NULL
);

CREATE TABLE club (
    id_club INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_club VARCHAR(30) NOT NULL,
    phone_club VARCHAR(20) NOT NULL,
    email_club VARCHAR(30)
);

CREATE TABLE sponsorship (
    id_spns INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_cont VARCHAR(20) NOT NULL,
    date_concl DATE NOT NULL,
    id_spnr INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_spnr) REFERENCES sponsor (id_spnr) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE schedule (
    id_sch INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    breed VARCHAR(20) NOT NULL,
    time_perf TIMESTAMP NOT NULL,
    num_ring INT(3) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE dog (
    id_dog INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_dog VARCHAR(20) NOT NULL,
    breed VARCHAR(20) NOT NULL,
    age INT(3) NOT NULL,
    class_dog VARCHAR(20) NOT NULL,
    name_mother_dog VARCHAR(20),
    name_father_dog VARCHAR(20),
    num_birth_doc VARCHAR(30) NOT NULL UNIQUE,
    date_last_vac DATE NOT NULL,
    id_own INT(5) NOT NULL,
    id_club INT(5),
    FOREIGN KEY (id_own) REFERENCES owner (id_own) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert (
    id_exp INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name_exp VARCHAR(60) NOT NULL,
    email_exp VARCHAR(30),
    phone_exp VARCHAR(20) NOT NULL,
    passport_exp VARCHAR(20) NOT NULL UNIQUE,
    id_club INT(5) NOT NULL,
    FOREIGN KEY (id_club) REFERENCES club (id_club) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE dog_reg (
    id_dog_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_part INT(3) NOT NULL,
    status_part VARCHAR(20) NOT NULL,
    date_reg_dog TIMESTAMP NOT NULL,
    status_pay VARCHAR(20) NOT NULL,
    status_med VARCHAR(20) NOT NULL,
    date_med DATE NOT NULL,
    id_dog INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_dog) REFERENCES dog (id_dog) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE expert_reg (
    id_exp_reg INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    num_ref INT(3) NOT NULL,
    status_ref VARCHAR(20) NOT NULL,
    date_reg_exp TIMESTAMP NOT NULL,
    id_exp INT(5) NOT NULL,
    id_exh INT(5) NOT NULL,
    FOREIGN KEY (id_exp) REFERENCES expert (id_exp) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exh) REFERENCES exhibition (id_exh) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE evaluation (
    id_evl INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_sch INT(5) NOT NULL,
    id_dog_reg INT(5) NOT NULL,
    id_exp_reg INT(5) NOT NULL,
    grade_1 INT(3),
    grade_2 INT(3),
    grade_3 INT(3),
    FOREIGN KEY (id_sch) REFERENCES schedule (id_sch) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_dog_reg) REFERENCES dog_reg (id_dog_reg) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_exp_reg) REFERENCES expert_reg (id_exp_reg) ON DELETE CASCADE ON UPDATE CASCADE,
);
",15,5,1,1,1,0,0,0,0,0,0,0,0,1,0,0,1
340,Вывести всю информацию из таблицы workers.,"SELECT * FROM workers;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
341,Вывести всю информацию о работниках.,"SELECT * FROM workers;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
342,Вывести всю информацию из таблицы reading_rooms.,"SELECT * FROM reading_rooms;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
343,Вывести всю информацию о читальных залах.,"SELECT * FROM reading_rooms;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
344,Вывести всю информацию о книгах.,"SELECT * FROM books;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
345,Вывести список неповторяющихся жанров из таблицы books. ,"SELECT DISTINCT genre FROM books;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
346,Книги каких жанров представлены в библиотеке? Вывести без повторений.,"SELECT DISTINCT genre FROM books;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
347,Какие должности занимают работники? Вывести без повторов.,"SELECT DISTINCT position FROM workers;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
348,Вывести список неповторяющихся должностей работников(position) из таблицы workers.,"SELECT DISTINCT position FROM workers;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
349,Вывести список все издателей книг без повторений.,"SELECT DISTINCT publisher FROM books;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
350,"Вывести идентификатор(reader_id), ФИО(full_name_r), номер телефона(phone) читателей из таблицы readers.","SELECT
reader_id
, full_name_r
, phone
FROM readers;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
351,Вывести ФИО всех работников и их должности. ,"SELECT
full_name
, position
FROM workers;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
352,"Вывести информацию о читальных залах в следующем порядке: название зала, тип зала, вместимость. ","SELECT
name
, species
, capacity
FROM reading_rooms;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
353,"Вывести идентификаторы читателей, дату выдачи и формальную дату сдачи книги из таблицы take_book.","SELECT
reader_id
, fixing_date
, f_return_date
FROM take_book;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
354,"Вывести идентификаторы читателей, дату выдачи и фактическую дату сдачи книги из таблицы take_book.","SELECT
reader_id
, fixing_date
, return_date
FROM take_book;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
355,Вывести список неповторяющихся должностей работников(position) из таблицы workers и столбец под название рабочее время(working_hours) со значением 6.,"SELECT DISTINCT
position
, 6 AS working_hours
FROM workers;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
356,"Вывести всю информацию о книге с идентификатором(book_id), равным 11, из таблицы books.","SELECT * FROM books WHERE book_id = 11;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
357,"Вывести всю информацию о читателе с идентификатором, равным 9, из таблицы readers.","SELECT * FROM readers WHERE reader_id = 9;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
358,"Вывести всю информацию о работнике с идентификатором, равным 3.","SELECT * FROM workers WHERE worker_id = 3;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
359,"Вывести из таблицы books всю информацию о книгах, выпущенных изданием(publisher) Физматлит.","SELECT * FROM books WHERE publisher = 'Физматлит';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
360,"Получить всю информацию о читательских билетах, зарегистрированных до 2017-09-15.","SELECT * FROM reader_reg WHERE date_reg < '2017-09-15';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
361,"Вывести из таблицы books идентификатор книг(book_id), название книг(name), изданных в 2010 году или позднее.","SELECT
book_id
, name
FROM books WHERE pub_year >= 2010;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
362,"Вывести названия и типы(species) залов с вместимостью, равной 50.","SELECT
name
, species
FROM reading_rooms WHERE capacity = 50;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
363,"Вывести имена работников, у которых стаж больше 10 лет.","SELECT full_name FROM workers WHERE work_experience > 10;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
364,"Вывести из табицы reader_reg идентификатор(reader_id), номер читательского билета(library_card) читателей, которые зарегистрировались до начала 2019 года.","SELECT
reader_id
, library_card
FROM reader_reg WHERE date_reg < '2019-01-01';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
365,"Вывести ФИО читателей как ‘Читатель’, и его группу как ‘Группа’ для всех читателей очной формы обучения. Примечание: форма обучения бывает 'очная' или 'заочная'.","SELECT
full_name_r 'Читатель'
, reader_groups 'Группа'
FROM readers WHERE education_mode = 'очная';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",2,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
366,"Вывести информацию о читателях в следующем порядке: ФИО читателя, группа, вид занятости, статус. ФИО читателей вывести в алфавитном порядке.","SELECT
full_name_r
, reader_groups
, occupation
, reader_status
FROM readers ORDER BY full_name_r;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
367,"Вывести информацию в следующем порялке: ФИО автора как 'Автор', название книги как 'Название', при условии, что книги изданы иностранным издателем. Указание: издания бывают двух типов(pub_type): отечественное, иностранное.","SELECT
author AS 'Автор'
, name AS 'Название'
FROM books WHERE pub_type = 'иностранное';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",2,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
368,"Вывести информацию в следующем порялке: ФИО автора как 'Автор', название книги как 'Название', при условии, что книги изданы отечественным издателем. Указание: издания бывают двух типов(pub_type): отечественное, иностранное.","SELECT
author AS 'Автор'
, name AS 'Название'
FROM books WHERE pub_type = 'отечественное';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",2,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
369,"Вывести в колонки с советующими названиями ('высшее', 'среднее', 'среднее_профессиональное') количество работников с каждым типом образования. ","select высшее, среднее, среднее_профессиональное from (select count(worker_id) as высшее from workers where education = 'высшее') as temp_1, (select count(worker_id) as среднее from workers where education = 'среднее') as temp_2, (select count(worker_id) as среднее_профессиональное from workers where education = 'среднее профессиональное') as temp_3;","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",2,5,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
370,"Вывести идентификатор читателя под названием 'идентификатор читателя', ФИО читателя под названием 'ФИО' из таблицы readers. Отсортировать ФИО по алфавиту.","SELECT
reader_id AS 'идентификатор читателя'
, full_name_r AS 'ФИО'
FROM readers ORDER BY full_name_r;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",2,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
371,"Вывести без повторения полные имена работников, которые проводили регистрацию читательских билетов. ","SELECT DISTINCT full_name FROM workers, reader_reg WHERE workers.worker_id = reader_reg.worker_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",3,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
372,"Вывести список уникальных полных имен сотрудников, которые работали на выдаче книг. ","SELECT DISTINCT full_name
FROM workers, take_book
WHERE workers.worker_id = take_book.worker_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",3,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
373,"Вывести без повторения полные имена работников, которые регистрировали читателей. ","SELECT DISTINCT full_name FROM workers, reader_reg WHERE workers.worker_id = reader_reg.worker_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",3,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
374,"Вывести без повторения дату рождения и полные имена работников, которые регистрировали читательские билеты.","SELECT DISTINCT
full_name
, birthday
FROM workers, reader_reg WHERE workers.worker_id = reader_reg.worker_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",3,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
375,"Вывести ФИО, номер читательского билета, дату регистрации всех читателей.","SELECT
full_name_r
, library_card
, date_reg
FROM readers AS r, reader_reg AS rr
WHERE r.reader_id = rr.reader_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
376,"Вывести из таблицы workers идентификатор и ФИО работников, которые родились в период между 1970-04-18 и 1980-04-18 (не включительно).","SELECT
worker_id
, full_name
FROM workers
WHERE birthday > '1970-04-18' AND birthday < '1980-04-18';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",4,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
377,Вывести всю информацию об отчисленных студентах и уволенных сотрудниках.,"SELECT * FROM readers WHERE reader_status = 'отчислен' OR reader_status = 'уволен';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",4,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
378,"Вывести идентификаторы всех экземпляров книг, которые написал Мамин-Сибиряк Д.Н.","SELECT instance_id FROM instances, books WHERE instances.book_id = books.book_id AND author = 'Мамин-Сибиряк Д.Н.';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
379,"Вывести из таблицы workers идентификатор и ФИО работников, которые родились в период между 1970-04-18 и 1980-04-18 (включительно).","SELECT
worker_id
, full_name
FROM workers
WHERE birthday >= '1970-04-18' AND birthday <= '1980-04-18';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",4,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
380,"Вывести всю информацию из табицы take_book, где штраф не равен 0 и значение номера зала варьируется от 1 до 3 (включительно).","SELECT * FROM take_book WHERE fine <> 0 AND hall_number >= 1 AND hall_number <= 3;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",4,2,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
381,"Вывести идентификаторы всех списанных экземпляров книг, которые были опубликованы после 2015 года.","SELECT instance_id FROM instances, books WHERE instances.book_id = books.book_id AND status = 'Списан' AND pub_year > 2015;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
382,"Для авторов, фамилия которых начинающихся на букву ‘М’, вывести ФИО автора(author), названия написанных ими книг(name), шифр экземпляров(cypher) книг и статус экземпляра(status). ","SELECT DISTINCT
author
, name
, cypher
, status
FROM instances, books
WHERE instances.book_id = books.book_id AND LEFT(author, 1) = 'М';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
383,"Вывести идентификаторы экземпляров и название книги для всех экземпляров с шифром, начинающимся на букву ‘А’, выпущенных после 2015 года. ","SELECT
instance_id
, name
FROM instances, books WHERE instances.book_id = books.book_id AND LEFT(cypher, 1) = 'А' AND pub_year > 2015;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
384,"Вывести идентификаторы экземпляров и название для всех экземпляров с шифром, начинающимся на букву ‘З’, выпущенных после 2010 года. ","SELECT
instance_id
, name
FROM instances, books
WHERE instances.book_id = books.book_id AND LEFT(cypher, 1) = 'З' AND pub_year > 2010;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
385,"Вывести неповторяющиеся имена студентов, книги которым выдавали либо библиотекари, либо библиографы. ","SELECT DISTINCT full_name_r FROM readers, take_book, workers WHERE readers.reader_id = take_book.reader_id AND take_book.worker_id = workers.worker_id AND (position = 'библиотекарь' OR position = 'библиограф');
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
386,"Для авторов, фамилия которых начинается на букву ‘М’, вывести ФИО автора, названия написанных ими книг и статус экземпляров. ","SELECT DISTINCT
    books.author
    , books.name
    , instances.status
FROM
    instances
    , books
WHERE
    instances.book_id = books.book_id
    AND LEFT(author, 1) = 'М'
    AND instances.status <> 'Списан';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
387,"Вывести полные неповторяющиеся имена и статус студентов, которые хоть раз посещали залы учебной литературы. ","SELECT DISTINCT
full_name_r
, reader_status
FROM readers, take_book, reading_rooms WHERE readers.reader_id = take_book.reader_id AND take_book.hall_number = reading_rooms.hall_number AND occupation = 'студент' AND species = 'учебный';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
388,"Вывести ФИО отчисленных студентов, которые имеют штрафы за книгу, а также название книги и штраф. Упорядочить данные по убыванию суммы штрафа.","SELECT
full_name_r
, name
, fine
FROM books, readers, instances, take_book WHERE readers.reader_id = take_book.reader_id AND take_book.instance_id = instances.instance_id AND instances.book_id = books.book_id AND readers.reader_status = 'отчислен' AND fine > 0 ORDER BY fine DESC;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
389,"Вывести неповторяющиеся имена студентов, которых регистрировали либо Лыткина Елена Вадимовна, либо Симонова Евгения Артёмовна, упорядочить имена студентов в алфавитном порядке.","SELECT DISTINCT full_name_r FROM readers, reader_reg, workers WHERE readers.reader_id = reader_reg.reader_id AND reader_reg.worker_id = workers.worker_id AND (full_name = 'Лыткина Елена Вадимовна' OR full_name = 'Симонова Евгения Артёмовна') ORDER BY full_name_r;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
390,"Вывести названия книг, которые брали студенты из групп М0010 или Т0033.","SELECT DISTINCT name FROM readers, take_book, instances, books WHERE readers.reader_id = take_book.reader_id AND take_book.instance_id = instances.instance_id AND instances.book_id = books.book_id AND occupation = 'студент' AND (reader_groups = ('М0010' OR 'Т0033'));
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
391,"Вывести полные имена работников со стажем более 8 лет, которые регистрировали экземпляры книг в этом же или следующем году после выхода самой книги.","SELECT DISTINCT full_name FROM workers, (SELECT
instance_id
, worker_id
FROM instances, books WHERE instances.book_id = books.book_id AND YEAR(date_reg) - pub_year <= 1) AS temp WHERE temp.worker_id = workers.worker_id AND work_experience > 8;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
392,"Вывести полные имена читателей очной формы обучения, которые взяли экземпляр книги в тот же год, когда экземпляр был зарегистрирован.","SELECT DISTINCT full_name_r FROM readers, (SELECT reader_id FROM instances, take_book WHERE instances.instance_id = take_book.instance_id AND YEAR(date_reg) = YEAR(fixing_date)) AS temp WHERE temp.reader_id = readers.reader_id AND education_mode = 'очная';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
393,"Вывести полные имена работников со стажем более 12 лет, которые регистрировали экземпляры книг через пять лет (ровно) после выхода самой книги.","SELECT DISTINCT full_name FROM workers, (SELECT
instance_id
, worker_id
FROM instances, books WHERE instances.book_id = books.book_id AND YEAR(date_reg) - pub_year = 5) AS temp WHERE temp.worker_id = workers.worker_id AND work_experience > 12;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
394,"Вывестю автора, наименование книги и год публикации для книг, фамилия автора которых содержит  'че'.","SELECT
author
, name
, pub_year
FROM books
WHERE author LIKE '%че%';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",5,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0
395,Вывестю всю информацию о книгах под авторством Коневой. из таблицы books.,"SELECT * FROM books
WHERE author LIKE '%Конева %';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",5,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0
396,"Вывести все книги, выпущенные в период между 2016-11-21 и 2017-01-01.","SELECT name FROM books WHERE pub_year BETWEEN '2016-11-21' AND '2017-01-01';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0
397,"Вывести все отечественные книги жанра ‘учебное пособие’, выпущенные в период между 2014-11-21 и 2017-01-17.","SELECT name FROM books WHERE genre = 'учебное пособие' AND pub_type = 'отечественное' AND pub_year BETWEEN '2014-11-21' AND '2017-01-17';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",5,2,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0
398,Выдать всю информацию о выдаче/приеме экземпляров книг в жанре научная литература. ,"SELECT *
FROM take_book, instances, books
WHERE take_book.instance_id = instances.instance_id
  AND instances.book_id = books.book_id
  AND books.category LIKE '%научное%';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",5,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
399,Вывести всю информацию о выдаче/приеме книг в период между 2019-10-01 и 2020-02-01.,"SELECT * FROM take_book
WHERE return_date BETWEEN '2019-10-01' AND '2020-02-01' OR fixing_date BETWEEN '2019-10-01' AND '2020-02-01';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",5,2,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0
400,Вывести всю информацию о регистрации или списании книг в период между 2019-04-01 и 2020-05-01.,"SELECT * FROM instances WHERE date_reg BETWEEN '2019-05-01' AND '2020-05-01' OR write_off_date BETWEEN '2019-05-01' AND '2020-05-01';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",5,2,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0
401,"Вывести полные имена студентов, обучающихся в группе M0220, которые зарегистрировались в библиоткеки в период с 2017-09-01 по 2019-09-01.","SELECT full_name_r FROM readers, reader_reg WHERE reader_status = 'обучается' AND reader_groups = 'M0220' AND reader_reg.reader_id = readers.reader_id AND date_reg BETWEEN '2017-09-01' AND '2019-09-01';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",5,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
402,"Вывести имена и статус читателей, которым выдавали книги работники со средним профессиональным образованием в период с 2020-01-01 по 2020-03-01.","SELECT DISTINCT
    readers.full_name_r
    , readers.reader_status
FROM
    readers
    , take_book
    , workers
WHERE
    readers.reader_id = take_book.reader_id
    AND take_book.worker_id = workers.worker_id
    AND workers.education = 'среднее профессиональное'
    AND take_book.fixing_date BETWEEN '2020-01-01' AND '2020-03-01';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",5,3,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
403,"Вывести.уникальные ФИО и номера телефонов читателей, являющихся преподавателями, которых зарегестрировал работник библиотеки с идентификатором 8 в период между 2017-01-01 и 2017-12-29.","SELECT DISTINCT
    readers.full_name_r
    , readers.phone
FROM
    readers
    , reader_reg
    , workers
WHERE
    readers.reader_id = reader_reg.reader_id
    AND reader_reg.worker_id = workers.worker_id
    AND workers.worker_id = 8
    AND reader_reg.date_reg BETWEEN '2017-01-01' AND '2017-12-29'
    AND readers.occupation = 'преподаватель';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",5,3,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
404,"Вывести имена и номера групп обучающихся, которым выдавали книги работники с высшим образованием в период с 2019-03-01 по 2020-03-10.","SELECT
    readers.full_name_r
    , readers.reader_groups
FROM
    readers
    , take_book
    , workers
WHERE
    readers.reader_id = take_book.reader_id
    AND take_book.worker_id = workers.worker_id
    AND workers.education = 'высшее'
    AND take_book.fixing_date BETWEEN '2019-03-01' AND '2020-03-10'
    AND readers.reader_status = 'обучается';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",5,3,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
405,"Вывести имена читателей и работников, которые выдавали им книги в читальном зале 'Читальный зал №2 учебной литературы' в период с 2018-05-01 по 2020-05-01.","SELECT
full_name
, full_name_r
FROM readers, take_book, workers, reading_rooms WHERE readers.reader_id = take_book.reader_id AND take_book.worker_id = workers.worker_id AND reading_rooms.hall_number = take_book.hall_number AND name = 'Читальный зал №2 учебной литературы' AND fixing_date BETWEEN '2018-05-01' AND '2020-05-01';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",5,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
406,"Вывести неповторяющиеся идентификаторы читателей, который брали в абонемент (fixing_date<>f_return_date) книгу в читальных залых под номером №1 в период времени с 2020-01-01 по 2020-01-31.","SELECT DISTINCT readers.reader_id
FROM
    readers
    , take_book
    , reading_rooms
WHERE
    readers.reader_id = take_book.reader_id
    AND take_book.hall_number = reading_rooms.hall_number
    AND reading_rooms.name LIKE '%№1%'
    AND take_book.fixing_date <> take_book.f_return_date
    AND take_book.fixing_date BETWEEN '2020-01-01' AND '2020-01-31';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",5,3,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
407,Вывести общую сумму штрафов по библиотеке.,"SELECT SUM(fine) FROM take_book;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",6,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
408,Вывести средний штраф по библиотеке.,"SELECT AVG(fine) FROM take_book;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",6,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
409,Вывести минимальный штраф по библиотеке.,"SELECT MIN(fine) FROM take_book;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",6,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
410,Вывести максимальный штраф по библиотеке.,"SELECT MAX(fine) FROM take_book;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",6,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
411,"Вывести, сколько раз библиотека совершала выдачу книг за все время.","SELECT COUNT(op_id) FROM take_book;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",6,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
412,Сколько читателей работает?,"SELECT COUNT(reader_id) FROM readers WHERE reader_status = 'работает';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",6,2,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0
413,Сколько работающих преподавателей зарегистрировано в библиотеке?,"SELECT COUNT(reader_id)
FROM readers
WHERE reader_status = 'работает' AND occupation = 'преподаватель';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",6,2,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0
414,"Вывести количество книг, которые были выданы в зале с названием 'Читальный зал №2 учебной литературы' в период после 2019-02-18.","SELECT COUNT(take_book.hall_number) FROM reading_rooms, take_book WHERE reading_rooms.hall_number = take_book.hall_number AND name = 'Читальный зал №2 учебной литературы' AND fixing_date > '2019-02-18';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",6,2,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0
415,"Сколько читателей в процентном соотношении относятся к студентам, а сколько к преподавателям? Вывести полученные результаты в колонки c соответствующими названиями (‘студенты’, ‘преподаватели’). Округлить до двух знаков после запятой.","SELECT
ROUND((100.00 - s), 2) AS 'студенты'
, ROUND(s, 2) AS 'преподаватели'
FROM (SELECT (COUNT(*) / (SELECT COUNT(*) FROM readers)) * 100.00 AS s FROM readers WHERE occupation = 'преподаватель') AS temp;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",6,5,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0
416,Сколько экземпляров книг с жанром рассказ и роман? Вывести два значения с соответствующими названиями 'роман' и 'рассказ'.,"SELECT
    (SELECT COUNT(instance_id) FROM instances, books
     WHERE instances.book_id = books.book_id AND books.genre = 'роман') AS роман,
    
    (SELECT COUNT(instance_id) FROM instances, books
     WHERE instances.book_id = books.book_id AND books.genre = 'рассказ') AS рассказ;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",6,4,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0
417,"Сколько работников в процентном отношении имеют высшее, среднее профессиональное, среднее образования? Вывести три значения с соответствующими названиями ""высшее"", 'среднее профессиональное' и 'среднее'. Округлить значения до двух знаков после запятой.","SELECT
ROUND((100.00 - s1 - s2), 2) AS 'высшее'
, ROUND(s2, 2) AS 'среднее профессиональное'
, ROUND(s1, 2) AS 'среднее'
FROM
(SELECT (COUNT(*) / (
        SELECT COUNT(*) FROM workers
)) * 100.00 AS s1 FROM workers WHERE education = 'среднее') AS m1
, (SELECT (COUNT(*) / (
        SELECT COUNT(*) FROM workers
)) * 100.00 AS s2 FROM workers WHERE education = 'среднее профессиональное') AS m2;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",6,5,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0
418,"Сколько студентов в процентном соотношении относятся к каждой учебной группе (M0010, M0220, T0023 и T0033)? Вывести четыре значения с соответствующими названиями ""M0010"", ""M0220"", ""T0023"" и ""T0033"".","SELECT
(100.00 - s1 - s2 - s3) AS m0010
, S1 'M0220'
, s2 AS t0023
, s3 AS t0033
FROM
(SELECT (COUNT(*) / (
        SELECT COUNT(*) FROM readers
)) * 100.00 AS s1 FROM readers WHERE reader_groups = 'M0220') AS m1
, (SELECT (COUNT(*) / (
        SELECT COUNT(*) FROM readers
)) * 100.00 AS s2 FROM readers WHERE reader_groups = 'T0023') AS m2
, (SELECT (COUNT(*) / (
        SELECT COUNT(*) FROM readers
)) * 100.00 AS s3 FROM readers WHERE reader_groups = 'T0033') AS m3;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",6,5,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0
419,Посчитайте количество работников для каждого вида образования.,"SELECT
education
, COUNT(*)
FROM workers GROUP BY education;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",7,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0
420,Для каждой книги посчитать количество ее экземпляров. Вывести название книги и количество экземпляров.,"SELECT
name
, COUNT(instances.book_id)
FROM books, instances WHERE books.book_id = instances.book_id GROUP BY instances.book_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",7,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0
421,"Для работников, рожденных раньше 26 декабря 1991 года, вывести количество выданных ими книг.","SELECT
full_name
, COUNT(*)
FROM workers, take_book
WHERE workers.worker_id = take_book.worker_id AND birthday < '1991-12-26'
GROUP BY take_book.worker_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",7,2,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
422,"Для работников, рожденных раньше 1980 года, вывести ФИО и количество оформленных ими книг.","SELECT
full_name
, COUNT(instances.worker_id)
FROM workers, instances WHERE workers.worker_id = instances.worker_id AND birthday < '1980-01-01' GROUP BY instances.worker_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",7,2,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
423,Посчитать количество студентов в каждой учебной группе. Читателей вне групп учитывать не нужно.,"SELECT
reader_groups
, COUNT(reader_id)
FROM readers WHERE reader_groups IS NOT null GROUP BY reader_groups;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",7,2,1,1,0,1,0,1,1,0,0,0,0,0,0,0,0
424,Для каждого работника посчитать количество зарегистрированных им читателей. Вывести ФИО работника и кол-во читателей.,"SELECT
full_name
, COUNT(reader_id)
FROM reader_reg AS r, workers AS w
WHERE w.worker_id = r.worker_id
GROUP BY w.worker_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",7,2,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0
425,Для каждого работника посчитать количество зарегистрированных им экземпляров книг. Вывести ФИО работника и кол-во экземпляров.,"SELECT
full_name
, COUNT(instance_id)
FROM workers AS w, instances AS i
WHERE i.worker_id = w.worker_id
GROUP BY w.worker_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",7,2,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0
426,"Для авторов, фамилия которых начинается на букву ‘М’, вывести, сколько всего раз брали их книги. Вывести название книги и число раз. ","SELECT
books.name
, COUNT(take_book.instance_id)
FROM take_book, instances, books
WHERE take_book.instance_id = instances.instance_id
  AND instances.book_id = books.book_id
  AND LEFT(books.author, 1) = 'М'
GROUP BY books.book_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",7,3,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
427,"Вывести полные имена читателей и количество книг, которые брали Гавриловы.","SELECT
    readers.full_name_r
    , COUNT(take_book.reader_id)
FROM
    take_book
    , readers
WHERE
    take_book.reader_id = readers.reader_id
    AND readers.full_name_r LIKE '%Гаврилов%'
GROUP BY
    take_book.reader_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",7,3,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
428,"Для всех жанров, кроме научной литературы, вывести количество раз, когда возврат книги задерживался.","SELECT
category
, COUNT(take_book.instance_id)
FROM books, instances, take_book WHERE books.book_id = instances.book_id AND take_book.instance_id = instances.instance_id AND NOT category = 'научное' AND f_return_date < return_date GROUP BY category;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",7,3,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
429,"Для всех не отчисленных студентов из групп 'T0023' и 'M0010' вывести названия залов, которые они посещают, и количество посещений. ","SELECT
full_name_r
, name
, COUNT(*) AS cnt
FROM readers, take_book, reading_rooms WHERE (reader_groups = 'T0023' OR reader_groups = 'M0010') AND NOT reader_status = 'отчислен' AND readers.reader_id = take_book.reader_id AND reading_rooms.hall_number = take_book.hall_number GROUP BY readers.reader_id, reading_rooms.hall_number;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",7,4,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
430,"Для научной литературы вывести названия книг, категорию, сколько раз эту книгу брали студенты, а сколько преподаватели, упорядочить названия по алфавитному порядку названия книг.","SELECT
name
, category
, COUNT(take_book.reader_id)
FROM readers, take_book, instances, books WHERE take_book.instance_id = instances.instance_id AND instances.book_id = books.book_id AND category = 'научное' AND readers.reader_id = take_book.reader_id GROUP BY books.book_id ORDER BY name ASC;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",7,4,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
431,"Для студентов каждой группы обучения вывести, сколько всего книг было взято этой группой после 2018-01-01, в подсчётах не учитывать романы. ","SELECT
reader_groups
, COUNT(take_book.reader_id)
FROM books, instances, take_book, readers WHERE books.book_id = instances.book_id AND take_book.instance_id = instances.instance_id AND readers.reader_id = take_book.reader_id AND NOT genre = 'роман' AND occupation = 'студент' AND fixing_date > '2018-01-01' GROUP BY reader_groups;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",7,4,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
432,"Для каждого читального зала научной или учебной литературы вывести, сколько раз его посещали студенты, а сколько преподаватели (учитывать только обучающихся студентов и работающих преподавателей).","SELECT
name
, occupation
, COUNT(take_book.reader_id)
FROM readers, take_book, reading_rooms WHERE take_book.hall_number = reading_rooms.hall_number AND readers.reader_id = take_book.reader_id AND (species = 'научный' OR species = 'учебный') AND (reader_status = 'обучается' OR reader_status = 'работает') GROUP BY occupation, name ORDER BY name;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",7,5,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
433,"Для категорий ‘учебное’ и 'научное' вывести, названия книг(name), категорию(category), вид занятости читателя(occupation) и сколько раз эту книгу брали студенты, а сколько преподаватели, упорядочить названия по алфавитному порядку названия книг.","SELECT
name
, category
, occupation
, COUNT(take_book.reader_id)
FROM readers, take_book, instances, books
WHERE take_book.instance_id = instances.instance_id
AND instances.book_id = books.book_id
AND (category = 'учебное' OR category = 'научное')
AND readers.reader_id = take_book.reader_id
GROUP BY name, category, occupation
ORDER BY name ASC;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",7,5,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
434,"Для каждого работника вывести количество читателей по каждому виду занятости, которых он зарегистрировал в период с 2015-01-15 по 2017-06-15. Выполнить запрос с использованием подзапросов.","SELECT
full_name
, occupation
, COUNT(*)
FROM workers, (SELECT
reader_id
, worker_id
FROM reader_reg WHERE date_reg BETWEEN '2015-01-15' AND '2017-06-15') AS temp_1, (SELECT
reader_id
, occupation
FROM readers) AS temp_2 WHERE temp_2.reader_id = temp_1.reader_id AND temp_1.worker_id = workers.worker_id GROUP BY temp_1.worker_id, occupation;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",7,5,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
435,"Для каждого работника вывести количество книг по каждой категории книг, которые он зарегистрировал в период с 2018-01-01 по 2019-06-01. Выполнить запрос с использованием подзапросов.","SELECT
full_name
, category
, COUNT(*)
FROM workers, (SELECT
instance_id
, worker_id
, book_id
FROM instances WHERE date_reg BETWEEN '2018-01-01' AND '2019-06-01') AS temp_1, (SELECT
book_id
, category
FROM books) AS temp_2 WHERE temp_2.book_id = temp_1.book_id AND temp_1.worker_id = workers.worker_id GROUP BY temp_1.worker_id, category;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",7,5,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
436,"Для каждого работника вывести количество студентов по каждой форме обучения, которых он зарегистрировал в период с 2017-05-10 по 2019-12-13 (не учитывать преподавателей, у которых форма обучения отсутствует). Выполнить запрос с использованием подзапросов. ","SELECT
full_name
, education_mode
, COUNT(temp_1.worker_id)
FROM workers, (SELECT
reader_id
, worker_id
FROM reader_reg WHERE date_reg BETWEEN '2017-05-10' AND '2019-12-13') AS temp_1, (SELECT
reader_id
, education_mode
FROM readers WHERE education_mode IS NOT null) AS temp_2 WHERE temp_2.reader_id = temp_1.reader_id AND temp_1.worker_id = workers.worker_id AND education_mode IS NOT null GROUP BY temp_1.worker_id, education_mode;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",7,5,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
437,"Вывести из таблицы books название издания, которое выпустило более 5 книг, хранящихся в библиотеке.","SELECT publisher
FROM books
GROUP BY publisher HAVING COUNT(*) > 5;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",8,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0
438,"Вывести номера групп, в которых больше 4 зарегистрированных в библиотеке студентов.","SELECT reader_groups FROM readers GROUP BY reader_groups HAVING COUNT(reader_groups) > 4;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",8,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0
439,"Вывести номера групп, в которых меньше 3 зарегистрированных в библиотеке студентов.","SELECT reader_groups FROM readers GROUP BY reader_groups HAVING COUNT(reader_groups) < 3;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",8,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0
440,"Вывести уникальные номера читательских билетов и ФИО читателей, которые брали книгу хотя бы один раз.","SELECT DISTINCT
    library_card
    , full_name_r
FROM
    readers
    , reader_reg
    , take_book
WHERE
    readers.reader_id = reader_reg.reader_id
    AND readers.reader_id = take_book.reader_id
GROUP BY
    library_card
HAVING
    COUNT(*) >= 1;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",8,2,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0
441,"Вывести уникальные номера читательских билетов и ФИО читателей, которые брали больше 3 книг в библиотеке.","SELECT DISTINCT
    library_card
    , full_name_r
FROM
    readers
    , reader_reg
    , take_book
WHERE
    readers.reader_id = reader_reg.reader_id
    AND readers.reader_id = take_book.reader_id
GROUP BY
    library_card
HAVING
    COUNT(take_book.reader_id) > 3;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",8,2,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0
442,"Вывести уникальные номера читательских билетов и ФИО читателей, которые брали книгу в зал библиотеки (fixing_date=f_return_date) хотя бы один раз.","SELECT DISTINCT
    library_card
    , full_name_r
FROM
    readers
    , reader_reg
    , take_book
WHERE
    readers.reader_id = reader_reg.reader_id
    AND readers.reader_id = take_book.reader_id
    AND fixing_date = f_return_date
GROUP BY
    library_card
HAVING
    COUNT(*) >= 1;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",8,2,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0
443,"Вывести названия читальных залов, в которых брали больше семи книг.","SELECT name FROM reading_rooms, (SELECT hall_number FROM take_book GROUP BY hall_number HAVING COUNT(hall_number) > 7) AS temp WHERE temp.hall_number = reading_rooms.hall_number;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",8,2,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0
444,"Вывести имена сотрудников, которые зарегистрировали больше восьми читателей. ","SELECT full_name FROM workers, (SELECT worker_id FROM reader_reg GROUP BY worker_id HAVING COUNT(worker_id) > 8) AS temp WHERE temp.worker_id = workers.worker_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",8,2,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0
445,"Вывести полные имена читателей, которые брали больше двух книг.","SELECT DISTINCT full_name_r FROM readers, (SELECT reader_id FROM take_book GROUP BY reader_id HAVING COUNT(*) > 2) AS temp WHERE temp.reader_id = readers.reader_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",8,2,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0
446,"Вывести из таблицы readers наименования групп и столбец под названием 'number of students', в котором выводится количество учащихся студентов. Выводить только те группы, в которых меньше 4 учащихся студентов.","SELECT
reader_groups
, COUNT(reader_id) AS 'number of students'
FROM readers
WHERE occupation = 'студент' AND reader_status = 'обучается'
GROUP BY reader_groups
HAVING COUNT(reader_id) < 4;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",8,2,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0
447,"Для каждого автора, кроме авторов, фамилия которых начинается на букву ‘А’, вывести количество экземпляров их книг, зарегистрированных в период между ‘2018-11-01’ и ‘2019-12-01’. Использовать HAVING.","SELECT
author
, COUNT(instances.book_id)
FROM books, instances WHERE books.book_id = instances.book_id AND date_reg BETWEEN '2018-11-01' AND '2019-12-01' GROUP BY instances.book_id HAVING NOT LEFT(author, 1) = 'А';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",8,3,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0
448,"Для каждого издателя по каждому его жанру, кроме романа, вывести, сколько раз брали эти книги в 2019 году.","SELECT
publisher
, genre
, COUNT(take_book.instance_id)
FROM books, instances, take_book WHERE books.book_id = instances.book_id AND instances.instance_id = take_book.instance_id AND fixing_date BETWEEN '2019-01-01' AND '2020-01-01' GROUP BY publisher, genre HAVING NOT genre = 'роман';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",8,4,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0
449,"Для каждого издательства по каждому жанру, кроме рассказа, вывести, сколько раз брали их книги в период с 2018-09-14 по 2019-12-03. Использоваnь HAVING.","SELECT
publisher
, genre
, COUNT(take_book.instance_id)
FROM books, instances, take_book WHERE books.book_id = instances.book_id AND instances.instance_id = take_book.instance_id AND fixing_date BETWEEN '2018-09-14' AND '2019-12-03' GROUP BY publisher, genre HAVING NOT genre = 'рассказ';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",8,4,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0
450,"Для каждого студента заочной форму обучения, фамилия которого начинается на буквы ‘З’ или ‘К’, вывести общее количество дней использования всех взятых им книг начиная с 2020-01-01, из вывода исключить строки со значением 0.","SELECT
full_name_r
, SUM(days) AS sum
FROM readers, (SELECT
reader_id
, (return_date - fixing_date) AS days
FROM take_book WHERE fixing_date > '2020-01-01') AS temp WHERE education_mode = 'заочная'
AND temp.reader_id = readers.reader_id GROUP BY full_name_r HAVING (LEFT(full_name_r, 1) = 'К' OR LEFT(full_name_r, 1) = 'З') AND sum > 0;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",8,5,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0
451,"Для каждого студента очной форму обучения, фамилия которого начинается на буквы ‘М’ или ‘В’, вывести общее количество дней использования всех взятых им книг начиная с 2019-05-15, из вывода исключить строки со значением 0.","SELECT
full_name_r
, SUM(days) AS sum
FROM readers, (SELECT
reader_id
, (return_date - fixing_date) AS days
FROM take_book WHERE fixing_date > '2019-05-15') AS temp WHERE education_mode = 'очная' AND temp.reader_id = readers.reader_id GROUP BY full_name_r HAVING (LEFT(full_name_r, 1) = 'Г' OR LEFT(full_name_r, 1) = 'М') AND sum > 0;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",8,5,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0
452,"Для каждого преподавателя с докторской степенью, фамилия которого начинается на буквы ‘Б’ или ‘К’, вывести общее количество дней использования всех взятых им книг начиная с 2019-07-01, из вывода исключить строки со значением 0.","SELECT
full_name_r
, SUM(days) AS sum
FROM readers, (SELECT
reader_id
, (return_date - fixing_date) AS days
FROM take_book WHERE fixing_date > '2019-07-01') AS temp WHERE science_degree = 'доктор наук' AND temp.reader_id = readers.reader_id GROUP BY full_name_r HAVING (LEFT(full_name_r, 1) = 'Б' OR LEFT(full_name_r, 1) = 'К') AND sum > 0;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",8,5,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0
453,Вывести всю информацию из таблицы workers о самом старом работнике.,"SELECT * FROM workers WHERE birthday = (SELECT MIN(birthday) FROM workers);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",9,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0
454,Вывести названия книг с самым ранним годом публикации. ,"SELECT name FROM books WHERE pub_year = (SELECT MIN(pub_year) FROM books);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",9,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0
455,Вывести названия книг с самым поздним годом публикации. ,"SELECT name FROM books WHERE pub_year = (SELECT MAX(pub_year) FROM books);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",9,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0
456,"Вынести из табицы readers информацию о читателях(full_name_r, occupation, reader_status), которые получили максимальный штраф за несоблюдение сроков сдачи книг.","SELECT DISTINCT
    readers.full_name_r
    , readers.occupation
    , readers.reader_status
FROM
    readers, take_book
WHERE
    readers.reader_id = take_book.reader_id
    AND take_book.fine = (
        SELECT MAX(fine) FROM take_book
    );
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",9,2,1,1,1,1,0,1,0,0,1,0,0,0,0,0,0
457,"Вынести из таблицы readers информацию о читателе, который получил минимальный штраф за несоблюдение сроков сдачи книг.","SELECT DISTINCT
    readers.full_name_r
    , readers.occupation
    , readers.reader_status
FROM
    readers
    , take_book
WHERE
    readers.reader_id = take_book.reader_id
    AND take_book.fine = (
        SELECT MIN(fine)
        FROM take_book
    );
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",9,2,1,1,1,1,0,1,0,0,1,0,0,0,0,0,0
458,В каких залах чаще всего берут книги в зал (fixing_date=return_date) по сравнению с другими залами? Вывести названия залов.,"SELECT name FROM reading_rooms, take_book WHERE reading_rooms.hall_number = take_book.hall_number AND fixing_date = return_date GROUP BY take_book.hall_number HAVING COUNT(take_book.hall_number) = (SELECT MAX(hall) FROM (SELECT COUNT(hall_number) AS hall FROM take_book WHERE fixing_date = return_date GROUP BY hall_number) AS temp);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",9,3,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0
459,В каких залах реже всего берут книги в зал (fixing_date=return_date) по сравнению с другими залами? Вывести названия залов.,"SELECT name FROM reading_rooms, take_book WHERE reading_rooms.hall_number = take_book.hall_number AND fixing_date = return_date GROUP BY take_book.hall_number HAVING COUNT(take_book.hall_number) = (SELECT MIN(hall) FROM (SELECT COUNT(hall_number) AS hall FROM take_book WHERE fixing_date = return_date GROUP BY hall_number) AS temp);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",9,3,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0
460,"Вывести названия книг, которые имеют меньше всего экземпляров.","SELECT name FROM books, (SELECT
book_id
, COUNT(book_id) AS book_count
FROM instances GROUP BY book_id) AS temp_1 WHERE temp_1.book_id = books.book_id AND book_count = (SELECT MIN(book_count) FROM (SELECT
book_id
, COUNT(book_id) AS book_count
FROM instances GROUP BY book_id) AS temp_2);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",9,2,1,1,1,1,0,1,1,0,1,0,0,0,0,0,0
461,Работники на какой должности зарегистрировали больше всего читателей? ,"SELECT position FROM (SELECT
position
, COUNT(workers.worker_id) AS worker_count
FROM workers, reader_reg WHERE workers.worker_id = reader_reg.worker_id GROUP BY position) AS temp_1 WHERE worker_count = (SELECT MAX(worker_count) FROM (SELECT
position
, COUNT(workers.worker_id) AS worker_count
FROM workers, reader_reg WHERE workers.worker_id = reader_reg.worker_id GROUP BY position) AS temp_2);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",9,2,1,1,1,0,0,1,1,0,1,0,0,0,0,0,0
462,"Вывести номер самой активной группы (группы, в которой студенты брали больше всего книг).","SELECT reader_groups FROM (SELECT
reader_groups
, COUNT(readers.reader_id) AS group_count
FROM readers, take_book WHERE readers.reader_id = take_book.reader_id GROUP BY reader_groups) AS temp_1 WHERE group_count = (SELECT MAX(group_count) FROM (SELECT
reader_groups
, COUNT(readers.reader_id) AS group_count
FROM readers, take_book WHERE readers.reader_id = take_book.reader_id GROUP BY reader_groups) AS temp_2);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",9,3,1,1,1,0,0,1,1,0,1,0,0,0,0,0,0
463,"Вывести названия книг, которые имеют больше всего экземпляров, выпущенных в 2019 году.","SELECT name FROM books, (SELECT
book_id
, COUNT(book_id) AS book_count
FROM instances WHERE YEAR(date_reg) = 2019 GROUP BY book_id) AS temp_1 WHERE temp_1.book_id = books.book_id AND book_count = (SELECT MAX(book_count) FROM (SELECT
book_id
, COUNT(*) AS book_count
FROM instances WHERE YEAR(date_reg) = 2019 GROUP BY book_id) AS temp_2);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",9,4,1,1,1,1,0,1,1,0,1,0,0,0,0,0,0
464,"Вывести номер самой неактивной группы (группы, в которой студенты брали меньше всего книг) и численность этой группы('number of students')","SELECT
temp_1.reader_groups
, c AS 'number of students'
FROM (SELECT
reader_groups
, COUNT(readers.reader_id) AS group_count
FROM readers, take_book
WHERE readers.reader_id = take_book.reader_id GROUP BY reader_groups) AS temp_1, (SELECT
reader_groups
, COUNT(reader_id) AS c
FROM readers GROUP BY reader_groups) AS temp_2
 WHERE temp_1.reader_groups = temp_2.reader_groups
 AND group_count = (SELECT MIN(group_count)
 FROM (SELECT
reader_groups
, COUNT(readers.reader_id) AS group_count
 FROM readers, take_book WHERE readers.reader_id = take_book.reader_id GROUP BY reader_groups) AS temp_2);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",9,4,1,1,1,1,0,1,1,0,1,0,0,0,0,0,0
465,"Вывести названия книг, которые читатели брали чаще всего.","SELECT DISTINCT books.name
FROM
    books
    , instances
    , (
        SELECT
            instance_id
            , COUNT(instance_id) AS inst_count
        FROM
            take_book
        GROUP BY
            instance_id
        HAVING
            COUNT(instance_id) = (
                SELECT MAX(inst_count)
                FROM
                    (
                        SELECT COUNT(instance_id) AS inst_count
                        FROM
                            take_book
                        GROUP BY
                            instance_id
                    ) AS temp_1
            )
    ) AS max_instances
WHERE
    instances.book_id = books.book_id
    AND instances.instance_id = max_instances.instance_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",9,4,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0
466,"Вывести всю информацию о читателях, которые ни разу не брали книги. Использовать ANY.","SELECT * FROM readers WHERE NOT reader_id = ANY(SELECT reader_id FROM take_book);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",10,1,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0
467,"Вывести идентификаторы и имена работников, которые хоть раз регистрировали читателей. В запросе не использовать соединение таблиц.","SELECT
worker_id
, full_name
FROM workers
WHERE worker_id = ANY(SELECT worker_id FROM reader_reg);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",10,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0
468,"Вывести номера читательских билетов, которые оформлялись работниками со средним профессиональным образованием. Использовать SOME.","SELECT library_card FROM reader_reg WHERE worker_id = SOME(SELECT worker_id FROM workers WHERE education = 'среднее профессиональное');
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",10,2,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0
469,"Вывести полные имена читателей, которые зарегистрировались в библиотеке раньше, чем появились все экземпляры книги с идентификатором(book_id) 8. Использовать ALL.","SELECT full_name_r FROM reader_reg, readers WHERE readers.reader_id = reader_reg.reader_id AND date_reg < ALL(SELECT date_reg FROM instances WHERE book_id = 8);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",10,2,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0
470,"Вывести названия и авторов книг, для которых имеется меньше трёх экземпляров.","SELECT DISTINCT
    name
    , author
FROM
    books
WHERE
    book_id IN (
        SELECT book_id
        FROM instances
        GROUP BY book_id
        HAVING COUNT(*) < 3
    );
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",10,3,1,1,0,1,0,1,1,1,1,1,0,0,0,0,0
471,"Вывести названия книг, все экземпляры которых вышли в один год с выходом книги. В запросе использовать предикат ALL. ","SELECT name FROM books AS bk WHERE pub_year = ALL(SELECT YEAR(date_reg) FROM instances WHERE bk.book_id = instances.book_id);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",10,3,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0
472,"Вывести авторов книг, списание экземпляров которых оформлялось работниками со стажем меньше 5 лет. Использовать ANY.","SELECT author FROM instances, books WHERE instances.book_id = books.book_id AND worker_id = ANY(SELECT worker_id FROM workers WHERE work_experience < 5) AND status = 'Списан';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",10,3,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0
473,"Вывести названия книг, которые брали студенты. Использовать ANY.","SELECT DISTINCT name FROM take_book, instances, books WHERE take_book.instance_id = instances.instance_id AND instances.book_id = books.book_id AND take_book.reader_id = ANY(SELECT reader_id FROM readers WHERE occupation = 'студент');
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",10,3,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0
474,Вывести всю информацию о выдаче/приеме экземпляров книг авторства Алексеенко А.В. Использовать предикат IN.,"SELECT * FROM take_book
WHERE instance_id IN (
	SELECT instance_id FROM instances WHERE book_id IN (
		SELECT book_id FROM books WHERE author LIKE '%Алексеенко А.В.%'
	)
);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",10,3,1,1,0,1,1,0,0,0,1,1,0,0,0,0,0
475,"Вывести названия и жанры книг, экземпляры которых были выданы читателям больше 1 раз.","SELECT DISTINCT
    books.name
    , books.genre
FROM
    books
    , instances
    , take_book
WHERE
    books.book_id = instances.book_id
    AND instances.instance_id = take_book.instance_id
    AND instances.instance_id IN (
        SELECT instance_id
        FROM take_book
        GROUP BY instance_id
        HAVING COUNT(instance_id) > 1
    );
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",10,4,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0
476,"Вывести названия и авторов книг, экземпляры которых были выданы читателям меньше 3 раз.","SELECT DISTINCT
    books.name
    , books.author
FROM
    books
    , instances
    , take_book
WHERE
    books.book_id = instances.book_id
    AND instances.instance_id = take_book.instance_id
    AND books.book_id IN (
        SELECT instances.book_id
        FROM books, instances, take_book
        WHERE
        books.book_id = instances.book_id
        AND instances.instance_id = take_book.instance_id
        GROUP BY instances.book_id
        HAVING COUNT(*) < 3
    );
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",10,4,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0
477,"Вывести названия книг, которые имеют больше 3 экземпляров. Использовать ANY/","SELECT DISTINCT name FROM instances, books WHERE books.book_id = instances.book_id AND books.book_id = ANY(SELECT book_id FROM (SELECT
book_id
, COUNT(book_id) AS books_count
FROM instances GROUP BY book_id) AS temp WHERE books_count > 3);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",10,4,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0
478,"Вывести названия книг, которые имеют ровно 2 экземпляра. Использовать ANY.","SELECT DISTINCT name FROM instances, books WHERE books.book_id = instances.book_id AND books.book_id = ANY(SELECT book_id FROM (SELECT
book_id
, COUNT(book_id) AS books_count
FROM instances GROUP BY book_id) AS temp WHERE books_count = 2);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",10,4,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0
479,"Вывести названия книг, которые брали преподаватели. Использовать SOME.","SELECT DISTINCT name FROM readers, take_book, instances, books WHERE readers.reader_id = take_book.reader_id AND take_book.instance_id = instances.instance_id AND instances.book_id = books.book_id AND take_book.reader_id = SOME(SELECT reader_id FROM readers WHERE occupation = 'преподаватель');
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",10,4,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0
480,"Для авторов, фамилия которых начинающихся на букву ‘А’, вывести названия залов, в которых расположены их книги. ","SELECT DISTINCT
author
, reading_rooms.name
FROM reading_rooms, take_book, instances, books WHERE instances.book_id = ANY(SELECT book_id FROM books WHERE LEFT(author, 1) = 'А') AND reading_rooms.hall_number = take_book.hall_number AND take_book.instance_id = instances.instance_id AND instances.book_id = books.book_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",10,4,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0
481,"Вывести имена работников, которые выдали больше всего книг во втором зале учебной литературы в период 2019-09-19 по 2020-05-04. ","SELECT DISTINCT workers.full_name
FROM
    workers
    , take_book
    , reading_rooms
WHERE
    workers.worker_id = take_book.worker_id
    AND take_book.hall_number = reading_rooms.hall_number
    AND reading_rooms.name LIKE '%№2%'
    AND reading_rooms.species = 'учебный'
    AND take_book.fixing_date BETWEEN '2019-09-19' AND '2020-05-04'
    AND take_book.worker_id IN (
        SELECT worker_id
        FROM (
            SELECT
                worker_id
                , COUNT(take_book.hall_number) AS hall_count
            FROM
                take_book
                , reading_rooms
            WHERE
                take_book.hall_number = reading_rooms.hall_number
                AND reading_rooms.name LIKE '%№2%'
                AND reading_rooms.species = 'учебный'
                AND take_book.fixing_date BETWEEN '2019-09-19' AND '2020-05-04'
            GROUP BY
                take_book.worker_id
        ) AS temp_2
        WHERE temp_2.hall_count = (
            SELECT MAX(hall_count)
            FROM (
                SELECT COUNT(take_book.hall_number) AS hall_count
                FROM
                    take_book
                    , reading_rooms
                WHERE
                    take_book.hall_number = reading_rooms.hall_number
                    AND reading_rooms.name LIKE '%№2%'
                    AND reading_rooms.species = 'учебный'
                    AND take_book.fixing_date BETWEEN '2019-09-19' AND '2020-05-04'
                GROUP BY
                    reading_rooms.hall_number, take_book.worker_id
            ) AS temp_3
        )
    );
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",10,5,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0
482,"Вывести полные неповторяющиеся имена и группы студентов, которые хоть раз брали книгу 'Introduction to Nanotechnology'. Использовать ANY.","SELECT DISTINCT
full_name_r
, reader_groups
FROM readers, take_book, instances, books WHERE readers.reader_id = take_book.reader_id AND take_book.instance_id = instances.instance_id AND readers.reader_id = ANY(SELECT reader_id FROM readers WHERE occupation = 'студент') AND instances.book_id = ANY(SELECT book_id FROM books WHERE name = 'Introduction to Nanotechnology');
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",10,4,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0
483,"Вывести полные неповторяющиеся имена преподаватели с ученой степенью, которые хоть раз брали книгу 'Математика для социологов и экономистов', вывести также саму ученую степень. Для поиска книги использовать предикат ANY.","SELECT DISTINCT
full_name_r
, science_degree
FROM readers, take_book, instances, books WHERE readers.reader_id = take_book.reader_id AND take_book.instance_id = instances.instance_id AND readers.reader_id = ANY(SELECT reader_id FROM readers WHERE science_degree IS NOT null) AND instances.book_id = ANY(SELECT book_id FROM books WHERE name = 'Математика для социологов и экономистов');
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",10,4,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0
484,"Вывести из таблиц readers, reader_reg ФИО читателя, идентификатор читателя и дату его регистрации.","SELECT
full_name_r
, r.reader_id
, date_reg
FROM readers AS r INNER JOIN reader_reg AS rr ON r.reader_id = rr.reader_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",11,2,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0
485,"Вывести ФИО и должность работников библиотеки, которые ни разу не регистрировали новые экземпляры книг. ","SELECT
full_name
, position
FROM workers LEFT OUTER JOIN instances ON workers.worker_id = instances.worker_id WHERE instances.worker_id IS NULL;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",11,2,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0
486,"Вывести ФИО и статус читателей, которые ни разу не брали книгу в библиотеке.","SELECT
full_name_r
, reader_status
FROM readers LEFT OUTER JOIN take_book
ON readers.reader_id = take_book.reader_id
WHERE take_book.reader_id IS NULL;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",11,2,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0
487,"Посчитать количество экземпляров каждой книги, выпущенной в 2015 году. В запросе использовать INNER JOIN.","SELECT
name
, COUNT(instance_id)
FROM instances INNER JOIN books ON instances.book_id = books.book_id WHERE pub_year = '2015' GROUP BY name;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",11,2,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0
488,"Вывести для каждого студента сумму его штрафов за задержку книг, книги должны быть взяты читателями после 2019-11-01, упорядочить имена в алфавитном порядке. Если штраф отсутствует, вывести 0, можно использовать COALESCE.","SELECT
full_name_r
, COALESCE(SUM(fine), 0)
FROM readers INNER JOIN take_book ON readers.reader_id = take_book.reader_id WHERE fixing_date > '2019-11-01' GROUP BY take_book.reader_id ORDER BY full_name_r;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",11,2,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0
489,"Вывести ФИО сотрудника, должность и количество выданных им книг. Выбрать сотрудников с должностью 'директор' или 'библиотекарь'. В запросе использовать соединение INNER JOIN.","SELECT
full_name
, position
, COUNT(reader_id)
FROM take_book AS t INNER JOIN workers AS w
ON t.worker_id = w.worker_id
WHERE position = 'директор' OR position = 'библиотекарь'
GROUP BY t.worker_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",11,2,1,1,1,1,0,1,1,0,0,0,1,0,0,0,0
490,"Вывести название читального зала, полное имя работника, должность работника и дату выдачи книги для всех операций по выдаче книг, произведённых в период с 2019-01-01 по 2019-12-15.","SELECT
name
, full_name
, position
, fixing_date
FROM reading_rooms INNER JOIN take_book ON reading_rooms.hall_number = take_book.hall_number INNER JOIN workers ON take_book.worker_id = workers.worker_id WHERE fixing_date BETWEEN '2019-01-01' AND '2019-12-15';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",11,2,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0
491,"Вывести ФИО и номер телефона читателей, а также название книг, которые они до сих пор не принесли, хоть и формальный день сдачи уже прошел.","SELECT
full_name_r
, phone
, name
FROM readers
JOIN take_book ON readers.reader_id = take_book.reader_id
JOIN instances USING (instance_id)
JOIN books USING (book_id)
WHERE f_return_date < CURRENT_DATE AND return_date IS NULL;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",11,2,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0
492,Вывести неповторяющиеся жанры книг и количество выданных за всё время экземпляров для каждого из этих жанров как 'give out'.,"SELECT
genre
, COUNT(t.instance_id) AS 'give out'
FROM (
        books AS b INNER JOIN instances AS i
        ON b.book_id = i.book_id
) INNER JOIN take_book AS t
ON i.instance_id = t.instance_id
GROUP BY genre;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",11,3,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0
493,"Вывести из таблиц readers, take_book, books ФИО читателя(full_name_r), дату выдачи книги(fixing_date), название книги(name). Использовать INNER JOIN.","SELECT
full_name_r
, fixing_date
, name
FROM readers AS r INNER JOIN take_book AS t INNER JOIN instances AS i INNER JOIN books AS b
ON r.reader_id = t.reader_id AND t.instance_id = i.instance_id AND i.book_id = b.book_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",11,3,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0
494,"Для всех читальных залов вместимостью больше 40 вывести число раз, когда книгу брал доктор наук. Учитывать только те случаи, когда книгу выдавал работник с высшим образованием. В запросе использовать INNER JOIN.","SELECT
name
, COUNT(*)
FROM readers INNER JOIN take_book ON readers.reader_id = take_book.reader_id AND science_degree = 'доктор наук' INNER JOIN reading_rooms ON take_book.hall_number = reading_rooms.hall_number AND capacity > 40 INNER JOIN workers ON take_book.worker_id = workers.worker_id AND education = 'высшее' GROUP BY name;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",11,4,1,1,1,1,0,1,1,0,0,0,1,0,0,0,0
495,"Вывести ФИО и идентификатор работников (без повторений), которые ни разу не оформляли экземпляры книг, но выдавали книги читателям с собой.","SELECT
full_name
, workers.worker_id
FROM workers LEFT OUTER JOIN instances
ON workers.worker_id = instances.worker_id
JOIN take_book ON workers.worker_id = take_book.worker_id
WHERE instances.worker_id IS NULL
AND fixing_date <> f_return_date
GROUP BY worker_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",11,4,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0
496,"Для всех не списанных книг отечественного производителя вывести число раз, когда книгу брал доктор наук, в запросе использовать INNER JOIN.","SELECT
name
, COUNT(*)
FROM readers INNER JOIN take_book ON readers.reader_id = take_book.reader_id AND science_degree = 'доктор наук' INNER JOIN instances ON take_book.instance_id = instances.instance_id AND instances.status <> 'Списан' INNER JOIN books ON instances.book_id = books.book_id AND pub_type = 'отечественное' GROUP BY name;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",11,4,1,1,1,1,0,1,1,0,0,0,1,0,0,0,0
497,"Вывести ФИО работника, дату выдачи и название выдаваемой книги, упорядочить данные по возрастанию даты выдачи. Использовать INNER JOIN.","SELECT
full_name
, fixing_date
, name
FROM workers AS w INNER JOIN take_book AS t ON w.worker_id = t.worker_id
INNER JOIN instances AS i ON t.instance_id = i.instance_id
INNER JOIN books AS b ON i.book_id = b.book_id
ORDER BY fixing_date ASC;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",11,4,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0
498,"Вывести названия и авторов книг, экземпляры которых были выданы читателям меньше 5 раз.","SELECT DISTINCT
    b.name
    , b.author
FROM
    books AS b
JOIN
    instances AS i ON b.book_id = i.book_id
JOIN
    (
        SELECT tb.instance_id
        FROM
            take_book AS tb
        GROUP BY
            tb.instance_id
        HAVING
            COUNT(tb.instance_id) < 5
    ) AS t ON i.instance_id = t.instance_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",11,4,1,1,1,0,0,1,1,1,1,0,1,0,0,0,0
499,"Вывести ФИО работника, который зарегистрировал максимальное кол-во читателй, кол-во зарегистрированных им читателей(number_of_readers), список идентификаторов читателей(readers) в одну строчку, через запятую, по возрастанию. Использовать INNER JOIN и функцию GROUP_CONCAT(DISTINCT X ORDER BY X ASC/DESC SEPARATOR ', ').","SELECT
full_name
, b AS number_of_readers
, readers
FROM (SELECT
full_name
, COUNT(reader_id) AS b
, GROUP_CONCAT(DISTINCT reader_id ORDER BY reader_id ASC SEPARATOR ', ') AS readers
FROM workers AS w INNER JOIN reader_reg AS r ON w.worker_id = r.worker_id
GROUP BY r.worker_id) AS c
WHERE b = ANY(SELECT MAX(r) FROM (SELECT
worker_id
, COUNT(reader_id) AS r
FROM reader_reg
GROUP BY worker_id) AS c1);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",11,5,1,1,1,0,0,1,1,0,1,1,1,0,0,0,0
500,"Вывести название книги, жанр и число раз, когда не списанную книгу с жанром повесть или рассказ брал кандидат наук, в запросе использовать INNER JOIN.","SELECT
name
, genre
, COUNT(*)
FROM readers INNER JOIN take_book
ON readers.reader_id = take_book.reader_id
INNER JOIN instances
ON take_book.instance_id = instances.instance_id
INNER JOIN books
ON instances.book_id = books.book_id
WHERE genre = 'повесть' OR genre = 'рассказ' AND science_degree = 'кандидат наук'
AND instances.status = 'Удовлетворительно'
GROUP BY instances.book_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",11,5,1,1,1,1,0,1,1,0,0,0,1,0,0,0,0
501,"Для работников, которые выдали количество экземпляров, превышающее среднее количество выданных экземпляров, вывести ФИО работника, кол-во выданных им экземпляров книг(number_of_books) и список идентификаторов экземпляров в одну строчку, через запятую, по убыванию. Использовать INNER JOIN и функцию GROUP_CONCAT(DISTINCT X ORDER BY X ASC/DESC SEPARATOR ', ').","SELECT
full_name
, b AS number_of_books
, books
FROM (SELECT
full_name
, COUNT(instance_id) AS b
, GROUP_CONCAT(DISTINCT instance_id ORDER BY instance_id DESC SEPARATOR ', ') AS books
FROM workers AS w INNER JOIN take_book AS t ON w.worker_id = t.worker_id
GROUP BY t.worker_id) AS c
WHERE b >= ALL(SELECT AVG(b) FROM (SELECT
worker_id
, COUNT(worker_id) AS b
FROM take_book
GROUP BY worker_id) AS c1);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",11,5,1,1,1,0,0,1,1,0,1,1,1,0,0,0,0
502,"Вывести ФИО(full_name), должность(position) работников библиотеки, которые ни разу не регистрировали новых читателей.","SELECT
full_name
, position
FROM workers AS w LEFT JOIN reader_reg AS r
ON w.worker_id = r.worker_id
WHERE r.worker_id IS NULL;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",12,2,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0
503,"Посчитать количество экземпляров каждой книги издательства ‘Лань’, в запросе использовать RIGHT JOIN.","SELECT
name
, COUNT(instance_id)
FROM instances RIGHT JOIN books ON instances.book_id = books.book_id WHERE publisher = 'Лань' GROUP BY name;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",12,2,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0
504,Посчитать сколько раз брал книги каждый студент группы M0010. В запросе использовать соединение RIGHT JOIN.,"SELECT
full_name_r
, COUNT(take_book.reader_id)
FROM take_book RIGHT JOIN readers ON take_book.reader_id = readers.reader_id WHERE reader_groups = 'M0010' GROUP BY full_name_r;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",12,2,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0
505,"Вывести для каждого читального зала: название зала, количество взятых в этом зале экземпляров книг, количество работников, которые выдавали книги в этом зале и количество авторов, размещенных в зале. Назвать соответствующие столбцы следующим образом: 'Количество экземпляров', 'Количество работников', 'Количество авторов'. Выдача книг должна осуществляется с 2019-01-01 и не должна касаться списанных книг.  ","SELECT
    reading_rooms.name
    , COUNT(DISTINCT take_book.instance_id) AS ""Количество экземпляров""
    , COUNT(DISTINCT take_book.worker_id) AS ""Количество работников""
    , COUNT(DISTINCT author) AS ""Количество авторов""
FROM
    reading_rooms
LEFT JOIN
    take_book ON reading_rooms.hall_number = take_book.hall_number
LEFT JOIN
    instances USING (instance_id)
LEFT JOIN
    books USING (book_id)
WHERE
    status = 'Удовлетворительно' AND fixing_date > '2019-01-01'
GROUP BY
    reading_rooms.hall_number;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",12,5,1,1,1,1,0,1,1,0,0,0,0,1,0,0,0
506,"Вывести ФИО, идентификатор и образование работников, которые ни разу не регистрировали новых читателей, но хоть раз выдывали книги в жанре роман.","SELECT
    full_name
    , workers.worker_id
    , education
FROM
    workers
LEFT OUTER JOIN
    reader_reg ON workers.worker_id = reader_reg.worker_id
LEFT JOIN (
    SELECT DISTINCT t.worker_id
    FROM
        take_book AS t
    JOIN
        instances ON t.instance_id = instances.instance_id
    JOIN
        books USING (book_id)
    WHERE
        genre = 'роман'
) AS filtered_workers ON workers.worker_id = filtered_workers.worker_id
WHERE
    reader_reg.worker_id IS NULL
    AND filtered_workers.worker_id IS NOT NULL
GROUP BY
    workers.worker_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",12,5,1,1,1,1,0,0,0,0,1,0,0,1,0,0,0
507,"Вывести для каждого работника в колонки: 'Регистрация читателей', 'Выдача книг', 'Регистрация экземпляров', сколько раз он проделывал каждую из этих работ. Если работник такой работы не делал – вывести 0 (можно использовать COALESCE).","SELECT
    workers.full_name
    , COALESCE(count_1, 0) AS 'Регистрация читателей'
    , COALESCE(count_2, 0) AS 'Выдача книг'
    , COALESCE(count_3, 0) AS 'Регистрация экземпляров'
FROM
    workers
LEFT JOIN
    (SELECT
worker_id
, COUNT(worker_id) AS count_1
FROM reader_reg GROUP BY worker_id) AS temp_1
ON
    workers.worker_id = temp_1.worker_id
LEFT JOIN
    (SELECT
worker_id
, COUNT(worker_id) AS count_2
FROM take_book GROUP BY worker_id) AS temp_2
ON
    workers.worker_id = temp_2.worker_id
LEFT JOIN
    (SELECT
worker_id
, COUNT(worker_id) AS count_3
FROM instances GROUP BY worker_id) AS temp_3
ON
    workers.worker_id = temp_3.worker_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",12,5,1,1,1,0,0,1,1,0,1,0,0,1,0,0,0
508,"Вынести столбцы с названиями 'name', 'occupation'. В  'name' будут хранится ФИО работающих преподавателей и ФИО работников с высшим образованием. В 'occupation' будут хранится значения должностей соответствующих работников и вида занятости преподавателей. Использовать объединение запросов.","SELECT
full_name_r AS name
, occupation
FROM readers WHERE reader_status = 'работает'
UNION DISTINCT
SELECT
full_name
, position
FROM workers WHERE education = 'высшее';
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",13,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0
509,"Посчитать, сколько раз читатели брали книги с собой или в зал. Вывести 'количество выдачи' и 'тип' со значениями: в зал, с собой.","SELECT
COUNT(*) AS 'количество выдачи'
, 'в зал' AS 'тип'
FROM take_book
WHERE fixing_date = f_return_date
UNION DISTINCT
SELECT
COUNT(*)
, 'с собой'
FROM take_book
WHERE fixing_date <> f_return_date;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",13,2,1,1,0,0,0,1,0,0,0,0,0,0,1,0,0
510,"Вывести полные имена(full_name), образование(education) работников и дату регистрации(date_reg) для работников, которые регистрировали экземпляры книг или читателей в период времени от 2019-08-01 до 2020-02-01. Использовать UNION.","(SELECT
full_name
, education
, date_reg
FROM workers, instances
WHERE instances.worker_id = workers.worker_id AND date_reg BETWEEN '2019-08-01' AND '2020-02-01')
UNION DISTINCT
(SELECT
full_name
, education
, date_reg
FROM workers, reader_reg
WHERE reader_reg.worker_id = workers.worker_id AND date_reg BETWEEN '2019-08-01' AND '2020-02-01');
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",13,2,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0
511,"Вывести полные имена(full_name), должность(position) работников. Работники, которые регистрировали экземпляры книг  в период времени от 2012-01-01 до 2015-01-01 или выдавали книги в период времени от 2019-01-01 до 2020-01-01. Использовать UNION.","(SELECT
full_name
, position
FROM workers, instances
WHERE instances.worker_id = workers.worker_id AND date_reg BETWEEN '2012-01-01' AND '2015-01-01')
UNION DISTINCT
(SELECT
full_name
, position
FROM workers, take_book
WHERE take_book.worker_id = workers.worker_id AND fixing_date BETWEEN '2019-01-01' AND '2020-01-01');
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",13,2,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0
512,"Посчитать, сколько книг выдал каждый работник в период с '2019-10-05' по '2020-05-05', если работник не выдал ни одной книги за этот период – вывести 0. Использовать UNION.","SELECT
full_name
, COUNT(take_book.worker_id)
FROM take_book, workers WHERE take_book.worker_id = workers.worker_id AND fixing_date BETWEEN '2019-10-05' AND '2020-05-05' GROUP BY take_book.worker_id
UNION DISTINCT
SELECT
full_name
, 0
FROM workers WHERE worker_id NOT IN (SELECT worker_id FROM take_book WHERE fixing_date BETWEEN '2019-10-05' AND '2020-05-05');
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",13,4,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0
513,"Вывести информацию о том, сколько книг выдал каждый сотрудник в период с '2019-06-10' по '2019-12-05'. Если сотрудник в этот период не выдал ни одной книги, вывести 0. Информацию вывести в следующем порядке: ФИО, должность и количество выданных книг. В запросе использовать объединение запросов UNION.","SELECT
full_name
, position
, COUNT(take_book.worker_id)
FROM take_book, workers
WHERE take_book.worker_id = workers.worker_id
AND fixing_date BETWEEN '2019-06-10' AND '2019-12-05'
GROUP BY take_book.worker_id
UNION DISTINCT
SELECT
full_name
, position
, 0
FROM workers
WHERE worker_id NOT IN (SELECT worker_id FROM take_book WHERE fixing_date BETWEEN '2019-06-10' AND '2019-12-05');
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",13,4,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0
514,"Посчитать, сколько книг выдал каждый работник в период с '2019-12-01' по '2020-04-05', если работник не выдал ни одной книги за этот период – вывести 0. Вывести ФИО(full_name), опыт работы(work_experience) и сколько работник выдал книг. Вывести только тех работников, которые выдали 6 или меньше книг, упорядочить данные по убыванию количества выданных книг.","SELECT
full_name
, work_experience
, a
FROM (
        SELECT
full_name
, work_experience
, COUNT(take_book.worker_id) AS a
        FROM take_book, workers
        WHERE take_book.worker_id = workers.worker_id
        AND fixing_date BETWEEN '2019-12-01' AND '2020-04-05'
        GROUP BY take_book.worker_id
        HAVING COUNT(take_book.worker_id) <= 6
        UNION DISTINCT
        SELECT
full_name
, work_experience
, 0
        FROM workers
        WHERE worker_id NOT IN (
                SELECT worker_id FROM take_book WHERE fixing_date BETWEEN '2019-12-01' AND '2020-04-05'
        )
) AS s
ORDER BY a DESC;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",13,5,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0
515,"Для всех не списанных книг отечественного и иностранного производителя вывести число раз, когда книгу брали преподаватели. Считать только не списанные экземпляры. Вывести название книги, тип издания и сколько раз книга выдавалась преподавателям. Учесть нулевые значения. Упорядочить данные по убыванию количества раз выдачи книг. В запросе использовать INNER JOIN, UNION. ","SELECT
name
, pub_type
, SUM(number_of_times) AS number_of_times
FROM (
    SELECT
book_id
, name
, pub_type
, COUNT(readers.reader_id) AS number_of_times
    FROM readers
    INNER JOIN take_book ON readers.reader_id = take_book.reader_id

    INNER JOIN instances USING (instance_id)

    INNER JOIN books USING (book_id)
    WHERE
    occupation = 'преподаватель'
    AND write_off_date IS NULL
    AND pub_type IN ('иностранное', 'отечественное')
    GROUP BY book_id

    UNION DISTINCT

    SELECT
book_id
, name
, pub_type
, 0 AS number_of_times
    FROM books
) AS a
GROUP BY book_id, name, pub_type
ORDER BY number_of_times DESC;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",13,5,1,1,1,1,0,1,1,0,0,1,1,0,1,0,0
516,"Вывести из таблиц reading_rooms, take_book названия читальных залов, их идентификаторы и столбец под названием 'number of visits' с максимальным и минимальным значениям количества посещений.","SELECT
name
, t.hall_number
, COUNT(reader_id) AS 'number of visits'
FROM take_book AS t, reading_rooms AS r
WHERE t.hall_number = r.hall_number GROUP BY hall_number HAVING COUNT(reader_id) = (
        SELECT MAX(a) FROM (
                SELECT
hall_number
, COUNT(*) AS a
FROM take_book GROUP BY hall_number
        )
AS a)
UNION DISTINCT
SELECT
name
, t.hall_number
, COUNT(reader_id) AS 'number of visits'
FROM take_book AS t, reading_rooms AS r
WHERE t.hall_number = r.hall_number GROUP BY hall_number HAVING COUNT(reader_id) = (
        SELECT MIN(a) FROM (
                SELECT
hall_number
, COUNT(*) AS a
FROM take_book GROUP BY hall_number
        )
AS b);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",13,5,1,1,1,0,0,1,1,1,1,0,0,0,1,0,0
517,"Для каждого зала найти, сколько книг каждого жанра было взято в соответствующем зале, если таких книг не было – вывести 0, в запросе использовать UNION.","SELECT
reading_rooms.name
, genre
, COUNT(reading_rooms.hall_number)
FROM reading_rooms, take_book, instances, books WHERE take_book.instance_id = instances.instance_id AND instances.book_id = books.book_id AND reading_rooms.hall_number = take_book.hall_number GROUP BY reading_rooms.name, genre
UNION DISTINCT
SELECT
temp_1.name
, temp_1.genre
, 0
FROM (SELECT DISTINCT
reading_rooms.name
, genre
FROM reading_rooms, books) AS temp_1 LEFT JOIN (SELECT
reading_rooms.name
, genre
, COUNT(reading_rooms.hall_number)
FROM reading_rooms, take_book, instances, books WHERE take_book.instance_id = instances.instance_id AND instances.book_id = books.book_id AND reading_rooms.hall_number = take_book.hall_number GROUP BY reading_rooms.name, genre) AS temp_2 ON temp_1.name = temp_2.name AND temp_1.genre = temp_2.genre WHERE temp_2.name IS null;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",13,5,1,1,1,1,0,1,1,0,1,0,0,1,1,0,0
518,"Вывести всю информацию о читателях, которые хоть раз брали книгу. Использовать EXISTS.","SELECT * FROM readers AS r
WHERE EXISTS (
        SELECT * FROM take_book AS t WHERE r.reader_id = t.reader_id
);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",14,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0
519,"Вывести названия читальных залов, в которых брали больше семи книг. Использовать EXISTS.","SELECT DISTINCT reading_rooms.name
FROM
    reading_rooms
WHERE
    EXISTS (
        SELECT 1
        FROM take_book
        WHERE take_book.hall_number = reading_rooms.hall_number
        GROUP BY hall_number
        HAVING COUNT(hall_number) > 7
    );
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",14,2,1,1,1,0,0,1,1,1,0,0,0,0,0,1,0
520,"Вывести всю информацию о книгах, которые ни разу не брали. Использовать EXISTS.","SELECT * FROM books AS b
WHERE NOT EXISTS (
        SELECT i.book_id
        FROM take_book AS t, instances AS i
        WHERE i.instance_id = t.instance_id AND i.book_id = b.book_id
        GROUP BY i.book_id
);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",14,2,1,1,1,1,0,0,1,0,0,0,0,0,0,1,0
521,"Вывести всю информацию о читальном зале, в котором брали книги 10 или больше раз.","SELECT * FROM reading_rooms AS r
WHERE EXISTS (
        SELECT hall_number
    FROM take_book AS t
    WHERE t.hall_number = r.hall_number
    GROUP BY hall_number
    HAVING COUNT(*) >= 10
);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",14,2,1,1,1,0,0,1,1,1,0,0,0,0,0,1,0
522,"Вывести неповторяющиеся ФИО и дату регистрации работающих(reader_status='работает') читателей, которые ни разу не имели штраф за книгу с момента регистрации. Упорядочить данные в алфавитном порядке.","SELECT DISTINCT
full_name_r
, date_reg
FROM readers, reader_reg WHERE readers.reader_id = reader_reg.reader_id
AND readers.reader_status = 'работает'
  AND NOT EXISTS (
    SELECT 1
    FROM take_book
    WHERE take_book.reader_id = readers.reader_id
      AND take_book.fine > 0
  )
ORDER BY full_name_r ASC;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",14,3,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0
523,"Вывести полные имена читателей, которые никогда не брали учебную литературу, упорядочить имена в алфавитном порядке. Использовать EXISTS.","SELECT full_name_r FROM readers WHERE NOT EXISTS (SELECT DISTINCT reader_id FROM take_book, instances, books WHERE take_book.instance_id = instances.instance_id AND books.book_id = instances.book_id AND readers.reader_id = reader_id AND category = 'учебное') ORDER BY full_name_r;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",14,3,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0
524,"Вывести названия читальных залов, в которых расположены книги, имеющие больше одного автора (в подобном случае ФИО авторов перечислены через запятую, можно использовать LOCATE). Соответсвующие книги должны быть взяты читателями больше одного раза. Использовать EXISTS.","SELECT name FROM reading_rooms WHERE EXISTS (SELECT hall_number FROM take_book, instances, books WHERE take_book.instance_id = instances.instance_id AND books.book_id = instances.book_id AND LOCATE(',', author) <> 0 AND hall_number = reading_rooms.hall_number GROUP BY hall_number HAVING COUNT(hall_number) > 1);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",14,3,1,1,1,1,0,1,1,1,0,0,0,0,0,1,0
525,"Вывести названия и тип читальных залов, в которых выдавались книги под авторством Козлова Э.В., выпущенные издательством Физматлит. Использовать EXISTS.","SELECT
name
, species
FROM reading_rooms
WHERE EXISTS (SELECT hall_number
        FROM take_book, instances, books
    WHERE take_book.instance_id = instances.instance_id
    AND books.book_id = instances.book_id
    AND publisher = 'Физматлит'
    AND author LIKE '%Козлов Э.В.%'
    AND reading_rooms.hall_number = take_book.hall_number
    GROUP BY hall_number
);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",14,3,1,1,1,1,1,0,1,0,0,0,0,0,0,1,0
526,"Вывести всю информацию о работнике, который в период с '2020-03-01' по '2020-04-01' выдал 4 или больше книг. Использовать предикат EXISTS.","SELECT * FROM workers AS w
WHERE EXISTS
(SELECT
worker_id
, COUNT(*)
FROM take_book AS t
WHERE fixing_date BETWEEN '2020-03-01' AND '2020-04-01' AND w.worker_id = t.worker_id
GROUP BY worker_id
HAVING COUNT(*) >= 4);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",14,4,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0
527,"Вывести всю информацию о работниках, которые ни разу не регистрировали читателей или экземпляры книг. Использовать EXISTS.","SELECT * FROM workers AS w
WHERE NOT EXISTS (
        SELECT worker_id FROM (
                SELECT DISTINCT worker_id FROM take_book
        UNION DISTINCT
        SELECT DISTINCT worker_id FROM instances
        )
    AS a WHERE a.worker_id = w.worker_id
);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",14,3,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0
528,"Вывести идентификатор, названия и тип читальных залов, в которых выдавалось 5 или больше книг с собой. Выбрать не списанные книги отечественного издания. Использовать EXISTS.","SELECT
hall_number
, name
, species
FROM reading_rooms
WHERE EXISTS (SELECT hall_number
        FROM take_book, instances, books
    WHERE take_book.instance_id = instances.instance_id
    AND books.book_id = instances.book_id
        AND fixing_date <> f_return_date
    AND pub_type = 'отечественное'
    AND write_off_date IS null
    AND reading_rooms.hall_number = take_book.hall_number
    GROUP BY hall_number
    HAVING COUNT(hall_number) >= 5
);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",14,4,1,1,1,1,0,1,1,1,0,0,0,0,0,1,0
529,"Вывести полные имена и вид занятости читателей, читательские билеты которых оформляла Лыткина Елена Вадимовна и которые хоть раз брали учебное пособие. В запросе использовать EXISTS.","SELECT
full_name_r
, occupation
FROM readers WHERE EXISTS (SELECT reader_id FROM reader_reg WHERE worker_id IN (SELECT worker_id FROM workers WHERE full_name = 'Лыткина Елена Вадимовна') AND reader_id = readers.reader_id) AND EXISTS (SELECT reader_id FROM take_book, instances, books WHERE take_book.instance_id = instances.instance_id AND books.book_id = instances.book_id AND genre = 'учебное пособие' AND reader_id = readers.reader_id GROUP BY reader_id);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",14,5,1,1,1,1,0,0,1,0,1,1,0,0,0,1,0
530,"Вывести полные имена сотрудников, которые оформили больше всего книг художественной литературы и которые ни разу не выдавали книгу читателю. В запросе использовать EXISTS. ","SELECT full_name
FROM workers
WHERE NOT EXISTS (
    SELECT 1
    FROM take_book
    WHERE take_book.worker_id = workers.worker_id
)
AND workers.worker_id IN (
    SELECT instances.worker_id
    FROM instances
    WHERE EXISTS (
        SELECT 1
        FROM books
        WHERE category = 'литературно-художестенное'
            AND books.book_id = instances.book_id
    )
    GROUP BY instances.worker_id
    HAVING COUNT(worker_id) = (
        SELECT MAX(inst)
        FROM (
            SELECT COUNT(instances.worker_id) AS inst
            FROM instances
            WHERE EXISTS (
                SELECT 1
                FROM books
                WHERE category = 'литературно-художестенное'
                    AND books.book_id = instances.book_id
            )
            GROUP BY instances.worker_id
        ) AS temp
    )
);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",14,5,1,1,1,1,0,1,1,1,1,1,0,0,0,1,0
531,"Вывести полные имена и вид занятости, статус и телефон читателей, читательские билеты которых оформляла Ларионова Лилия Львовна и которые хоть раз брали монографию. В запросе использовать EXISTS.","SELECT
full_name_r
, occupation
, reader_status
, phone
FROM readers
WHERE EXISTS (SELECT reader_id
        FROM reader_reg
    WHERE worker_id IN (SELECT worker_id
                FROM workers
        WHERE full_name = 'Ларионова Лилия Львовна')
        AND reader_id = readers.reader_id)
AND EXISTS (SELECT reader_id
        FROM take_book, instances, books
        WHERE take_book.instance_id = instances.instance_id
        AND books.book_id = instances.book_id
        AND genre = 'монография'
        AND reader_id = readers.reader_id
        GROUP BY reader_id);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",14,5,1,1,1,1,0,0,1,0,1,1,0,0,0,1,0
532,"Вывести полные имена и должность сотрудников, которые оформили больше всего книг учебной литературы и которые ни разу не оформляли чит. билеты новым читателям. В запросе использовать EXISTS. ","SELECT
full_name
, position
FROM workers LEFT JOIN reader_reg
ON workers.worker_id = reader_reg.worker_id
WHERE reader_reg.worker_id IS null
AND workers.worker_id IN (SELECT worker_id
        FROM instances
    WHERE EXISTS (SELECT book_id
                FROM books
        WHERE category = 'учебное'
        AND book_id = instances.book_id)
        GROUP BY instances.worker_id
        HAVING COUNT(worker_id) = (SELECT MAX(inst)
                FROM (SELECT COUNT(instances.worker_id) AS inst
                        FROM instances WHERE EXISTS (SELECT book_id
                                FROM books WHERE category = 'учебное'
                AND book_id = instances.book_id)
                        GROUP BY instances.worker_id)
                AS temp
        )
);
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",14,5,1,1,1,1,0,1,1,1,1,1,0,1,0,1,0
533,"Посчитать количество книг по жанрам. Вывести жанр и столбец со значениями 'Достаточно' или 'Недостаточно'. Если количество книг определенного жанра меньше 3, то вывести значение 'Недостаточно', в противоположном случае вывести значение 'Достаточно'.","SELECT
genre
, IF(COUNT(book_id) >= 3, 'Достаточно', 'Недостаточно ')
FROM books GROUP BY genre;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",15,2,1,1,0,0,0,1,1,0,0,0,0,0,0,0,1
534,"Вывести названия, авторов книг и значение ‘Old’ или ‘New’. Если книга выпущена после 2018 года, то вывести значение ‘New’, в противном случае – ‘Old’. Названия книг вывести в алфавитном порядке. ","SELECT
name
, author
, IF(pub_year > 2018, 'New', 'Old') AS status
FROM books ORDER BY name;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",15,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1
535,"Для каждого взятого экземпляра книги вывести дату закрепления читателем книги и значение ‘Возвращена’, если читатель уже вернул соответствующую книгу, или ‘Не возвращена’, если книга еще находится у читателя. Идентификаторы экземпляров вывести в порядке возрастания. ","SELECT
instance_id
, fixing_date
, IF(return_date IS NOT null, 'Возвращена', 'Не возвращена') AS status
FROM take_book ORDER BY instance_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",15,2,1,1,0,1,0,0,0,0,0,0,0,0,0,0,1
536,"Вывести название читального зала, вместимость со значениями 'Малый', если вместимость меньше или равна 40; 'Средний', если вместимость больше 40, но меньше 60; 'Большой', если вместимость больше или равна 60.","SELECT
name
, CASE
        WHEN capacity >= 60
                THEN 'Большой'
        WHEN capacity > 40 AND capacity < 60
                THEN 'Средний'
                WHEN capacity <= 40
                        THEN 'Малый'
END AS capacity
FROM reading_rooms;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",15,2,1,1,0,1,0,0,0,0,0,0,0,0,0,0,1
537,"Для каждого работника вывести его полное имя и стаж со значением 'Более 10 лет', если стаж работника больше 10 лет, 'От 5 до 10 лет' – стаж работника имеет значение от 5 до 10 лет, 'Менее 5 лет'– стаж работника меньше 5 лет, соответствующую колонку назвать 'Стаж'.","SELECT
full_name
, CASE
        WHEN work_experience > 10 THEN 'Более 10 лет'
        WHEN work_experience BETWEEN 5 AND 10 THEN 'От 5 до 10 лет'
        WHEN work_experience < 5 THEN 'Менее 5 лет'
END AS 'Стаж' FROM workers;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",15,3,1,1,0,1,1,0,0,0,0,0,0,0,0,0,1
538,"Вывести названия книг, которые никто никогда не брал, их идентификатор и столбец 'action' со значениями 'keep', если книга была выпущена в 2010 году или позже, и 'write off', если до 2010 года.","SELECT
name
, b.book_id
, IF(
        COUNT(t.instance_id) = 0 AND pub_year < 2010, 'write off', 'keep'
) AS action FROM (
        books AS b JOIN instances AS i
    ON b.book_id = i.book_id
)
LEFT JOIN take_book AS t
ON i.instance_id = t.instance_id
GROUP BY b.book_id, name
HAVING COUNT(t.instance_id) = 0;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",15,4,1,1,1,1,0,1,1,1,0,0,0,1,0,0,1
539,"Для каждого студента вывести его полное имя и номер курса, если студент относится к группе M0010 – вывести ‘1 курс’, 'T0023' или 'M0220' – вывести ‘2 курс’, 'T0033' – вывести ‘3 курс’, соответствующую колонку назвать ‘class’.","SELECT
full_name_r
, CASE
        WHEN reader_groups = 'M0010' THEN '1 курс'
        WHEN reader_groups = 'T0023' OR reader_groups = 'M0220' THEN '2 курс'
        WHEN reader_groups = 'T0033' THEN '3 курс'
END AS class FROM readers WHERE reader_groups IS NOT null;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",15,3,1,1,0,1,0,0,0,0,0,0,0,0,0,0,1
540,"Вывести ФИО работников, которые занимаются регистрацией читателей,  столбец 'conclusion' со значениями : 'Хороший работник', если число зарегистрированных им читателей больше или равно среднему числу зарегистрированных читателей между работниками; 'Плохой работник', если число зарегистрированных им читателей окажется меньше среднего значения. Для корректного вывода результата, рекомендуется использовать математическую функцию ROUND(X) при работе со средними арифметическими числами.","SELECT
full_name
, IF(
        COUNT(reader_id) >= (
                SELECT ROUND(AVG(a)) FROM (
                        SELECT COUNT(reader_id) AS a FROM reader_reg GROUP BY worker_id
                ) AS a
        ), 'Хороший работник', 'Плохой работник'
) AS conclusion
FROM workers AS w JOIN reader_reg AS r
ON w.worker_id = r.worker_id
GROUP BY w.worker_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",15,4,1,1,1,0,0,1,1,0,1,0,1,0,0,0,1
541,"Вывести ФИО работников, которые занимаются регистрацией экземпляров книг и столбец 'conclusion' со значениями: 'Хороший работник', если число зарегистрированных им экземпляров больше или равно среднему числу зарегистрированных экземпляров между работниками; 'Плохой работник', если число зарегистрированных им экземпляров окажется меньше среднего значения. Для корректного вывода результата рекомендуется использовать математическую функцию ROUND(X) при работе со средним арифметическим.","SELECT
full_name
, IF(
        COUNT(instance_id) >= (
                SELECT ROUND(AVG(a)) FROM (
                        SELECT COUNT(instance_id) AS a FROM instances GROUP BY worker_id
                ) AS a
        ), 'Хороший работник', 'Плохой работник'
) AS conclusion
FROM workers AS w JOIN instances AS i
ON w.worker_id = i.worker_id
GROUP BY w.worker_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",15,4,1,1,1,0,0,1,1,0,1,0,1,0,0,0,1
542,"Для каждого жанра вывести количество книг, относящихся к этому жанру, и значение ‘Популярный’, если количество раз, когда читатели брали экземпляры этого жанра, превышает 7, в ином случаи – ‘Непопулярный’.","SELECT
temp_1.genre
, books
, IF(b > 7, 'Популярный', 'Непопулярный') AS status
FROM (SELECT
genre
, COUNT(take_book.instance_id) AS b
FROM take_book, instances, books WHERE take_book.instance_id = instances.instance_id AND instances.book_id = books.book_id GROUP BY genre) AS temp_1, (SELECT
genre
, COUNT(genre) AS books
FROM books GROUP BY genre) AS temp_2 WHERE temp_1.genre = temp_2.genre;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",15,4,1,1,1,1,0,1,1,0,0,0,0,0,0,0,1
543,"Посчитать сумму, которую библиотека потратила на приобретение новых книг в 2020 году, если актуальны следующие цены: если категория издания — 'литературно-художественное' и тип издания — 'отечественный', то цена = 870р. за шт.; если категория издания — 'научное' и тип издания — 'отечественный', то цена = 940р. за шт.; если категория издания — 'учебное' и тип издания — 'отечественный', то цена = 630р. за шт.. Все цены увеличиваются на 30%, если тип издания — 'иностранное'.","SELECT SUM(
CASE
WHEN category = 'литературно-художественное' AND pub_type = 'отечественное' THEN number * 870
WHEN category = 'литературно-художественное' AND pub_type = 'иностранное' THEN number * (870 * 1.3)
WHEN category = 'научное' AND pub_type = 'отечественное' THEN number * 940
WHEN category = 'научное' AND pub_type = 'иностранное' THEN number * (940 * 1.3)
WHEN category = 'учебное' AND pub_type = 'отечественное' THEN number * 630
WHEN category = 'учебное' AND pub_type = 'иностранное' THEN number * (630 * 1.3)
END
) AS expense
FROM (
        SELECT
SUM(number) AS number
, category
, pub_type
FROM (
                SELECT
name
, category
, pub_type
, COUNT(instances.book_id) AS number
        FROM instances, books
        WHERE instances.book_id = books.book_id AND date_reg BETWEEN '2020-01-01' AND '2021-01-01'
        GROUP BY instances.book_id
        ) AS temp GROUP BY category, pub_type
) AS q;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",15,5,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1
544,"Рассчитать премию для каждого работника: если суммарное число всех его работ по трем категориям (регистрация читателей, выдача книг или регистрация экземпляров) превышает или равняется 21,  то его премия составит 4800 рублей, если число работ находится в диапазоне от 12 до 21 – 3300 руб., если меньше 12 – 2000 руб., если же работник не выполнил ни одной работы, его премия составит 0 рублей. Использовать UNION ALL.","SELECT
full_name
, CASE
    WHEN cnt >= 21 THEN 4800
    WHEN cnt < 7 AND cnt >= 4 THEN 3300
    WHEN cnt < 4 AND cnt > 0 THEN 2000
    ELSE 0
END AS prize FROM (SELECT
worker_id
, COUNT(*) AS cnt
FROM (
    SELECT worker_id FROM reader_reg
    UNION ALL
    SELECT worker_id FROM instances
    UNION ALL
    SELECT worker_id FROM take_book
) AS temp1 GROUP BY worker_id) AS temp2 JOIN workers ON temp2.worker_id = workers.worker_id;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",15,5,1,1,1,1,0,1,1,0,0,1,1,0,1,0,1
545,"Посчитать сумму, которую библиотека потратила на приобретение новых книг в 2019 году, если актуальны следующие цены: если категория издания(category) — 'литературно-художественное' и книга издана раньше 2018 года, то цена = 540р. за шт.; если категория издания(category) — 'научное' и книга издана раньше 2018 года, то цена = 870р. за шт.; если категория издания(category) — 'учебное' и книга издана раньше 2018 года, то цена = 660р. за шт.. Все цены увеличиваются на 20%, если книга издана позже 2018 года.","SELECT SUM(
CASE
WHEN category = 'литературно-художественное' AND pub_year < 2018 THEN number * 540
WHEN category = 'литературно-художественное' AND pub_year > 2018 THEN number * (540 * 1.2)
WHEN category = 'научное' AND pub_year < 2018 THEN number * 870
WHEN category = 'научное' AND pub_year > 2018 THEN number * (870 * 1.2)
WHEN category = 'учебное' AND pub_year < 2018 THEN number * 660
WHEN category = 'учебное' AND pub_year > 2018 THEN number * (660 * 1.2)
END
) AS expense
FROM (
        SELECT
SUM(number) AS number
, category
, pub_year
FROM (
                SELECT
name
, category
, pub_year
, COUNT(instances.book_id) AS number
        FROM instances, books
        WHERE instances.book_id = books.book_id AND date_reg BETWEEN '2019-01-01' AND '2020-01-01'
        GROUP BY instances.book_id
        ) AS temp GROUP BY category, pub_year
) AS q;
","
CREATE TABLE books (
  book_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  author VARCHAR(60) DEFAULT NULL,
  name VARCHAR(75) NOT NULL,
  genre VARCHAR(45) NOT NULL,
  category VARCHAR(40) NOT NULL,
  publisher VARCHAR(35) NOT NULL,
  pub_year SMALLINT(6) DEFAULT NULL,
  pub_type VARCHAR(30) NOT NULL,
);

CREATE TABLE instances (
  instance_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_id INT(11) NOT NULL,
  status VARCHAR(50) DEFAULT NULL,
  worker_id INT(11) NOT NULL,
  cypher VARCHAR(20) NOT NULL,
  date_reg DATE NOT NULL,
  write_off_date DATE DEFAULT NULL,
  CONSTRAINT R_26 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_1 FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reader_reg (
  library_card INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  date_reg DATE NOT NULL,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  CONSTRAINT R_24 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_23 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE readers (
  reader_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name_r VARCHAR(35) NOT NULL,
  passport VARCHAR(20) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  science_degree VARCHAR(50) DEFAULT NULL,
  occupation VARCHAR(40) NOT NULL,
  education_mode VARCHAR(25) DEFAULT NULL,
  groups VARCHAR(10) DEFAULT NULL,
  status VARCHAR(25) NOT NULL,
);

CREATE TABLE reading_rooms (
  hall_number INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  capacity INT(11) NOT NULL,
  name VARCHAR(60) NOT NULL,
  species VARCHAR(40) NOT NULL,
);

CREATE TABLE take_book (
  op_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  worker_id INT(11) NOT NULL,
  reader_id INT(11) NOT NULL,
  instance_id INT(11) NOT NULL,
  fixing_date DATE NOT NULL,
  return_date DATE DEFAULT NULL,
  f_return_date DATE NOT NULL,
  fine FLOAT DEFAULT NULL,
  hall_number INT(11) NOT NULL,
  CONSTRAINT R_27 FOREIGN KEY (hall_number) REFERENCES reading_rooms (hall_number) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_17 FOREIGN KEY (worker_id) REFERENCES workers (worker_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_18 FOREIGN KEY (reader_id) REFERENCES readers (reader_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT R_19 FOREIGN KEY (instance_id) REFERENCES instances (instance_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE workers (
  worker_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(30) NOT NULL,
  position VARCHAR(50) DEFAULT NULL,
  work_experience SMALLINT(6) DEFAULT NULL,
  birthday DATE NOT NULL,
  education VARCHAR(30) NOT NULL,
);
",15,5,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1
546,Вывести полную информацию обо всех машинах.,"SELECT * FROM car;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
547,Вывести полную информацию обо всех видах топлива.,"SELECT * FROM fuel;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
548,Вывесли полную информацию обо всех водителях.,"SELECT * FROM employee;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
549,Вывести всю информацию об автобазах.,"SELECT * FROM motor_depot;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
550,Вывести информацию о виде и марке топлива.,"SELECT
kind
, fuel_brand
FROM fuel;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
551,"Вывести информацию о гаражах в следующем порядке: идентификатор гаража, адрес гаража.","SELECT
id_garage
, garage_address
FROM garage;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
552,Вывести номера и даты всех заправочных ведомостей. ,"SELECT
num_statement
, date_st
FROM statement;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
553,Вывести фамилии и имена работников.,"SELECT
last_name
, first_name
FROM employee;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
554,"Вывести информацию о заправках в следующем порядке: идентификатор заправки, идентификатор топлива, количество заправленного топлива. ","SELECT
id_refuel
, id_fuel
, fuel_qty
FROM refueling;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
555,"Вывести информацию об автомобилях в следующем порядке: государственный номер, марка, идентификатор водителя, идентификатор гаража. ","SELECT
license_plate
, brand
, id_employee
, id_garage
FROM car;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
556,"Вывести информацию о сотрудниках в следующем порядке: фамилия, имя, должность, квалификация.","SELECT
first_name
, last_name
, position
, qualification
FROM employee;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
557,"Вывести информацию о путевых листах в следующем порядке: номер путевого листа, грузоотправитель, грузополучатель.","SELECT
num_waybill
, consignor
, consignee
FROM waybill;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
558,Машины каких марок есть в базе?,"SELECT DISTINCT brand FROM car;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
559,Вывести уникальную информацию из таблицы Waybill по грузоотправителям и грузополучателям.,"SELECT DISTINCT
consignor
, consignee
FROM waybill;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
560,Вывести уникальные имена сотрудников.,"SELECT DISTINCT first_name FROM employee;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
561,Вывести список пар пунктов погрузки и разгрузки. Пары не должны повторяться.,"SELECT DISTINCT
loading_point
, discharge_point
FROM waybill;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
562,Какие должности занимают работники?,"SELECT DISTINCT position FROM employee;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
563,"Вывести идентификатор для всех заправок, у которых количество топлива превысило 60.","SELECT id_refuel FROM refueling WHERE fuel_qty > 60;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
564,"Вывести полную инофрмацию по заправочным ведомостям, составленным раньше 2020-02-27.","SELECT * FROM statement WHERE date_st < '2020-02-27';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
565,Из таблицы Waybill вывести номера накладных начиная с 21.02.2020.,"SELECT num_waybill FROM waybill WHERE begin_date > '2020-02-21';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
566,"Вывести информацию про количество топлива и идентификатор топлива для машин, которые заправлялись больше чем или на 50 единиц топлива.","SELECT
fuel_qty
, id_refuel
FROM refueling WHERE fuel_qty >= 50;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
567,"Вывести информацию про количество топлива и идентификатор топлива для машин, которые заправлялись меньше, чем на 100 единиц топлива.","SELECT
fuel_qty
, id_refuel
FROM refueling WHERE fuel_qty < 100;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
568,"Вывести информацию по номерам накладным и точкам погрузки, которые были закончены ранее 2020-03-02.","SELECT
num_waybill
, loading_point
FROM waybill WHERE end_date < '2020-03-02';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
569,"Вывести информацию по номеру накладных, грузоотправителю и грузополучателю при условии, что дата окончания ранее 01.03.2020.","SELECT
num_waybill
, consignor
, consignee
FROM waybill WHERE end_date < '2020-03-01';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
570,"Вывести номера накладных, которые были созданы 25.02.2020.","SELECT DISTINCT num_waybill FROM waybill WHERE begin_date = '2020-02-25';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",2,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
571,"Вывести номера накладных, которые были закончены позднее 2020-02-25.","SELECT DISTINCT num_waybill FROM waybill WHERE end_date > '2020-02-25';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",2,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
572,"Вывести бренды топлива, которое не является бензином.","SELECT DISTINCT fuel_brand FROM fuel WHERE kind <> 'petrol';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",2,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
573,Вывести уникальные имена и фамилии сотрудников с ненулевой квалификацией.,"SELECT DISTINCT
first_name
, last_name
FROM employee WHERE qualification <> 0;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",2,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
574,"Вывести фамилии работников, отсортировать в алфавитном порядке.","SELECT last_name FROM employee ORDER BY last_name ASC;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",2,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
575,Вывести номера и даты всех заправочных ведомостей в порядке убывания номера.,"SELECT
num_statement
, date_st
FROM statement ORDER BY num_statement DESC;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",2,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
576,Для всех ведомостей вывести информацию об идентификаторе ведомости и фамилии работника. ,"SELECT
id_statement
, last_name
FROM statement, employee WHERE employee.id_employee = statement.id_employee;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
577,"Вывести информацию про заправки, указать идентификаторы заправок и номера соответствующих накладных. ","SELECT
id_refuel
, waybill.num_waybill
FROM refueling, waybill WHERE refueling.id_waybill = waybill.id_waybill;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
578,"Вывести информацию в следующем порядке: гос. номер машины, номера гаража, за которым она закреплена, и адрес гаража.","SELECT
car.license_plate
, garage.num_garage
, garage_address
FROM garage, car WHERE car.id_garage = garage.id_garage;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
579,"Для всех автомобилей, за которыми закреплены водители, вывести гос. номер машины, фамилию и имя водителя.","SELECT
car.license_plate
, employee.last_name
, employee.first_name
FROM car, employee WHERE car.id_employee = employee.id_employee;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
580,"Вывести информацию по номерам накладных и грузополучателям, машины которых отправлялись позднее 2020-02-19 и заканчивали раньше 2020-02-26.","SELECT
num_waybill
, consignee
FROM waybill WHERE begin_date > '2020-02-19' AND end_date < '2020-02-26';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
581,"Вывести номера накладных, дата окончания которых меньше 2020-02-28 и общий пробег больше 400.","SELECT num_waybill FROM waybill WHERE end_date < '2020-02-28' AND total_mileage > 400;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
582,"Вывести путевые листы, на которые отпущено более 100 единиц топлива.","SELECT num_waybill
FROM waybill, refueling
WHERE waybill.id_waybill = refueling.id_waybill AND fuel_qty > 100;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
583,"Вывести фамилии сотрудников, которые заправляли машины до 2020-02-25.","SELECT last_name FROM statement, employee WHERE statement.date_st < '2020-02-25' AND statement.id_employee = employee.id_employee;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
584,"Вывести id_refuel для машин, у которых по накладным точкой разгрузки была Moskovskaya av. 56.","SELECT refueling.id_refuel FROM refueling, waybill WHERE waybill.id_waybill = refueling.id_waybill
AND waybill.discharge_point = 'Moskovskaya av. 56';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
585,"Из таблицы Employee вывести фамилии работников, которые не являются водителями.","SELECT DISTINCT last_name FROM employee WHERE NOT position = 'driver';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
586,"Вывести фамилии водителей, которые закончили рейс ранее 2020-02-22.","SELECT last_name FROM employee, car, waybill WHERE employee.id_employee = car.id_employee AND car.id_car = waybill.id_car AND end_date < '2020-02-22';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
587,"Вывести информацию о брендах и государственных номерах машин, которые находятся на автобазе Pulkovskaya.","SELECT
brand
, license_plate
FROM motor_depot, garage, car WHERE name_depot = 'Pulkovskaya' AND motor_depot.id_depot = garage.id_depot AND garage.id_garage = car.id_garage;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
588,Вывести все государственные номера машин не бренда GAZ.,"SELECT DISTINCT license_plate FROM car WHERE NOT brand = 'GAZ';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,2,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
589,"По каким адресам находятся гаражи на автобазе, расположенной по адресу: Obukhovskii av. 120? Вывести уникальные адреса.","SELECT DISTINCT garage_address FROM garage, motor_depot WHERE motor_depot.id_depot = garage.id_depot AND address = 'Obukhovskii av. 120';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
590,"Вывести номера накладных, у которых рейс начался позднее 2020-02-20 и пробег с грузом был не больше 389. Информацию упорядочить по увеличению номера путевого листа.","SELECT num_waybill FROM waybill WHERE begin_date > '2020-02-20' AND mileage_with_cargo <= 389 ORDER BY num_waybill;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,3,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
591,"Вывести фамилии водителей, у которых не 1 квалификация и машина бренда MAZ.","SELECT last_name FROM car, employee WHERE brand = 'MAZ' AND position = 'driver' AND NOT qualification = '1';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,3,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
592,"Вывести информацию по номерам накладных и грузополучателям, машины которых отправлялись позднее 2020-02-19 и заканчивали раньше 2020-02-26. Отсортировать по дате отправления.","SELECT
num_waybill
, consignee
FROM waybill WHERE begin_date > '2020-02-19' AND end_date < '2020-02-26' ORDER BY begin_date;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,3,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
593,Найти id_employee водителей с машинами бренда MAZ или Kamaz.,"SELECT employee.id_employee FROM car, employee
WHERE employee.id_employee = car.id_employee
AND car.brand = 'MAZ' OR car.brand = 'Kamaz';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
594,"Вывести фамилии и имена водителей, у которых пробег с грузом в путевом листе был меньше чем 448.","SELECT
last_name
, first_name
FROM employee, car, waybill WHERE position = 'driver' AND employee.id_employee = car.id_employee AND car.id_car = waybill.id_car AND mileage_with_cargo < 448;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,4,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
595,"Вывести id машины и id водителя, которые были в рейсах с 2020-02-21 по 2020-02-23.","SELECT
car.id_car
, employee.id_employee
FROM employee, car, waybill WHERE employee.id_employee = car.id_employee AND car.id_car = waybill.id_car AND begin_date > '2020-02-21' AND end_date < '2020-02-23';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,4,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
596,Вывести номера накладных для водителей не 3 квалификации.,"SELECT num_waybill FROM waybill, car, employee WHERE waybill.id_car = car.id_car AND car.id_employee = employee.id_employee AND NOT qualification = '3' AND position = 'driver';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,4,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
597,Вывести гос. номера машин брендов MAZ или GAZ.,"SELECT DISTINCT license_plate FROM car WHERE brand = 'MAZ' OR brand = 'GAZ';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,2,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0
598,"Вывести фамилии и имена водителей, которые отправились в путь 21-го февраля 2020 года.","SELECT DISTINCT
last_name
, first_name
FROM employee, car, waybill WHERE waybill.id_car = car.id_car AND car.id_employee = employee.id_employee AND begin_date = '2020-02-21';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
599,"Вывести государственные номера машин, котрые когда-либо заправлялись больше чем на 70 единиц топлива.","SELECT DISTINCT license_plate FROM car, waybill, refueling WHERE car.id_car = waybill.id_car AND waybill.id_waybill = refueling.id_waybill AND fuel_qty > 70;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
600,"Найти уникальные бренды автомобилей, которые заправлялись больше чем на 100 единиц топлива за раз.","SELECT DISTINCT car.brand FROM waybill, car, refueling WHERE refueling.fuel_qty > 100 AND refueling.id_waybill = waybill.id_waybill AND waybill.id_car = car.id_car;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
601,"Найти номера машин, которые были на заправке 2020-02-25. ","SELECT DISTINCT license_plate FROM car, waybill, refueling, statement
WHERE car.id_car = waybill.id_car
AND waybill.id_waybill = refueling.id_waybill
AND refueling.id_statement = statement.id_statement
AND date_st = '2020-02-25';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,4,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
602,"Вывести гос. номера машин, которые заправляются бензином.","SELECT DISTINCT car.license_plate FROM car, waybill, refueling, fuel
WHERE car.id_car = waybill.id_car AND refueling.id_waybill = waybill.id_waybill
AND refueling.id_fuel = fuel.id_fuel AND fuel.kind = 'petrol';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
603,Вывести отсортированные по убыванию номера накладных для машин не бренда Hyundai.,"SELECT num_waybill FROM waybill, car WHERE car.id_car = waybill.id_car AND NOT car.brand = 'Hyundai' ORDER BY num_waybill DESC;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
604,"Вывести в возрастающем порядке номера накладных, по которым проходил водитель с фамилией Samoletov.","SELECT num_waybill FROM waybill, car, employee WHERE waybill.id_car = car.id_car AND car.id_employee = employee.id_employee AND last_name = 'Samoletov' ORDER BY num_waybill ASC;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
605,"Вывести гос. номера машин, которые доставляли товар от грузоотправителя IP ""Kirov V.V."".","SELECT DISTINCT license_plate FROM car, waybill WHERE car.id_car = waybill.id_car AND consignor = 'IP ""Kirov V.V.""';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
606,"Вывести фамилии водителей (без повторений), которые заправляли машину в день начала или окончания рейса.","SELECT DISTINCT employee.last_name FROM employee, car, waybill, statement WHERE car.id_employee = employee.id_employee AND car.id_car = waybill.id_car AND statement.id_employee = employee.id_employee AND (statement.date_st = waybill.begin_date OR statement.date_st = waybill.end_date);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
607,Машины с какими государственными номерами заправляются бензином марки AI-98?,"SELECT DISTINCT license_plate FROM fuel, refueling, waybill, car WHERE kind = 'petrol' AND fuel_brand = 'AI-98' AND fuel.id_fuel = refueling.id_fuel AND refueling.id_waybill = waybill.id_waybill AND waybill.id_car = car.id_car;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
608,"Вывести номера машин, которые заправляются бензином AI-92.","SELECT DISTINCT license_plate FROM fuel, refueling, waybill, car WHERE fuel.id_fuel = refueling.id_fuel AND refueling.id_waybill = waybill.id_waybill AND waybill.id_car = car.id_car AND fuel_brand = 'AI-92' AND kind = 'petrol';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",4,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
609,"Найти номера машин, где на 5 месте находится буква P. ","SELECT license_plate FROM car WHERE license_plate LIKE '____P%';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",5,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0
610,"Найти имена и фамилии водителей, имя которых заканчивается на букву r.","SELECT
first_name
, last_name
FROM employee WHERE first_name LIKE '%r';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",5,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0
611,Найти всех водителей с фамилией на букву M и вывести их.,"SELECT last_name FROM employee WHERE last_name LIKE 'M%';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",5,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0
612,"Вывести номера ведомостей, которые были созданы с 2020-02-21 по 2020-02-28. Использовать предикат BETWEEN.","SELECT num_statement FROM statement WHERE date_st BETWEEN '2020-02-21' AND '2020-02-28';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0
613,"Вывести имена и фамилии водителей, которые доставили груз с 2020-02-20 по 2020-02-22. Использовать предикат BETWEEN.","SELECT DISTINCT
first_name
, last_name
FROM waybill, employee WHERE waybill.end_date BETWEEN '2020-02-20' AND '2020-02-22';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0
614,"Вывести название автобазы, номер гаража и номер машины при условии, что в номере машины есть сочетание цифр 99. Использовать предикат LIKE.","SELECT
name_depot
, num_garage
, license_plate
FROM motor_depot, garage, car WHERE motor_depot.id_depot = garage.id_depot AND garage.id_garage = car.id_garage AND license_plate LIKE '%99%';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",5,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
615,"Вывести id машины и id водителя, которые начали рейс с 2020-02-21 по 2020-02-23. Использовать предикат BETWEEN.","SELECT
car.id_car
, employee.id_employee
FROM employee, car, waybill WHERE employee.id_employee = car.id_employee AND car.id_car = waybill.id_car AND begin_date BETWEEN '2020-02-21' AND '2020-02-23';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",5,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
616,"Найти имена и фамилии водителей, которые забирали груз из какого-либо ООО. Использовать предикат LIKE.","SELECT DISTINCT
first_name
, last_name
FROM employee, car, waybill WHERE waybill.id_car = car.id_car AND car.id_employee = employee.id_employee AND consignor LIKE '%OOO%';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",5,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
617,"Вывести номера заправочных ведомостей, по которым проходили машины с общим пробегом от 200 до 500. Использовать предикат BETWEEN.","SELECT DISTINCT num_statement FROM statement, refueling, waybill WHERE statement.id_statement = refueling.id_statement AND refueling.id_waybill = waybill.id_waybill AND total_mileage BETWEEN 200 AND 500;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",5,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
618,"Найти номера накладных, по которым проходили водители с фамилией, заканчивающейся на ov, совершающие поездки на машине бренда Volvo. Использовать предикат LIKE.","SELECT DISTINCT num_waybill FROM waybill, car, employee WHERE waybill.id_car = car.id_car AND car.id_employee = employee.id_employee AND brand = 'Volvo' AND last_name LIKE '%ov';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",5,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
619,"Вывести информацию по адресам гаражей, где находятся машины, у которых общий пробег 300-500 и бренд машины Volvo. Использовать предикат BETWEEN.","SELECT DISTINCT garage_address FROM car, garage, waybill WHERE waybill.id_car = car.id_car AND garage.id_garage = car.id_garage AND total_mileage BETWEEN 300 AND 500 AND brand = 'Volvo';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",5,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
620,"Вывести информацию по гос. номерам машин, которые заправлялись топливом AI-98 на 40-120 единиц топлива. Использовать предикат BETWEEN.","SELECT DISTINCT license_plate FROM car, waybill, refueling, fuel WHERE car.id_car = waybill.id_car AND waybill.id_waybill = refueling.id_waybill AND refueling.id_fuel = fuel.id_fuel AND fuel_brand = 'AI-98' AND fuel_qty BETWEEN 40 AND 120;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",5,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
621,На какой объем в среднем заправляют машины?,"SELECT AVG(fuel_qty) FROM refueling;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",6,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
622,Найти максимальный объем заправки топливом.,"SELECT MAX(fuel_qty) FROM refueling;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",6,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
623,Посчитать количество машин бренда Volvo.,"SELECT COUNT(id_car) FROM car WHERE brand = 'Volvo';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",6,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0
624,Найти сумму заправляемого дизельного топлива за всё время.,"SELECT SUM(fuel_qty) FROM fuel, refueling WHERE fuel.id_fuel = refueling.id_fuel AND kind = 'diesel';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",6,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0
625,Вывести среднее значение по объему заправляемого дизельного топлива.,"SELECT AVG(fuel_qty) FROM fuel, refueling WHERE fuel.id_fuel = refueling.id_fuel AND kind = 'diesel';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",6,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0
626,Сколько раз заправлял машины сотрудник по фамилии Saal?,"SELECT COUNT(statement.id_employee) FROM employee, statement WHERE statement.id_employee = employee.id_employee AND last_name = 'Saal';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",6,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0
627,Найти минимальный объем заправки топливом.,"SELECT MIN(fuel_qty) FROM refueling;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",6,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
628,"Посчитать количество различных объемов заправок при условии, что объем заправленного топлива был больше 50.","SELECT COUNT(DISTINCT fuel_qty) FROM refueling WHERE fuel_qty > 50;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",6,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0
629,Найти среднее значение по количеству заправленного топлива для машин бренда Volvo.,"SELECT AVG(fuel_qty) FROM refueling, waybill, car WHERE car.id_car = waybill.id_car AND waybill.id_waybill = refueling.id_waybill AND brand = 'Volvo';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",6,3,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0
630,"Найти количество машин, которые находятся на автобазе Pulkovskaya.","SELECT COUNT(car.id_car) FROM car, garage, motor_depot WHERE garage.id_garage = car.id_car AND motor_depot.id_depot = garage.id_depot AND name_depot = 'Pulkovskaya';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",6,3,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0
631,"Посчитать, сколько различных водителей передвигалось на машине с номером P957TO.","SELECT COUNT(DISTINCT employee.id_employee) FROM car, employee WHERE employee.id_employee = car.id_employee AND license_plate = 'P957TO';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",6,3,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0
632,Найти сумму всего заправленного бензина бренда AI-92.,"SELECT SUM(fuel_qty) FROM fuel, refueling WHERE kind = 'petrol' AND fuel_brand = 'AI-92' AND fuel.id_fuel = refueling.id_fuel;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",6,2,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0
633,Найти средний объем заправляемого топлива с 2020-02-21 по 2020-02-25. Использовать предикат BETWEEN.,"SELECT AVG(fuel_qty) FROM refueling, statement WHERE refueling.id_statement = statement.id_statement AND date_st BETWEEN '2020-02-21' AND '2020-02-25';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",6,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0
634,Сколькими брендами представлен каждый тип топлива?,"SELECT
kind
, COUNT(fuel_brand)
FROM fuel
GROUP BY kind;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0
635,Посчитать количество машин каждой марки.,"SELECT
brand
, COUNT(id_car)
FROM car
GROUP BY brand;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0
636,Сколько сотрудников работает на каждой должности?,"SELECT
position
, COUNT(id_employee)
FROM employee GROUP BY position;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0
637,"Посчитать, сколько ведомостей заведено за каждый день.","SELECT
date_st
, COUNT(id_statement)
FROM statement GROUP BY date_st;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0
638,Вывести общий объем отпущенного топлива каждого вида.,"SELECT
kind
, SUM(fuel_qty)
FROM fuel, refueling
WHERE fuel.id_fuel = refueling.id_fuel
GROUP BY kind;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0
639,Вывести общий объем отпущенного топлива за каждый день.,"SELECT
date_st
, SUM(fuel_qty)
FROM statement, refueling
WHERE statement.id_statement = refueling.id_statement GROUP BY date_st;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0
640,"Вывести максимальное количество топлива каждой марки, отпущенного за раз.","SELECT
fuel_brand
, MAX(fuel_qty)
FROM fuel, refueling
WHERE fuel.id_fuel = refueling.id_fuel GROUP BY fuel_brand;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0
641,"Вывести минимальный километраж поездки для каждого автомобиля, на который выдана накладная. В качестве идентификатора автомобиля вывести его гос. номер.","SELECT
license_plate
, MIN(total_mileage)
FROM waybill, car
WHERE waybill.id_car = car.id_car GROUP BY license_plate;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0
642,Сколько всего бензина разных марок было отпущено?,"SELECT
fuel_brand
, SUM(fuel_qty)
FROM fuel, refueling
WHERE fuel.id_fuel = refueling.id_fuel AND kind = 'petrol' GROUP BY fuel_brand;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,2,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
643,Вывести среднее количество отпущенного за каждый день топлива в промежуток между 2020-02-21 и 2020-02-25.,"SELECT AVG(fuel_qty) FROM statement, refueling
WHERE statement.id_statement = refueling.id_statement AND date_st BETWEEN '2020-02-21' AND '2020-02-25'
GROUP BY date_st;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,3,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
644,"Вывести список гос. номеров, начинающихся на M, и количество накладных, выданных на эти автомобили.","SELECT
license_plate
, COUNT(id_waybill)
FROM car, waybill
WHERE car.id_car = waybill.id_car AND license_plate LIKE 'M%'
GROUP BY license_plate;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,3,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
645,"Для каждого водителя, фамилия которого начинается с буквы S, вывести его фамилию и количество машин, на которых он ездит.","SELECT
last_name
, COUNT(license_plate)
FROM employee, car
WHERE employee.id_employee = car.id_employee AND last_name LIKE 'S%' GROUP BY employee.id_employee;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,3,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
646,Для водителя Vasiliy Perov вывести информацию о количестве отпущенного топлива по каждой его накладной. Из информации о накладных нужно вывести только их номера.,"SELECT
num_waybill
, SUM(fuel_qty)
FROM refueling, waybill, car, employee
WHERE waybill.id_waybill = refueling.id_waybill
AND waybill.id_car = car.id_car
AND car.id_employee = employee.id_employee
AND last_name = 'Perov' AND first_name = 'Vasiliy'
GROUP BY num_waybill;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,3,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
647,Для водителей с фамилией на S вывести общее количество отпущенного топлива.,"SELECT
last_name
, SUM(fuel_qty)
FROM refueling, waybill, employee, car
WHERE car.id_employee = employee.id_employee AND waybill.id_waybill = refueling.id_waybill AND waybill.id_car = car.id_car AND last_name LIKE ""S%"" GROUP BY employee.id_employee;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,3,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
648,"Вывести, сколько топлива каждой марки было отпущено за каждый день c 2020-03-20 по 2020-03-25.","SELECT
date_st
, fuel_brand
, SUM(fuel_qty)
FROM statement, fuel, refueling WHERE statement.id_statement = refueling.id_statement AND fuel.id_fuel = refueling.id_fuel AND date_st BETWEEN '2020-03-20' AND '2020-03-25' GROUP BY date_st, fuel_brand;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,3,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
649,"Вывести количество каждого вида топлива, которое было отпущено с 2020-02-20 по 2020-02-23, по всем маркам авто.","SELECT
brand
, fuel_brand
, SUM(fuel_qty)
FROM car, waybill, refueling, fuel, statement
WHERE car.id_car = waybill.id_car
AND waybill.id_waybill = refueling.id_waybill
AND fuel.id_fuel = refueling.id_fuel
AND refueling.id_statement = statement.id_statement
AND date_st BETWEEN '2020-02-20' AND '2020-02-23'
GROUP BY fuel_brand, brand
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,4,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
650,Для каждого водителя вывести общее количество топлива за каждый день заправки с 2020-02-21 по 2020-02-24.,"SELECT
last_name
, date_st
, SUM(fuel_qty)
FROM employee, car, waybill, refueling, statement WHERE statement.id_statement = refueling.id_statement AND waybill.id_waybill = refueling.id_waybill
AND car.id_car = waybill.id_car AND employee.id_employee = car.id_employee AND date_st BETWEEN '2020-02-21' AND '2020-02-24' GROUP BY employee.id_employee, date_st;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,4,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
651,"Вывести количество видов топлива, которыми заправлялась каждая машина, вышедшая в рейс с 2020-02-20 по 2020-02-24. Машина идентифицируется гос. номером.","SELECT
license_plate
, COUNT(DISTINCT fuel_brand)
FROM car, waybill, refueling, fuel WHERE waybill.id_waybill = refueling.id_waybill AND waybill.id_car = car.id_car AND fuel.id_fuel = refueling.id_fuel AND begin_date BETWEEN '2020-02-20' AND '2020-02-24'
GROUP BY license_plate;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,4,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
652,"Для каждой автобазы вывести список раздаточных ведомостей с указанием количества автомобилей, количества отпущенного топлива по каждой марке топлива, отсортировать по имени автобазы.","SELECT
name_depot
, COUNT(license_plate)
, fuel_brand
, SUM(fuel_qty)
FROM motor_depot, garage, car, waybill, refueling, statement, fuel
WHERE motor_depot.id_depot = garage.id_depot
AND garage.id_garage = car.id_garage
AND waybill.id_car = car.id_car
AND waybill.id_waybill = refueling.id_waybill
AND statement.id_statement = refueling.id_statement
AND fuel.id_fuel = refueling.id_fuel
GROUP BY fuel_brand, name_depot
ORDER BY name_depot;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,4,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0
653,"Для каждого гаража вывести список раздаточных ведомостей с указанием количества автомобилей, количества отпущенного топлива по каждой марке топлива c 2020-03-20 по 2020-03-23.","SELECT
num_garage
, COUNT(license_plate)
, fuel_brand
, SUM(fuel_qty)
FROM garage, car, waybill, refueling, statement, fuel
WHERE garage.id_garage = car.id_garage AND waybill.id_car = car.id_car
AND waybill.id_waybill = refueling.id_waybill AND statement.id_statement = refueling.id_statement
AND fuel.id_fuel = refueling.id_fuel AND date_st BETWEEN '2020-03-20' AND '2020-03-23'
GROUP BY fuel_brand, num_garage;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,5,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
654,"Вывести максимальное количество топлива, отпущенного за 1 день суммарно, и фамилию водителя, на кого было отпущено c 2020-02-20 по 2020-02-24, если фамилия начинается на M.","SELECT MAX(total_fuel_qty)
FROM (
    SELECT
last_name
, SUM(fuel_qty) AS total_fuel_qty
    FROM statement, refueling, waybill, car, employee
    WHERE statement.id_statement = refueling.id_statement
      AND waybill.id_waybill = refueling.id_waybill
      AND waybill.id_car = car.id_car
      AND car.id_employee = employee.id_employee
      AND date_st BETWEEN '2020-02-20' AND '2020-02-24'
      AND last_name LIKE 'M%'
    GROUP BY date_st, last_name
) AS subquery;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,5,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
655,"Вывести количество видов топлива, которыми заправлялась каждая машина с 2020-02-20 по 2020-02-24. Сгруппировать по дате. Машина идентифицируется гос. номером.","SELECT
license_plate
, date_st
, COUNT(DISTINCT fuel_brand)
FROM statement, fuel, refueling, waybill, car WHERE statement.id_statement = refueling.id_statement AND fuel.id_fuel = refueling.id_fuel AND car.id_car = waybill.id_car AND waybill.id_waybill = refueling.id_waybill
AND date_st BETWEEN '2020-02-20' AND '2020-02-24' GROUP BY license_plate, date_st;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,5,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
656,"Вывести минимальное количество бензина, отпущенного за 1 день суммарно с 2020-03-21 по 2020-03-24.","SELECT MIN(sum_fuel_qty) FROM (SELECT
date_st
, SUM(fuel_qty) AS sum_fuel_qty
FROM statement, refueling
WHERE statement.id_statement = refueling.id_statement AND date_st BETWEEN '2020-03-21' AND '2020-03-24' GROUP BY date_st) AS subquery;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",7,4,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
657,"Вывести автомобили, на которые выданы путевые листы с суммарным километражом более 500 км, а гос. номер автомобиля начинается с M.","SELECT license_plate FROM car, waybill
WHERE car.id_car = waybill.id_car GROUP BY license_plate
HAVING license_plate LIKE 'M%' AND SUM(total_mileage) > 500;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",8,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0
658,"Найти автомобили, на которые выданы путевые листы с суммарным километражом менее 400 км, а номер начинается с B.","SELECT license_plate FROM car, waybill
WHERE car.id_car = waybill.id_car GROUP BY license_plate
HAVING license_plate LIKE 'B%' AND SUM(total_mileage) < 400;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",8,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0
659,Вывести максимальное количество каждой марки топлива заправленного за 1 раз для машины марки Kamaz.,"SELECT
fuel_brand
, MAX(fuel_qty)
FROM refueling, waybill, car, fuel
WHERE refueling.id_waybill = waybill.id_waybill
AND car.id_car = waybill.id_car
AND fuel.id_fuel = refueling.id_fuel
GROUP BY brand, fuel_brand HAVING brand = 'Kamaz';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",8,3,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0
660,"Вывести количество топлива, которое было отпущено по каждой марке, за каждый день c 2020-03-20 по 2020-03-25. Порядок вывода информации: дата, марка, количество топлива.","SELECT
date_st
, fuel_brand
, SUM(fuel_qty)
FROM statement, fuel, refueling
WHERE statement.id_statement = refueling.id_statement AND fuel.id_fuel = refueling.id_fuel
GROUP BY date_st, fuel_brand HAVING date_st BETWEEN '2020-03-20' AND '2020-03-25';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",8,3,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0
661,"Вывести фамилии и имена водителей с фамилией на букву K, которые ездили на 2 и более автомобилях.","SELECT
last_name
, first_name
, COUNT(license_plate)
FROM employee, car
WHERE employee.id_employee = car.id_employee AND last_name LIKE ""K%"" GROUP BY employee.id_employee HAVING COUNT(license_plate) >= 2;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",8,3,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0
662,"Для автомобиля вывести гос. номер, суммарный общий километраж, среднее количество полученного топлива на заправке при условии, что суммарный общий километраж превышает 500 км и вид топлива - бензин (kind=petrol).","SELECT
license_plate
, SUM(total_mileage)
, AVG(fuel_qty)
FROM waybill, car, refueling, fuel
WHERE waybill.id_car = car.id_car
AND waybill.id_waybill = refueling.id_waybill
AND refueling.id_fuel = fuel.id_fuel AND kind = 'petrol'
GROUP BY license_plate, kind HAVING SUM(total_mileage) > 500;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",8,3,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0
663,Вывести для водителей с фамилией на P фамилию и общее количество топлива за каждый день заправки с 2020-02-21 по 2020-02-24.,"SELECT
last_name
, date_st
, SUM(fuel_qty)
FROM employee, car, waybill, refueling, statement
WHERE statement.id_statement = refueling.id_statement AND waybill.id_waybill = refueling.id_waybill
AND car.id_car = waybill.id_car AND employee.id_employee = car.id_employee AND last_name LIKE 'P%'
GROUP BY employee.id_employee, date_st HAVING date_st BETWEEN '2020-02-21' AND '2020-02-24';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",8,4,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0
664,"Для каждой автобазы вывести даты раздаточных ведомостей с указанием количества автомобилей, количества отпущенного бензина (kind=petrol) c 2020-02-23 по 2020-02-29.","SELECT
name_depot
, date_st
, COUNT(license_plate)
, kind
, SUM(fuel_qty)
FROM motor_depot, garage, car, waybill, refueling, statement, fuel
WHERE motor_depot.id_depot = garage.id_depot
AND garage.id_garage = car.id_garage
AND waybill.id_car = car.id_car
AND waybill.id_waybill = refueling.id_waybill
AND statement.id_statement = refueling.id_statement
AND fuel.id_fuel = refueling.id_fuel
GROUP BY kind, date_st, name_depot
HAVING kind = 'petrol' AND date_st BETWEEN '2020-02-22' AND '2020-02-29'
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",8,4,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0
665,"Для каждого гаража вывести список водителей, фамилия которых начинается на букву S, количество отпущенного им топлива по каждой марке топлива c 2020-02-21 по 2020-02-25.","SELECT
num_garage
, last_name
, fuel_brand
, SUM(fuel_qty)
FROM garage, car, waybill, refueling, statement, fuel, employee
WHERE garage.id_garage = car.id_garage AND waybill.id_car = car.id_car
AND waybill.id_waybill = refueling.id_waybill AND statement.id_statement = refueling.id_statement
AND fuel.id_fuel = refueling.id_fuel AND car.id_employee = employee.id_employee
AND date_st BETWEEN '2020-02-21' AND '2020-02-25'
GROUP BY fuel_brand, employee.id_employee, num_garage HAVING last_name LIKE 'S%';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",8,4,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0
666,"Найти номер машины, у которой наибольший пробег с грузом.","SELECT license_plate FROM car, waybill WHERE waybill.id_car = car.id_car
AND mileage_with_cargo = (SELECT MAX(mileage_with_cargo) FROM waybill);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",9,1,1,1,1,1,0,1,0,0,1,0,0,0,0,0,0
667,"Вывести номера путевых листов и  гос. номера автомобилей, на которые они выданы, по которым общий километраж поездки больше общего среднего по этому показателю.","SELECT
num_waybill
, license_plate
FROM waybill, car
WHERE waybill.id_car = car.id_car AND total_mileage > (SELECT AVG(total_mileage) FROM waybill);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",9,1,1,1,1,1,0,1,0,0,1,0,0,0,0,0,0
668,"Вывести виды топлива и количество, которое отпущено, если за раз отпускали больше среднего.","SELECT
fuel_brand
, SUM(fuel_qty)
FROM fuel, refueling
WHERE fuel.id_fuel = refueling.id_fuel AND fuel_qty > (SELECT AVG(fuel_qty) FROM refueling)
GROUP BY fuel_brand;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",9,2,1,1,1,1,0,1,1,0,1,0,0,0,0,0,0
669,"Вывести путевые листы, на которые отпущено топлива больше среднего.","SELECT
num_waybill
, SUM(fuel_qty)
FROM waybill, refueling
WHERE waybill.id_waybill = refueling.id_waybill AND fuel_qty > (SELECT AVG(fuel_qty) FROM refueling)
GROUP BY num_waybill;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",9,2,1,1,1,1,0,1,1,0,1,0,0,0,0,0,0
670,"Вывести номера ведомостей, по которым проходило diesel топливо с наименьшим объемом.","SELECT DISTINCT num_statement FROM statement, refueling, fuel WHERE refueling.id_fuel = fuel.id_fuel AND refueling.id_statement = statement.id_statement AND kind = 'diesel' AND fuel_qty = (SELECT MIN(fuel_qty) FROM fuel);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",9,2,1,1,1,1,0,1,0,0,1,0,0,0,0,0,0
671,Найти номер машины бренда Volvo или MAZ с наибольшим пробегом.,"SELECT license_plate FROM car, waybill WHERE car.id_car = waybill.id_car AND (brand = 'Volvo' OR brand = 'MAZ') AND total_mileage = (SELECT MAX(total_mileage) FROM waybill, car WHERE waybill.id_car = car.id_car AND (brand = 'Volvo' OR brand = 'MAZ'));
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",9,3,1,1,1,1,0,1,0,0,1,0,0,0,0,0,0
672,"Вывести путевые листы, на которые отпущено больше всего топлива с 2020-02-23 по 2020-02-29.","SELECT num_waybill FROM waybill, refueling, statement
WHERE waybill.id_waybill = refueling.id_waybill AND statement.id_statement = refueling.id_statement
AND fuel_qty = (SELECT MAX(fuel_qty) FROM refueling, statement WHERE refueling.id_statement = statement.id_statement
AND date_st BETWEEN '2020-02-23' AND '2020-02-29') AND date_st BETWEEN '2020-02-23' AND '2020-02-29';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",9,4,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0
673,"Вывести гараж с наибольшим количеством автомобилей. Учесть, что таких гаражей может быть несколько.","SELECT
num_garage
, COUNT(id_car)
FROM garage, car WHERE garage.id_garage = car.id_garage
AND (SELECT COUNT(id_car) FROM car, garage AS g1 WHERE car.id_garage = g1.id_garage
AND g1.id_garage = garage.id_garage GROUP BY num_garage)
= (SELECT MAX(cars) FROM (SELECT
num_garage
, COUNT(id_car) AS cars
FROM garage, car
WHERE garage.id_garage = car.id_garage GROUP BY num_garage) AS t1)
GROUP BY num_garage;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",9,4,1,1,1,1,0,1,1,0,1,0,0,0,0,0,0
674,"Для гаражей с максимальным количеством путевых листов вывести номер машины, путевой лист, вид топлива и количество, если была заправка","SELECT
num_garage
, COUNT(num_waybill)
, fuel_brand
, SUM(fuel_qty)
FROM garage, car, waybill, refueling, fuel
WHERE garage.id_garage = car.id_garage AND car.id_car = waybill.id_car
AND waybill.id_waybill = refueling.id_waybill AND fuel.id_fuel = refueling.id_fuel
AND (SELECT COUNT(num_waybill) FROM garage AS g1, car, waybill WHERE g1.id_garage = car.id_garage AND car.id_car = waybill.id_car
AND garage.id_garage = g1.id_garage GROUP BY g1.num_garage) = (SELECT MAX(count) FROM (SELECT
num_garage
, COUNT(num_waybill) AS count
FROM garage, car, waybill WHERE garage.id_garage = car.id_garage AND car.id_car = waybill.id_car GROUP BY num_garage) AS t1)
GROUP BY num_garage, fuel_brand;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",9,5,1,1,1,1,0,1,1,0,1,0,0,0,0,0,0
675,"Вывести названия автобаз и количество отпущенного топлива по ним, если количество меньше среднего по автобазам, c 2020-03-20 по 2020-03-25.","SELECT
name_depot
, SUM(fuel_qty)
FROM motor_depot, garage, car, waybill, refueling, statement
WHERE motor_depot.id_depot = garage.id_depot AND garage.id_garage = car.id_garage
AND car.id_car = waybill.id_car AND waybill.id_waybill = refueling.id_waybill
AND refueling.id_statement = statement.id_statement AND date_st BETWEEN '2020-03-20' AND '2020-03-25'
AND (SELECT SUM(fuel_qty) FROM motor_depot AS md1, garage, car, waybill, refueling, statement
WHERE md1.id_depot = garage.id_depot AND md1.id_depot = motor_depot.id_depot AND garage.id_garage = car.id_garage
AND car.id_car = waybill.id_car AND waybill.id_waybill = refueling.id_waybill
AND refueling.id_statement = statement.id_statement AND date_st BETWEEN '2020-03-20' AND '2020-03-25' GROUP BY name_depot)
< (SELECT AVG(fuel_qty) FROM (SELECT SUM(fuel_qty) AS fuel_qty FROM motor_depot, garage, car, waybill, refueling, statement
WHERE motor_depot.id_depot = garage.id_depot AND garage.id_garage = car.id_garage
AND car.id_car = waybill.id_car AND waybill.id_waybill = refueling.id_waybill
AND refueling.id_statement = statement.id_statement AND date_st BETWEEN '2020-03-20' AND '2020-03-25' GROUP BY name_depot) AS t1)
GROUP BY name_depot;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",9,5,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0
676,"Вывести общий километраж поездок по всем автобазам, общий километраж с грузом и количество поездок, если их больше среднего количества поездок по автобазам.","SELECT
name_depot
, SUM(total_mileage)
, SUM(mileage_with_cargo)
, COUNT(num_waybill)
FROM motor_depot, garage, car, waybill
WHERE motor_depot.id_depot = garage.id_depot AND garage.id_garage = car.id_garage AND car.id_car = waybill.id_car
AND (SELECT COUNT(num_waybill) FROM motor_depot AS m1, garage, car, waybill
WHERE m1.id_depot = garage.id_depot AND garage.id_garage = car.id_garage AND car.id_car = waybill.id_car
AND m1.id_depot = motor_depot.id_depot GROUP BY name_depot)
> (SELECT AVG(count) FROM (SELECT COUNT(num_waybill) AS count FROM motor_depot, garage, car, waybill
WHERE motor_depot.id_depot = garage.id_depot AND garage.id_garage = car.id_garage AND car.id_car = waybill.id_car GROUP BY name_depot) AS t1)
GROUP BY name_depot;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",9,5,1,1,1,1,0,1,1,0,1,0,0,0,0,0,0
677,Из таблицы Employee вывести всю информацию по водителям 1 и 2 квалификации.,"SELECT * FROM employee WHERE qualification IN (1, 2);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",10,1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0
678,"Вывести номера автомобилей, которыми управляют водители с квалификацией 3. Использовать подзапрос и предикат IN.","SELECT license_plate
FROM car
WHERE id_employee IN (SELECT id_employee FROM employee WHERE qualification = 3);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",10,1,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0
679,"Вывести гос. номера и марки всех машин, если к машине прикреплен водитель. Использовать предикат ANY, не использовать соединение таблиц.","SELECT
license_plate
, brand
FROM car WHERE id_employee = ANY(SELECT id_employee FROM employee WHERE position = 'driver');
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",10,2,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0
680,"Найти номера машин, на которых работал водитель по фамилии Merkin. Использовать предикат ANY, не использовать соединение таблиц.","SELECT license_plate FROM car WHERE car.id_employee = ANY(SELECT id_employee FROM employee WHERE last_name = 'Merkin');
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",10,2,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0
681,"Найти машины которые за поездку проехали больше 300 км c грузом. Вывести без повторов, использовать подзапрос.","SELECT DISTINCT license_plate
FROM car
WHERE id_car IN (SELECT id_car FROM waybill WHERE mileage_with_cargo > 300);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",10,2,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0
682,"Вывести номера машин и их марку для машин, на которых передвигаются водители 1 или 2 квалификации. Использовать предикат IN.","SELECT
license_plate
, brand
FROM car WHERE id_employee IN (SELECT id_employee FROM employee WHERE qualification IN (1, 2));
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",10,2,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0
683,"Найти номера накладных, по которым общий пробег у машин больше, чем у машин, у которых пробег с грузом больше 800. Использовать предикат ALL.","SELECT DISTINCT num_waybill FROM waybill WHERE total_mileage > ALL(SELECT total_mileage FROM waybill WHERE mileage_with_cargo > 800);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",10,2,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0
684,"Вывести id_refueling при условии, что у водителей 2 квалификация.","SELECT refueling.id_refuel FROM refueling, statement WHERE statement.id_statement = refueling.id_statement AND statement.id_employee = SOME(SELECT id_employee FROM employee WHERE qualification = 2);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",10,2,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0
685,"Вывести фамилии водителей, которые заправляли машину в день начала или окончания рейса.","SELECT DISTINCT employee.last_name FROM employee, car, waybill, statement
WHERE car.id_employee = employee.id_employee
AND car.id_car = waybill.id_car
AND statement.id_employee = employee.id_employee
AND statement.date_st IN (waybill.begin_date, waybill.end_date);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",10,2,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0
686,"Вывести фамилии водителей, у которых машина бренда MAZ.","SELECT DISTINCT employee.last_name FROM employee, car WHERE employee.id_employee = SOME(SELECT id_employee FROM car WHERE brand = 'MAZ');
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",10,3,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0
687,"Вывести номера машин, которые находятся в гаражах по адресам Obukhovskii av. 120 или Pulkovskaya av. 14. В запросе использовать предикат IN для проверки включения в список адресов, не использовать соединение таблиц.","SELECT license_plate FROM car WHERE id_garage IN (SELECT id_garage FROM garage WHERE garage_address = ('Obukhovskii av. 120' OR 'Pulkovskaya av. 14'));
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",10,2,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0
688,"Вывести имена водителей, фамилия которых начинается на букву M и бренд их автомобиля Volvo или GAZ.","SELECT employee.first_name FROM employee, car
WHERE employee.id_employee = car.id_employee
AND employee.last_name LIKE 'M%'
AND car.brand IN ('Volvo', 'GAZ');
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",10,3,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0
689,"Вывести фамилии водителей, которые передвигались на машинах бренда MAZ или KAMAZ. Использовать подзапрос и предикат SOME.","SELECT DISTINCT employee.last_name FROM employee, car WHERE employee.id_employee = SOME(SELECT id_employee FROM car WHERE brand = ('MAZ' OR 'KAMAZ'));
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",10,3,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0
690,"Вывести номера накладных, где водителями машин были люди с фамилией на букву S.","SELECT num_waybill FROM waybill, car WHERE car.id_car = waybill.id_car
AND car.id_employee = ANY(SELECT id_employee FROM employee WHERE last_name LIKE 'S%');
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",10,2,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0
691,"Вывести информацию по номерам накладных, где были зафиксированы водители Dubov или Perov. Использовать предикат ANY, не использовать соединение таблиц.","SELECT DISTINCT num_waybill
FROM waybill
WHERE id_car IN (
    SELECT id_car
    FROM car
    WHERE id_employee = ANY(
        SELECT id_employee
        FROM employee
        WHERE last_name IN ('Dubov', 'Perov')
    )
);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",10,3,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0
692,"Вывести, сколько топлива было отпущено для каждой из марок бензина (kind=petrol) за каждый день c 2020-03-20 по 2020-03-25. Для поиска брендов бензина использовать предикат ANY.","SELECT
date_st
, fuel_brand
, SUM(fuel_qty)
FROM statement, fuel, refueling
WHERE statement.id_statement = refueling.id_statement AND fuel.id_fuel = refueling.id_fuel
GROUP BY date_st, fuel_brand HAVING date_st BETWEEN '2020-03-20' AND '2020-03-25'
AND fuel_brand = ANY(SELECT fuel_brand FROM fuel WHERE kind = 'petrol');
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",10,4,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0
693,"Для каждого гаража вывести список раздаточных ведомостей с указанием количества автомобилей, количества отпущенного топлива вида дизель c 2020-03-20 по 2020-03-23. Для поиска брендов дизеля использовать предикат IN.","SELECT
num_garage
, date_st
, COUNT(license_plate)
, fuel_brand
, SUM(fuel_qty)
FROM garage, car, waybill, refueling, statement, fuel
WHERE garage.id_garage = car.id_garage AND waybill.id_car = car.id_car
AND waybill.id_waybill = refueling.id_waybill AND statement.id_statement = refueling.id_statement
AND fuel.id_fuel = refueling.id_fuel GROUP BY fuel_brand, date_st, num_garage
HAVING date_st BETWEEN '2020-03-20' AND '2020-03-23' AND fuel_brand IN (SELECT fuel_brand
FROM fuel WHERE kind = 'diesel');
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",10,5,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0
694,"Вывести информацию о заправочных ведомостях: фамилия заправщика, дата. Использовать полный формат соединения.","SELECT
last_name
, date_st
FROM employee
INNER JOIN statement ON employee.id_employee = statement.id_employee;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",11,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0
695,Вывести информацию о гаражах и закрепленных за ними машинах.  Использовать полный формат соединения.,"SELECT
num_garage
, license_plate
FROM garage
INNER JOIN car ON garage.id_garage = car.id_garage;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",11,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0
696,"Вывести следующую информацию о машинах: гос.номер, номер путевого листа. Использовать полный формат соединения.","SELECT
license_plate
, num_waybill
FROM car
INNER JOIN waybill ON car.id_car = waybill.id_car;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",11,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0
697,"Вывести следующую информацию: гос. номер машины, марка, фамилия и имя водителя, его квалифиация. Использовать полный формат соединения.","SELECT
license_plate
, brand
, last_name
, first_name
, qualification
FROM car INNER JOIN employee ON car.id_employee = employee.id_employee;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",11,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0
698,"Вывести автомобили марки MAZ и гаражи, к которым они относятся.  Использовать полный формат соединения.","SELECT
license_plate
, num_garage
FROM car
INNER JOIN garage ON car.id_garage = garage.id_garage
AND brand = 'MAZ';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",11,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0
699,"Вывести ведомости и фамилии сотрудников, которые их заполняли с 2020-02-23 по 2020-02-25. Использовать полный формат соединения.","SELECT
date_st
, last_name
FROM statement
INNER JOIN employee ON statement.id_employee = employee.id_employee
AND date_st BETWEEN '2020-02-23' AND '2020-02-25';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",11,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0
700,"Вывести номера заправочных ведомостей, которые были заведены с 2020-02-25 по 2020-02-28, и фамилии сотрудников, их заполнявших.","SELECT
num_statement
, last_name
FROM statement INNER JOIN employee
ON statement.id_employee = employee.id_employee AND date_st BETWEEN '2020-02-25' AND '2020-2-28';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",11,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0
701,"Вывести водителей, которые работали заправщиками. Использовать ANY.","SELECT DISTINCT
last_name
, first_name
FROM statement INNER JOIN employee
ON statement.id_employee = employee.id_employee INNER JOIN car
ON employee.id_employee = car.id_employee
AND statement.id_employee = ANY(SELECT id_employee FROM car);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",11,2,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0
702,Вывести общий объем бензина (kind=petrol) по каждой заправочной ведомости.,"SELECT
num_statement
, fuel_brand
, SUM(fuel_qty)
FROM fuel
INNER JOIN refueling ON fuel.id_fuel = refueling.id_fuel AND kind = 'petrol'
INNER JOIN statement ON refueling.id_statement = statement.id_statement
GROUP BY num_statement, fuel_brand;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",11,2,1,1,1,1,0,1,1,0,0,0,1,0,0,0,0
703,Вывести общий километраж каждого водителя с именем на А.,"SELECT
last_name
, first_name
, SUM(total_mileage)
FROM employee
INNER JOIN car ON employee.id_employee = car.id_employee AND first_name LIKE 'A%'
INNER JOIN waybill ON car.id_car = waybill.id_car GROUP BY employee.id_employee;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",11,4,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0
704,Вывести общий объем каждой марки топлива с 2020-02-25 по 2020-03-25.,"SELECT
fuel_brand
, SUM(fuel_qty)
FROM refueling
INNER JOIN statement ON refueling.id_statement = statement.id_statement
AND date_st BETWEEN '2020-02-25' AND '2020-03-25'
INNER JOIN fuel ON refueling.id_fuel = fuel.id_fuel
GROUP BY fuel_brand;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",11,3,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0
705,"Вывестиг гос. номера машин марки Volvo, пункт погрузки и разгрузки, даты поездки, вид топлива и количество, если была заправка. Поездка должна была быть совершена с 2020-02-20 по 2020-02-23.","SELECT
license_plate
, loading_point
, discharge_point
, begin_date
, end_date
, fuel_brand
, fuel_qty
FROM car INNER JOIN waybill ON car.id_car = waybill.id_car AND brand = 'Volvo'
INNER JOIN refueling ON waybill.id_waybill = refueling.id_waybill
AND begin_date BETWEEN '2020-02-20' AND '2020-02-23'
INNER JOIN fuel ON refueling.id_fuel = fuel.id_fuel;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",11,3,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0
706,"Для водителей, которые работают заправщиками, посчитать сколько топлива они отпустили за каждый день своей работы с 2020-03-20 по 2020-03-26. Вывести фамилию, имя, дату и объем.","SELECT
last_name
, first_name
, date_st
, SUM(fuel_qty)
FROM employee
INNER JOIN statement ON employee.id_employee = statement.id_employee AND date_st BETWEEN '2020-03-20' AND '2020-03-26'
INNER JOIN car ON employee.id_employee = car.id_employee
INNER JOIN refueling ON statement.id_statement = refueling.id_statement GROUP BY employee.id_employee, date_st;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",11,3,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0
707,"Вывести автомобили, принадлежащие автобазе Obukhovskaya, на которых работают водители с фамилией, начинающейся на букву P, и номера накладных на эти автомобили. Условие: автомобили должны заправится более чем на 70 литров за раз. Порядок вывода информации: госномер машины,фамилия водителя, номер путевого листа.","SELECT DISTINCT
license_plate
, last_name
, num_waybill
FROM motor_depot INNER JOIN garage ON motor_depot.id_depot = garage.id_garage
AND name_depot = 'Obukhovskaya'
INNER JOIN car ON garage.id_garage = car.id_garage
INNER JOIN employee ON car.id_employee = employee.id_employee
AND last_name LIKE 'P%'
INNER JOIN waybill ON car.id_car = waybill.id_car
INNER JOIN refueling ON waybill.id_waybill = refueling.id_waybill AND fuel_qty > 70;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",11,5,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0
708,"Для каждого гаража вывести список раздаточных ведомостей с указанием количества автомобилей, количества отпущенного топлива вида биодизель c 2020-02-25 по 2020-02-29. Вывести номер гаража, дату, количество автомобилей, вид топлива и суммарный объем.","SELECT
num_garage
, date_st
, COUNT(license_plate)
, fuel_brand
, SUM(fuel_qty)
FROM garage
INNER JOIN car ON garage.id_garage = car.id_garage
INNER JOIN waybill ON car.id_car = waybill.id_car
INNER JOIN refueling ON waybill.id_waybill = refueling.id_waybill
INNER JOIN statement ON refueling.id_statement = statement.id_statement AND date_st BETWEEN '2020-02-25' AND '2020-02-29'
INNER JOIN fuel ON refueling.id_fuel = fuel.id_fuel AND kind = 'biodiesel'
GROUP BY fuel_brand, date_st, num_garage;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",11,5,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0
709,"Посчитать, сколько машин принадлежит каждому гаражу. Учесть, что есть неукомплектованные автопарком гаражи. Использовать левое соединение.","SELECT
num_garage
, COUNT(license_plate)
FROM garage LEFT JOIN car ON garage.id_garage = car.id_garage
GROUP BY num_garage;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",12,1,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0
710,"Посчитать, сколько машин водит каждый водитель. Использовать правое соединение. В качестве информации о водителе вывести только его фамилию.","SELECT
last_name
, COUNT(license_plate)
FROM car
RIGHT JOIN employee ON car.id_employee = employee.id_employee
GROUP BY employee.id_employee;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",12,1,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0
711,"Посчитать, сколько раз заправились каждым видом топлива, учесть те виды топлива, которыми ни разу не заправлялись. Использовать правое соединение","SELECT
fuel_brand
, COUNT(id_refuel)
FROM refueling
RIGHT JOIN fuel ON refueling.id_fuel = fuel.id_fuel
GROUP BY fuel_brand;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",12,1,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0
712,"Для каждой автобазы вывести количество закрепленных за ней автомобилей. Учесть, что есть неукомплектванные автопарком автобазы. В запросе использовать левое соединение.","SELECT
name_depot
, COUNT(license_plate)
FROM motor_depot LEFT JOIN garage ON motor_depot.id_depot = garage.id_depot
LEFT JOIN car ON garage.id_garage = car.id_garage
GROUP BY motor_depot.id_depot;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",12,2,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0
713,"Посчитать, сколько водителей водит машины на каждой автобазе, используя левое соединение","SELECT
name_depot
, COUNT(id_employee)
FROM motor_depot
LEFT JOIN garage ON motor_depot.id_depot = garage.id_depot
LEFT JOIN car ON garage.id_garage = car.id_garage
GROUP BY name_depot;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",12,2,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0
714,"Для каждой автобазы вывести количество закрепленных за ней автомобилей. Учесть, что есть некуомплектванные автопарком автобазы. Использовать правое соединение.","SELECT
name_depot
, COUNT(license_plate)
FROM car RIGHT JOIN garage ON car.id_garage = garage.id_garage
RIGHT JOIN motor_depot ON garage.id_depot = motor_depot.id_depot
GROUP BY motor_depot.id_depot;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",12,2,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0
715,"Вывести, сколько было отпущено дизеля в каждую из дат. Использовать правое соединение","SELECT
date_st
, SUM(fuel_qty)
FROM fuel
RIGHT JOIN refueling ON fuel.id_fuel = refueling.id_fuel
RIGHT JOIN statement ON refueling.id_statement = statement.id_statement
AND kind = 'diesel' GROUP BY date_st;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",12,2,1,1,1,1,0,1,1,0,0,0,0,1,0,0,0
716,"Посчитать сколько ведомостей заполнил сотрудник и сколько машин он водит, учесть, что сотрудник может только водить машины или только заполнять ведомости.","SELECT
last_name
, first_name
, COUNT(id_statement)
, COUNT(id_car)
FROM statement
RIGHT JOIN employee ON statement.id_employee = employee.id_employee
LEFT JOIN car ON employee.id_employee = car.id_employee
GROUP BY employee.id_employee;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",12,2,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0
717,"Для каждого сотрдуника, который оформлял ведомости c 2020-02-20 по 2020-02-23, вывести фамилию сотрудника, дату ведомости и суммарное количество топлива каждого вида.","SELECT
last_name
, date_st
, fuel_brand
, SUM(fuel_qty)
FROM employee
RIGHT JOIN statement ON employee.id_employee = statement.id_employee
LEFT JOIN refueling ON statement.id_statement = refueling.id_statement
LEFT JOIN fuel ON refueling.id_fuel = fuel.id_fuel
WHERE date_st BETWEEN '2020-02-20' AND '2020-02-23'
GROUP BY employee.id_employee, date_st, fuel_brand;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",12,4,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0
718,"Для каждой автобазы сформировать следующую информацию: название автобазы, дата, количество заправленных автомобилей, количество отпущенного топлива по каждой марке топлива по автобазе. В ответе учесть указанный порядок вывода информации. Использовать левое соединение.","SELECT
name_depot
, date_st
, COUNT(license_plate)
, fuel_brand
, SUM(fuel_qty)
FROM motor_depot
LEFT JOIN garage ON motor_depot.id_depot = garage.id_depot
LEFT JOIN car ON garage.id_garage = car.id_garage
LEFT JOIN waybill ON car.id_car = waybill.id_car
LEFT JOIN refueling ON waybill.id_waybill = refueling.id_waybill
LEFT JOIN statement ON refueling.id_statement = statement.id_statement
LEFT JOIN fuel ON refueling.id_fuel = fuel.id_fuel
GROUP BY fuel_brand, date_st, name_depot;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",12,5,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0
719,"Для каждого гаража указать количество путевых листов, общий километраж поездок, общее количество отпущенного топлива вида gas с 2020-03-20 по 2020-03-25. Учесть гаражи, на которые не выдано путевых листов.","SELECT
num_garage
, COUNT(num_waybill)
, SUM(total_mileage)
, SUM(fuel_qty)
FROM garage
LEFT JOIN car ON garage.id_garage = car.id_garage
LEFT JOIN waybill ON car.id_car = waybill.id_car
LEFT JOIN refueling ON waybill.id_waybill = refueling.id_waybill
LEFT JOIN fuel ON refueling.id_fuel = fuel.id_fuel AND kind = 'gas'
LEFT JOIN statement ON refueling.id_statement = statement.id_statement AND date_st BETWEEN '2020-03-20' AND '2020-03-25'
GROUP BY num_garage;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",12,5,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0
720,"Для каждой автобазы сформировать следующую информацию: количество заправленных автомобилей, количество отпущенного топлива по каждой марке топлива по гаражу. В ответе учесть указанный порядок вывода информации. Использовать правое соединение.","SELECT
name_depot
, COUNT(license_plate)
, fuel_brand
, SUM(fuel_qty)
FROM fuel
RIGHT JOIN refueling ON fuel.id_fuel = refueling.id_fuel
RIGHT JOIN waybill ON refueling.id_waybill = waybill.id_waybill
RIGHT JOIN car ON waybill.id_car = car.id_car
RIGHT JOIN garage ON car.id_garage = garage.id_garage
RIGHT JOIN motor_depot ON garage.id_depot = motor_depot.id_depot
GROUP BY fuel_brand, name_depot;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",12,4,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0
721,"Вывести фамилии и имена водителей, которые водят автомобили марки Volvo или SCHMITZ. Использовать UNION.","SELECT
last_name
, first_name
FROM employee, car
WHERE employee.id_employee = car.id_employee AND brand = 'Volvo'
UNION DISTINCT
SELECT
last_name
, first_name
FROM employee, car
WHERE employee.id_employee = car.id_employee AND brand = 'SCHMITZ';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",13,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0
722,"Вывести фамилии и имена водителей и заправщиков, которые работали 2020-02-22. Использовать UNION.","SELECT
last_name
, first_name
FROM employee, statement
WHERE statement.id_employee = employee.id_employee
AND date_st = '2020-02-22'
UNION DISTINCT
SELECT
last_name
, first_name
FROM employee, car, waybill
WHERE employee.id_employee = car.id_employee
AND waybill.id_car = car.id_car
AND begin_date = '2020-02-22'
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",13,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0
723,"Вывести государственный номер автомобиля и его марку, если он заправляется газом (kind=gas) и (или) бензином (kind=petrol). Использовать UNION.","SELECT
license_plate
, brand
FROM car, waybill, refueling, fuel
WHERE car.id_car = waybill.id_car AND waybill.id_waybill = refueling.id_waybill
AND fuel.id_fuel = refueling.id_fuel AND kind = 'gas'
UNION DISTINCT
SELECT
license_plate
, brand
FROM car, waybill, refueling, fuel
WHERE car.id_car = waybill.id_car AND waybill.id_waybill = refueling.id_waybill
AND fuel.id_fuel = refueling.id_fuel AND kind = 'petrol'
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",13,2,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0
724,"Посчитать количество машин в каждом гараже. Учесть, что есть неукомплектованные гаражи. Использовать UNION.","SELECT
num_garage
, COUNT(license_plate) AS cars
FROM car, garage
WHERE car.id_garage = garage.id_garage
GROUP BY num_garage
UNION DISTINCT
SELECT
num_garage
, 0
FROM garage
WHERE id_garage NOT IN (SELECT id_garage FROM car);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",13,3,1,1,1,1,0,1,1,0,1,1,0,0,1,0,0
725,"Посчитать количество гаражей, принадлежащих каждой автобазе. Учесть неукомплектованные автобазы. Использовать UNION.","SELECT
name_depot
, COUNT(num_garage)
FROM motor_depot, garage
WHERE motor_depot.id_depot = garage.id_depot GROUP BY name_depot
UNION DISTINCT
SELECT
name_depot
, 0
FROM motor_depot
WHERE name_depot NOT IN (SELECT id_depot FROM garage WHERE id_depot IS NOT NULL);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",13,3,1,1,1,1,0,1,1,0,1,1,0,0,1,0,0
726,"Посчитать, сколько машин водит каждый сотрудник. Учесть сотрудников, которые не водят машины. Использовать UNION.","SELECT
last_name
, first_name
, COUNT(id_car)
FROM employee, car
WHERE car.id_employee = employee.id_employee GROUP BY employee.id_employee
UNION DISTINCT
SELECT
last_name
, first_name
, 0
FROM employee
WHERE last_name NOT IN (SELECT last_name FROM employee, car WHERE car.id_employee = employee.id_employee);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",13,3,1,1,1,1,0,1,1,0,1,1,0,0,1,0,0
727,Посчитать количество водителей в каждом гараже. Учесть неукомплектованные гаражи без штата водителей. В запросе использовать объединение запросов UNION.,"SELECT
num_garage
, COUNT(DISTINCT employee.id_employee)
FROM garage, car, employee
WHERE garage.id_garage = car.id_garage AND car.id_employee = employee.id_employee
GROUP BY num_garage
UNION DISTINCT
SELECT
num_garage
, 0
FROM garage
WHERE id_garage NOT IN (SELECT id_garage FROM car);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",13,3,1,1,1,1,0,1,1,0,1,1,0,0,1,0,0
728,"Для каждой автобазы вывести количество закрепленных за ней автомобилей. Учесть, что могут быть неукомплектованные автопарком автобазы. Использовать UNION.","SELECT
name_depot
, COUNT(license_plate)
FROM motor_depot, garage, car WHERE car.id_garage = garage.id_garage
AND garage.id_depot = motor_depot.id_depot
GROUP BY name_depot
UNION DISTINCT
SELECT
name_depot
, 0
FROM motor_depot, garage WHERE
garage.id_depot = motor_depot.id_depot
AND id_garage NOT IN (SELECT id_garage FROM car WHERE id_garage IS NOT NULL);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",13,3,1,1,1,1,0,1,1,0,1,1,0,0,1,0,0
729,"Вывести путевые листы, по которым заправились бензином, и суммарное количество отпущенного бензина. Учесть путевые листы, на которые не отпускалось бензина. Использовать UNION.","SELECT
num_waybill
, SUM(fuel_qty)
FROM waybill, refueling, fuel
WHERE waybill.id_waybill = refueling.id_waybill AND fuel.id_fuel = refueling.id_fuel
AND kind = 'petrol' GROUP BY num_waybill
UNION DISTINCT
SELECT
num_waybill
, 0
FROM waybill
WHERE num_waybill NOT IN (SELECT num_waybill FROM waybill, refueling, fuel
WHERE waybill.id_waybill = refueling.id_waybill AND refueling.id_fuel = fuel.id_fuel AND kind = 'petrol');
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",13,3,1,1,1,1,0,1,1,0,1,1,0,0,1,0,0
730,"Посчитать, сколько раз заправлялись каждым видом топлива c 2020-03-20 по 2020-03-26, учесть неотпускавшиеся виды топлива. Использовать UNION.","SELECT
fuel_brand
, COUNT(id_refuel)
FROM fuel, refueling, statement
WHERE fuel.id_fuel = refueling.id_fuel AND statement.id_statement = refueling.id_statement
AND date_st BETWEEN '2020-03-20' AND '2020-03-26' GROUP BY fuel_brand
UNION DISTINCT
SELECT
fuel_brand
, 0
FROM fuel WHERE id_fuel NOT IN (SELECT id_fuel FROM refueling, statement
WHERE refueling.id_statement = statement.id_statement AND date_st BETWEEN '2020-03-20' AND '2020-03-26');
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",13,4,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0
731,"Для каждого сотрудника, который осуществлял заправку с 2020-02-22 по 2020-03-28, вывести сколько топлива какого вида они отпустили и какому количеству машин. Учесть сотрудников, которые не работали в эти дни (fuel_brand = NULL, fuel_qty = 0, license_plate = 0). Использовать UNION.","SELECT
last_name
, fuel_brand
, SUM(fuel_qty)
, COUNT(id_car)
FROM employee, statement, fuel, refueling, waybill
WHERE employee.id_employee = statement.id_employee AND statement.id_statement = refueling.id_statement
AND refueling.id_fuel = fuel.id_fuel AND waybill.id_waybill = refueling.id_waybill
AND date_st BETWEEN '2020-02-22' AND '2020-03-28' GROUP BY last_name, fuel_brand
UNION DISTINCT
SELECT
last_name
, NULL
, 0
, 0
FROM employee WHERE id_employee NOT IN (SELECT id_employee
FROM statement WHERE date_st BETWEEN '2020-02-24' AND '2020-03-28');
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",13,4,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0
732,"Вывести номер автомобиля и суммарное количество отпущенного ему топлива с 2020-02-23 по 2020-02-27. Учесть автомобили, которые не заправлялись в это время. Использовать UNION.","SELECT
license_plate
, SUM(fuel_qty)
FROM car, waybill, refueling, statement
WHERE car.id_car = waybill.id_car AND waybill.id_waybill = refueling.id_waybill
AND refueling.id_statement = statement.id_statement AND date_st BETWEEN '2020-02-23' AND '2020-02-27'
GROUP BY license_plate
UNION DISTINCT
SELECT
license_plate
, 0
FROM car WHERE license_plate NOT IN (SELECT license_plate FROM car, waybill, refueling, statement
WHERE car.id_car = waybill.id_car AND waybill.id_waybill = refueling.id_waybill
AND refueling.id_statement = statement.id_statement AND date_st BETWEEN '2020-02-23' AND '2020-02-27');
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",13,4,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0
733,"Вывести количество заправленного топлива для водителей, которые заправлялись в те же дни, что и водитель по фамилии Saal, для остальных вывести фамилию и 0. Водителя Saal не выводить. Использовать предикат ANY и UNION.","SELECT
last_name
, SUM(fuel_qty)
FROM refueling, waybill, statement, car, employee
WHERE refueling.id_statement = statement.id_statement
AND refueling.id_waybill = waybill.id_waybill
AND car.id_car = waybill.id_car AND car.id_employee = employee.id_employee
AND date_st = ANY(SELECT date_st FROM statement, refueling, waybill, car, employee
where refueling.id_statement = statement.id_statement
AND refueling.id_waybill = waybill.id_waybill
AND car.id_car = waybill.id_car AND car.id_employee = employee.id_employee
AND last_name = 'Saal') AND last_name <> 'Saal' GROUP BY employee.id_employee
UNION DISTINCT
SELECT
last_name
, 0
FROM employee WHERE
id_employee NOT IN (SELECT employee.id_employee FROM refueling, waybill, statement, car, employee
WHERE refueling.id_statement = statement.id_statement
AND refueling.id_waybill = waybill.id_waybill
AND car.id_car = waybill.id_car AND car.id_employee = employee.id_employee
AND date_st = ANY(SELECT date_st FROM statement, refueling, waybill, car, employee
where refueling.id_statement = statement.id_statement
AND refueling.id_waybill = waybill.id_waybill
AND car.id_car = waybill.id_car AND car.id_employee = employee.id_employee
AND last_name = 'Saal') GROUP BY employee.id_employee);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",13,5,1,1,1,1,0,1,1,0,1,1,0,0,1,0,0
734,Для каждой автобазы вывести количество отпущенного топлива вида дизель с 2020-02-24 по 2020-03-29. Использовать UNION.,"SELECT
name_depot
, SUM(fuel_qty)
FROM motor_depot, garage, car, waybill, refueling, fuel, statement
WHERE motor_depot.id_depot = garage.id_depot AND garage.id_garage = car.id_garage
AND car.id_car = waybill.id_car AND waybill.id_waybill = refueling.id_waybill
AND refueling.id_fuel = fuel.id_fuel AND refueling.id_statement AND statement.id_statement
AND date_st BETWEEN '2020-02-24' AND '2020-03-29' AND kind = 'diesel'
GROUP BY name_depot
UNION DISTINCT
SELECT
name_depot
, 0
FROM motor_depot WHERE id_depot NOT IN (SELECT motor_depot.id_depot
FROM motor_depot, garage, car, waybill, refueling, fuel, statement
WHERE motor_depot.id_depot = garage.id_depot AND garage.id_garage = car.id_garage
AND car.id_car = waybill.id_car AND waybill.id_waybill = refueling.id_waybill
AND refueling.id_fuel = fuel.id_fuel AND refueling.id_statement AND statement.id_statement
AND date_st BETWEEN '2020-02-24' AND '2020-03-29' AND kind = 'diesel');
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",13,5,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0
735,"Вывести гос. номера и марки автомобилей, на которые не было выписано ни одного путевого листа. Исключить незарегистрированные машины (гос. номер NULL).В запросе использовать предикат EXISTS.","SELECT
license_plate
, brand
FROM car WHERE license_plate IS NOT NULL AND NOT EXISTS (SELECT * FROM waybill WHERE car.id_car = waybill.id_car);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",14,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0
736,"Вывести виды топлива, которыми заправлялись на 55 л и более за один раз. Ипользовать EXISTS.","SELECT fuel_brand FROM fuel WHERE EXISTS (SELECT id_fuel FROM refueling
WHERE fuel.id_fuel = refueling.id_fuel AND fuel_qty >= 55);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",14,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0
737,"Вывести номера автомобилей, на которые выданы путевые листы 2020-02-24. Использовать EXISTS.","SELECT license_plate FROM car WHERE EXISTS (SELECT id_car FROM waybill
WHERE waybill.id_car = car.id_car AND begin_date = '2020-02-24');
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",14,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0
738,"Вывести сотрудников, которые заправляли автомобили 2020-02-25. Использовать EXISTS.","SELECT
last_name
, first_name
FROM employee WHERE EXISTS (SELECT id_employee FROM statement
WHERE date_st = '2020-02-25' AND employee.id_employee = statement.id_employee);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",14,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0
739,"Вывести фамилии и имена сотрудников, которые работают водителями и заправщиками, используя EXISTS.","SELECT
last_name
, first_name
FROM employee WHERE EXISTS (SELECT car.id_employee
FROM statement, car WHERE statement.id_employee = car.id_employee
AND employee.id_employee = car.id_employee);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",14,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0
740,"Вывести путевые листы автомобилей, принадлежащих гаражу 8, также вывести пункт погрузки и разгрузки. Использовать EXISTS.","SELECT
num_waybill
, loading_point
, discharge_point
FROM waybill WHERE EXISTS (SELECT id_car
FROM car, garage WHERE car.id_garage = garage.id_garage AND car.id_car = waybill.id_car AND num_garage = 8);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",14,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0
741,"Вывести гаражи, в которых более 2 машин, используя EXISTS","SELECT num_garage FROM garage WHERE EXISTS (SELECT
id_garage
, COUNT(id_car)
FROM car WHERE
garage.id_garage = car.id_garage GROUP BY car.id_garage HAVING COUNT(id_car) > 2);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",14,2,1,1,1,0,0,1,1,1,0,0,0,0,0,1,0
742,"Вывести виды топлива, отпущеные с 2020-03-24 по 2020-03-26, используя EXISTS.","SELECT fuel_brand FROM fuel WHERE EXISTS (SELECT id_fuel FROM refueling, statement
WHERE refueling.id_statement = statement.id_statement AND fuel.id_fuel = refueling.id_fuel
AND date_st BETWEEN '2020-03-24' AND '2020-03-26');
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",14,2,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0
743,"Вывести сотрудников, которые работали водителями в промежуток между 2020-03-15 и 2020-03-20. Использовать EXISTS","SELECT
last_name
, first_name
FROM employee WHERE EXISTS (SELECT id_employee FROM car, waybill
WHERE car.id_employee = employee.id_employee AND waybill.id_car = car.id_car
AND begin_date BETWEEN '2020-03-15' AND '2020-03-20');
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",14,2,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0
744,"Вывести виды топлива, которыми заправлялись автомобили с цифрой 9 в номере. Использовать EXISTS","SELECT fuel_brand FROM fuel WHERE EXISTS (SELECT id_fuel FROM refueling, waybill, car
WHERE refueling.id_waybill = waybill.id_waybill AND car.id_car = waybill.id_car
AND license_plate LIKE '%9%' AND refueling.id_fuel = fuel.id_fuel);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",14,2,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0
745,"Посчитать количество путевых листов, выданных автомобили с 2020-02-22 по 2020-02-28, вывести в следующем порядке: номер авто, количество. Использовать EXISTS","SELECT
license_plate
, COUNT(num_waybill)
FROM car, waybill AS w1
WHERE car.id_car = w1.id_car AND EXISTS (SELECT num_waybill FROM waybill AS w2
WHERE w2.id_waybill = w1.id_waybill AND begin_date BETWEEN '2020-02-22' AND '2020-02-28')
GROUP BY license_plate;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",14,4,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0
746,Для машин с цифрами 5 или 8 в номере вывести номера путевых листов и сколько бензина было по ним отпущено. Выводить номер машины не нужно.,"SELECT
num_waybill
, SUM(fuel_qty)
FROM waybill, refueling
WHERE waybill.id_waybill = refueling.id_waybill AND EXISTS (SELECT id_car FROM car, fuel
WHERE car.id_car = waybill.id_car AND fuel.id_fuel = refueling.id_fuel
AND (license_plate LIKE '%5%' OR license_plate LIKE '%8%') AND kind = 'petrol') GROUP BY num_waybill;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",14,4,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0
747,"Вывести количество топлива, отпущенного с 2020-02-24 по 2020-02-28 сотрудниками с фамилиями на Ku. Вывести марку топлива и количество. Использовать EXISTS","SELECT
fuel_brand
, SUM(fuel_qty)
FROM refueling, fuel
WHERE refueling.id_fuel = fuel.id_fuel AND EXISTS (SELECT id_refuel FROM statement, employee
WHERE refueling.id_statement = statement.id_statement AND date_st BETWEEN '2020-02-24' AND '2020-02-28'
AND employee.id_employee = statement.id_employee AND employee.last_name LIKE 'Ku%') GROUP BY fuel_brand;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",14,4,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0
748,"Вывести водителей и автомобили, на которых они ездят, если автомобиль принадлежит 3 гаражу и они заправлялись с 2020-02-20 по 2020-02-28. Использовать EXISTS","SELECT
last_name
, first_name
, license_plate
FROM car, employee WHERE car.id_employee = employee.id_employee
AND EXISTS (SELECT id_car FROM waybill, statement, refueling WHERE waybill.id_waybill = refueling.id_waybill
AND statement.id_statement = refueling.id_statement AND waybill.id_car = car.id_car
AND date_st BETWEEN '2020-02-20' AND '2020-02-28') AND EXISTS (SELECT id_garage FROM garage WHERE num_garage = 3
AND car.id_garage = garage.id_garage);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",14,5,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0
749,"Вывести список автомобилей, которые заправлялись в те же дни, что и автомобили марки Scania, и виды топлива, которыми они заправлялись","SELECT
license_plate
, fuel_brand
FROM car, waybill, refueling, statement, fuel
WHERE car.id_car = waybill.id_car AND refueling.id_waybill = waybill.id_waybill
AND statement.id_statement = refueling.id_statement AND refueling.id_fuel = fuel.id_fuel
AND EXISTS (SELECT id_car FROM car AS c1 WHERE c1.id_car = car.id_car AND c1.brand <> 'Scania'
AND car.brand <> 'Scania') AND date_st IN (SELECT date_st FROM statement, refueling, waybill, car
WHERE brand = 'Scania' AND car.id_car = waybill.id_car AND waybill.id_waybill = refueling.id_waybill
AND refueling.id_statement = statement.id_statement);
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",14,5,1,1,1,1,0,0,0,0,1,1,0,0,0,1,0
750,"Вывести номер путевого листа, пункт погрузки и разгрузки и полезность поездки 1, если километраж с грузом больше 50% всей поездки, иначе полезность поездки 0.","SELECT
num_waybill
, loading_point
, discharge_point
, IF((mileage_with_cargo / total_mileage) > 0.5, 1, 0)
FROM waybill;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",15,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1
751,Для каждого автомобиля вывести идентификатор и 'содержит' или 'не содержит' номер автомобиля цифру 8.,"SELECT
id_car
, IF(license_plate LIKE '%8%', 'содержит', 'не содержит')
FROM car;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",15,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1
752,"Вывести температуру, при которой используется определьнный вид дизельного топлива. Для летнего(L) - >-5, для зимнего(Z) - >-30, для арктического(А) - >-50","SELECT
fuel_brand
, CASE
        WHEN fuel_brand = 'L' THEN '>-5'
    WHEN fuel_brand = 'Z' THEN '>-30'
    WHEN fuel_brand = 'A' THEN '>-50'
    END AS temperature
FROM fuel WHERE kind = 'diesel';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",15,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1
753,"Для каждого водителя вывести категории прав водителей. Если квалификация 3 - B,C; если 2 - B,C,D; если 1 - B,C,D,E ","SELECT
last_name
, first_name
, CASE
         WHEN qualification = 1 THEN 'B,C,D,E'
    WHEN qualification = 2 THEN 'B,C,D'
    WHEN qualification = 3 THEN 'B,C'
END AS qualification FROM employee WHERE position = 'driver';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",15,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1
754,"Вывести стоимость бензина по предприятию, если заправка бензином совершалась с 2020-02-20 по 2020-02-25. Стоимость бензина: AI-92 = 43.19, AI-95 = 46.69, AI-98 = 48.7.","SELECT SUM(
CASE
        WHEN fuel_brand = 'AI-92' THEN fuel_qty * 43.19
    WHEN fuel_brand = 'AI-95' THEN fuel_qty * 46.69
    WHEN fuel_brand = 'AI-98' THEN fuel_qty * 48.7
    END) AS total_sum
FROM fuel, refueling, statement
WHERE statement.id_statement = refueling.id_statement
AND fuel.id_fuel = refueling.id_fuel
AND date_st BETWEEN '2020-02-20' AND '2020-02-25'
AND kind = 'petrol'
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",15,4,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1
755,"Вывести номер путевого листа, месяц словом (февраль или март), когда была произведена заправка, тип топлива, количество, стоимость бензина. Стоимость бензина: AI-92 = 43.19, AI-95 = 46.69, AI-98 = 48.7","SELECT
num_waybill
, IF(MONTH(date_st) = 2, 'февраль', 'март')
, fuel_brand
, fuel_qty
, CASE
        WHEN fuel_brand = 'AI-92' THEN 43.19 * fuel_qty
    WHEN fuel_brand = 'AI-95' THEN 46.69 * fuel_qty
    WHEN fuel_brand = 'AI-98' THEN 48.7 * fuel_qty
    END AS price
FROM refueling, fuel, statement, waybill
WHERE refueling.id_fuel = fuel.id_fuel AND refueling.id_statement = statement.id_statement
AND refueling.id_waybill = waybill.id_waybill AND kind = 'petrol';
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",15,4,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1
756,"Для каждого путевого листа c 2020-02-22 по 2020-02-29 вывести суммарную стоимость бензина. Cтоимость бензина: AI-92 = 43.19, AI-95 = 46.69, AI-98 = 48.7","SELECT
num_waybill
, SUM(CASE
        WHEN fuel_brand = 'AI-92' THEN fuel_qty * 43.19
    WHEN fuel_brand = 'AI-95' THEN fuel_qty * 46.69
    WHEN fuel_brand = 'AI-98' THEN fuel_qty * 48.7
END) AS price FROM waybill, refueling, fuel
WHERE waybill.id_waybill = refueling.id_waybill AND refueling.id_fuel = fuel.id_fuel
AND begin_date BETWEEN '2020-02-22' AND '2020-02-29' AND kind = 'petrol' GROUP BY num_waybill;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",15,4,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1
757,"Для каждого сотрудника, который осуществлял заправку с 2020-02-22 по 2020-03-28, вывести, сколько топлива какого вида они отпустили, стоимость топлива и какому количеству машин. Стоимость топлива: AI-92 = 43.19, AI-95 = 46.69, AI-98 = 48.7, остальных = 45.5 ","SELECT
last_name
, fuel_brand
, SUM(fuel_qty)
, SUM(CASE
        WHEN fuel_brand = 'AI-92' THEN 43.19 * fuel_qty
    WHEN fuel_brand = 'AI-95' THEN 46.69 * fuel_qty
    WHEN fuel_brand = 'AI-98' THEN 48.7 * fuel_qty
    ELSE 45.5 * fuel_qty
END) AS price
, COUNT(id_car)
FROM employee, statement, fuel, refueling, waybill
WHERE employee.id_employee = statement.id_employee AND statement.id_statement = refueling.id_statement
AND refueling.id_fuel = fuel.id_fuel AND waybill.id_waybill = refueling.id_waybill
AND date_st BETWEEN '2020-02-22' AND '2020-03-28' GROUP BY last_name, fuel_brand;
","
CREATE TABLE car (
  id_garage INT NOT NULL,
  license_plate VARCHAR(20) DEFAULT NULL,
  brand VARCHAR(20) NOT NULL,
  id_employee VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL PRIMARY KEY,
  CONSTRAINT car_ibfk_1 FOREIGN KEY (id_garage) REFERENCES garage (id_garage),
  CONSTRAINT car_ibfk_2 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE employee (
  id_employee VARCHAR(20) NOT NULL PRIMARY KEY,
  first_name VARCHAR(20) NOT NULL,
  position VARCHAR(20) NOT NULL,
  qualification INT DEFAULT NULL,
  last_name VARCHAR(20) DEFAULT NULL,
);

CREATE TABLE fuel (
  fuel_brand VARCHAR(20) DEFAULT NULL,
  kind VARCHAR(20) NOT NULL,
  id_fuel INT NOT NULL PRIMARY KEY,
);

CREATE TABLE garage (
  id_depot INT NOT NULL,
  id_garage INT NOT NULL PRIMARY KEY,
  garage_address VARCHAR(20) NOT NULL,
  num_garage INT DEFAULT NULL,
  CONSTRAINT garage_ibfk_1 FOREIGN KEY (id_depot) REFERENCES motor_depot (id_depot)
);

CREATE TABLE motor_depot (
  name_depot VARCHAR(20) NOT NULL,
  address VARCHAR(20) NOT NULL,
  id_depot INT NOT NULL PRIMARY KEY,
);

CREATE TABLE refueling (
  fuel_qty INT NOT NULL,
  id_refuel INT NOT NULL PRIMARY KEY,
  id_fuel INT DEFAULT NULL,
  id_statement INT DEFAULT NULL,
  id_waybill VARCHAR(18) DEFAULT NULL,
  CONSTRAINT refueling_ibfk_1 FOREIGN KEY (id_waybill) REFERENCES waybill (id_waybill)
);

CREATE TABLE statement (
  id_employee VARCHAR(20) NOT NULL,
  date_st DATE NOT NULL,
  num_statement INT DEFAULT NULL,
  id_statement INT NOT NULL PRIMARY KEY,
  CONSTRAINT statement_ibfk_1 FOREIGN KEY (id_employee) REFERENCES employee (id_employee)
);

CREATE TABLE waybill (
  num_waybill INT DEFAULT NULL,
  loading_point VARCHAR(20) NOT NULL,
  discharge_point VARCHAR(20) NOT NULL,
  consignee VARCHAR(20) NOT NULL,
  total_mileage INT NOT NULL,
  mileage_with_cargo INT DEFAULT NULL,
  consignor VARCHAR(20) DEFAULT NULL,
  id_car INT NOT NULL,
  id_waybill VARCHAR(18) NOT NULL PRIMARY KEY,
  begin_date DATE DEFAULT NULL,
  end_date DATE DEFAULT NULL,
  CONSTRAINT waybill_ibfk_1 FOREIGN KEY (id_car) REFERENCES car (id_car)
);
",15,5,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1
